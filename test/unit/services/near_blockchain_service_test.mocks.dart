// Mocks generated by Mockito 5.4.4 from annotations
// in flutterchain/test/unit/services/near_blockchain_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter/material.dart' as _i13;
import 'package:flutterchain/flutterchain_lib/models/chains/near/near_blockchain_data.dart'
    as _i5;
import 'package:flutterchain/flutterchain_lib/models/chains/near/near_mpc_account_info.dart'
    as _i7;
import 'package:flutterchain/flutterchain_lib/models/chains/near/near_mpc_transaction_info.dart'
    as _i14;
import 'package:flutterchain/flutterchain_lib/models/chains/near/near_transaction_info.dart'
    as _i6;
import 'package:flutterchain/flutterchain_lib/models/core/blockchain_response.dart'
    as _i4;
import 'package:flutterchain/flutterchain_lib/models/core/transfer_request.dart'
    as _i10;
import 'package:flutterchain/flutterchain_lib/models/core/wallet.dart' as _i12;
import 'package:flutterchain/flutterchain_lib/network/chains/near_rpc_client.dart'
    as _i3;
import 'package:flutterchain/flutterchain_lib/services/chains/near_blockchain_service.dart'
    as _i8;
import 'package:flutterchain/flutterchain_lib/services/core/js_engines/core/js_vm.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJsVMService_0 extends _i1.SmartFake implements _i2.JsVMService {
  _FakeJsVMService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNearRpcClient_1 extends _i1.SmartFake implements _i3.NearRpcClient {
  _FakeNearRpcClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBlockchainResponse_2 extends _i1.SmartFake
    implements _i4.BlockchainResponse {
  _FakeBlockchainResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNearBlockChainData_3 extends _i1.SmartFake
    implements _i5.NearBlockChainData {
  _FakeNearBlockChainData_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNearTransactionInfoModel_4 extends _i1.SmartFake
    implements _i6.NearTransactionInfoModel {
  _FakeNearTransactionInfoModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMPCAccountInfo_5 extends _i1.SmartFake
    implements _i7.MPCAccountInfo {
  _FakeMPCAccountInfo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NearBlockChainService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNearBlockChainService extends _i1.Mock
    implements _i8.NearBlockChainService {
  MockNearBlockChainService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.JsVMService get jsVMService => (super.noSuchMethod(
        Invocation.getter(#jsVMService),
        returnValue: _FakeJsVMService_0(
          this,
          Invocation.getter(#jsVMService),
        ),
      ) as _i2.JsVMService);

  @override
  _i3.NearRpcClient get nearRpcClient => (super.noSuchMethod(
        Invocation.getter(#nearRpcClient),
        returnValue: _FakeNearRpcClient_1(
          this,
          Invocation.getter(#nearRpcClient),
        ),
      ) as _i3.NearRpcClient);

  @override
  _i9.Future<_i4.BlockchainResponse> sendTransferNativeCoin(
          _i10.TransferRequest? transferRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTransferNativeCoin,
          [transferRequest],
        ),
        returnValue:
            _i9.Future<_i4.BlockchainResponse>.value(_FakeBlockchainResponse_2(
          this,
          Invocation.method(
            #sendTransferNativeCoin,
            [transferRequest],
          ),
        )),
      ) as _i9.Future<_i4.BlockchainResponse>);

  @override
  _i9.Future<_i4.BlockchainResponse> callSmartContractFunction(
          _i10.TransferRequest? transferRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #callSmartContractFunction,
          [transferRequest],
        ),
        returnValue:
            _i9.Future<_i4.BlockchainResponse>.value(_FakeBlockchainResponse_2(
          this,
          Invocation.method(
            #callSmartContractFunction,
            [transferRequest],
          ),
        )),
      ) as _i9.Future<_i4.BlockchainResponse>);

  @override
  _i9.Future<_i4.BlockchainResponse> callViewMethod({
    required String? contractId,
    required String? method,
    Map<String, dynamic>? args = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #callViewMethod,
          [],
          {
            #contractId: contractId,
            #method: method,
            #args: args,
          },
        ),
        returnValue:
            _i9.Future<_i4.BlockchainResponse>.value(_FakeBlockchainResponse_2(
          this,
          Invocation.method(
            #callViewMethod,
            [],
            {
              #contractId: contractId,
              #method: method,
              #args: args,
            },
          ),
        )),
      ) as _i9.Future<_i4.BlockchainResponse>);

  @override
  _i9.Future<String> getWalletBalance(_i10.TransferRequest? transferRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWalletBalance,
          [transferRequest],
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #getWalletBalance,
            [transferRequest],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<void> setBlockchainNetworkEnvironment({required String? newUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBlockchainNetworkEnvironment,
          [],
          {#newUrl: newUrl},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  Set<String> getBlockchainsUrlsByBlockchainType() => (super.noSuchMethod(
        Invocation.method(
          #getBlockchainsUrlsByBlockchainType,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  _i9.Future<_i5.NearBlockChainData> getBlockChainDataByDerivationPath({
    required String? mnemonic,
    required String? passphrase,
    required _i12.DerivationPath? derivationPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBlockChainDataByDerivationPath,
          [],
          {
            #mnemonic: mnemonic,
            #passphrase: passphrase,
            #derivationPath: derivationPath,
          },
        ),
        returnValue:
            _i9.Future<_i5.NearBlockChainData>.value(_FakeNearBlockChainData_3(
          this,
          Invocation.method(
            #getBlockChainDataByDerivationPath,
            [],
            {
              #mnemonic: mnemonic,
              #passphrase: passphrase,
              #derivationPath: derivationPath,
            },
          ),
        )),
      ) as _i9.Future<_i5.NearBlockChainData>);

  @override
  _i9.Future<_i5.NearBlockChainData> getBlockChainDataFromMnemonic(
    String? mnemonic,
    String? passphrase,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBlockChainDataFromMnemonic,
          [
            mnemonic,
            passphrase,
          ],
        ),
        returnValue:
            _i9.Future<_i5.NearBlockChainData>.value(_FakeNearBlockChainData_3(
          this,
          Invocation.method(
            #getBlockChainDataFromMnemonic,
            [
              mnemonic,
              passphrase,
            ],
          ),
        )),
      ) as _i9.Future<_i5.NearBlockChainData>);

  @override
  _i9.Future<_i6.NearTransactionInfoModel> getTransactionInfo({
    required String? accountId,
    required String? publicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionInfo,
          [],
          {
            #accountId: accountId,
            #publicKey: publicKey,
          },
        ),
        returnValue: _i9.Future<_i6.NearTransactionInfoModel>.value(
            _FakeNearTransactionInfoModel_4(
          this,
          Invocation.method(
            #getTransactionInfo,
            [],
            {
              #accountId: accountId,
              #publicKey: publicKey,
            },
          ),
        )),
      ) as _i9.Future<_i6.NearTransactionInfoModel>);

  @override
  _i9.Future<_i4.BlockchainResponse> sendTransactionNearSync(
          {required List<String>? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTransactionNearSync,
          [],
          {#params: params},
        ),
        returnValue:
            _i9.Future<_i4.BlockchainResponse>.value(_FakeBlockchainResponse_2(
          this,
          Invocation.method(
            #sendTransactionNearSync,
            [],
            {#params: params},
          ),
        )),
      ) as _i9.Future<_i4.BlockchainResponse>);

  @override
  _i9.Future<_i4.BlockchainResponse> sendTransactionNearAsync(
          {required List<String>? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTransactionNearAsync,
          [],
          {#params: params},
        ),
        returnValue:
            _i9.Future<_i4.BlockchainResponse>.value(_FakeBlockchainResponse_2(
          this,
          Invocation.method(
            #sendTransactionNearAsync,
            [],
            {#params: params},
          ),
        )),
      ) as _i9.Future<_i4.BlockchainResponse>);

  @override
  _i9.Future<String> signNearActions({
    required String? fromAddress,
    required String? toAddress,
    required String? transferAmount,
    required String? privateKey,
    required String? gas,
    required int? nonce,
    required String? blockHash,
    required List<Map<String, dynamic>>? actions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signNearActions,
          [],
          {
            #fromAddress: fromAddress,
            #toAddress: toAddress,
            #transferAmount: transferAmount,
            #privateKey: privateKey,
            #gas: gas,
            #nonce: nonce,
            #blockHash: blockHash,
            #actions: actions,
          },
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #signNearActions,
            [],
            {
              #fromAddress: fromAddress,
              #toAddress: toAddress,
              #transferAmount: transferAmount,
              #privateKey: privateKey,
              #gas: gas,
              #nonce: nonce,
              #blockHash: blockHash,
              #actions: actions,
            },
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i4.BlockchainResponse> deleteKey({
    required String? accountId,
    required String? deletedPublicKey,
    required String? privateKey,
    required String? publicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteKey,
          [],
          {
            #accountId: accountId,
            #deletedPublicKey: deletedPublicKey,
            #privateKey: privateKey,
            #publicKey: publicKey,
          },
        ),
        returnValue:
            _i9.Future<_i4.BlockchainResponse>.value(_FakeBlockchainResponse_2(
          this,
          Invocation.method(
            #deleteKey,
            [],
            {
              #accountId: accountId,
              #deletedPublicKey: deletedPublicKey,
              #privateKey: privateKey,
              #publicKey: publicKey,
            },
          ),
        )),
      ) as _i9.Future<_i4.BlockchainResponse>);

  @override
  _i9.Future<_i4.BlockchainResponse> addKey({
    required String? fromAddress,
    required String? mnemonic,
    String? passphrase = r'',
    required _i12.DerivationPath? derivationPathOfNewGeneratedAccount,
    required String? permission,
    required String? allowance,
    required String? smartContractId,
    required List<String>? methodNames,
    required String? privateKey,
    required String? publicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addKey,
          [],
          {
            #fromAddress: fromAddress,
            #mnemonic: mnemonic,
            #passphrase: passphrase,
            #derivationPathOfNewGeneratedAccount:
                derivationPathOfNewGeneratedAccount,
            #permission: permission,
            #allowance: allowance,
            #smartContractId: smartContractId,
            #methodNames: methodNames,
            #privateKey: privateKey,
            #publicKey: publicKey,
          },
        ),
        returnValue:
            _i9.Future<_i4.BlockchainResponse>.value(_FakeBlockchainResponse_2(
          this,
          Invocation.method(
            #addKey,
            [],
            {
              #fromAddress: fromAddress,
              #mnemonic: mnemonic,
              #passphrase: passphrase,
              #derivationPathOfNewGeneratedAccount:
                  derivationPathOfNewGeneratedAccount,
              #permission: permission,
              #allowance: allowance,
              #smartContractId: smartContractId,
              #methodNames: methodNames,
              #privateKey: privateKey,
              #publicKey: publicKey,
            },
          ),
        )),
      ) as _i9.Future<_i4.BlockchainResponse>);

  @override
  _i9.Future<String> exportPrivateKeyToTheNearApiJsFormat(
          {_i12.BlockChainData? currentBlockchainData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportPrivateKeyToTheNearApiJsFormat,
          [],
          {#currentBlockchainData: currentBlockchainData},
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #exportPrivateKeyToTheNearApiJsFormat,
            [],
            {#currentBlockchainData: currentBlockchainData},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> getBase58PubKeyFromHexValue(
          {required String? hexEncodedPubKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBase58PubKeyFromHexValue,
          [],
          {#hexEncodedPubKey: hexEncodedPubKey},
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #getBase58PubKeyFromHexValue,
            [],
            {#hexEncodedPubKey: hexEncodedPubKey},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> getPublicKeyFromSecretKeyFromNearApiJSFormat(
          String? base58PrivateKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicKeyFromSecretKeyFromNearApiJSFormat,
          [base58PrivateKey],
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #getPublicKeyFromSecretKeyFromNearApiJSFormat,
            [base58PrivateKey],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> getPrivateKeyFromSecretKeyFromNearApiJSFormat(
          String? base58PrivateKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrivateKeyFromSecretKeyFromNearApiJSFormat,
          [base58PrivateKey],
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #getPrivateKeyFromSecretKeyFromNearApiJSFormat,
            [base58PrivateKey],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> getBlockchainNetworkEnvironment() => (super.noSuchMethod(
        Invocation.method(
          #getBlockchainNetworkEnvironment,
          [],
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #getBlockchainNetworkEnvironment,
            [],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<void> authWithNearWalletsWeb(
    String? privateNearAPIjsFormat, [
    String? successUrlCallBackWeb,
    String? failureUrlCallBackWeb,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #authWithNearWalletsWeb,
          [
            privateNearAPIjsFormat,
            successUrlCallBackWeb,
            failureUrlCallBackWeb,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<String> authWithNearWallets(
    _i13.BuildContext? context,
    String? privateNearAPIjsFormat,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #authWithNearWallets,
          [
            context,
            privateNearAPIjsFormat,
          ],
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #authWithNearWallets,
            [
              context,
              privateNearAPIjsFormat,
            ],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i7.MPCAccountInfo> getMPCAccount({
    required String? accountId,
    String? path = r'flutterchain',
    String? chain = r'ETHEREUM',
    String? typeOfNetwork = r'testnet',
    String? mpcPublicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMPCAccount,
          [],
          {
            #accountId: accountId,
            #path: path,
            #chain: chain,
            #typeOfNetwork: typeOfNetwork,
            #mpcPublicKey: mpcPublicKey,
          },
        ),
        returnValue: _i9.Future<_i7.MPCAccountInfo>.value(_FakeMPCAccountInfo_5(
          this,
          Invocation.method(
            #getMPCAccount,
            [],
            {
              #accountId: accountId,
              #path: path,
              #chain: chain,
              #typeOfNetwork: typeOfNetwork,
              #mpcPublicKey: mpcPublicKey,
            },
          ),
        )),
      ) as _i9.Future<_i7.MPCAccountInfo>);

  @override
  _i9.Future<String> signEVMTransationWithMPC({
    required String? accountId,
    required String? publicKey,
    required String? privateKey,
    required _i14.MpcTransactionInfo? mpcTransactionInfo,
    required String? senderAdress,
    String? path = r'flutterchain',
    String? mpcContract = r'v2.multichain-mpc.testnet',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signEVMTransationWithMPC,
          [],
          {
            #accountId: accountId,
            #publicKey: publicKey,
            #privateKey: privateKey,
            #mpcTransactionInfo: mpcTransactionInfo,
            #senderAdress: senderAdress,
            #path: path,
            #mpcContract: mpcContract,
          },
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #signEVMTransationWithMPC,
            [],
            {
              #accountId: accountId,
              #publicKey: publicKey,
              #privateKey: privateKey,
              #mpcTransactionInfo: mpcTransactionInfo,
              #senderAdress: senderAdress,
              #path: path,
              #mpcContract: mpcContract,
            },
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> signBTCTransactionWithMPC({
    required String? accountId,
    required String? publicKey,
    required String? privateKey,
    required _i14.MpcTransactionInfo? transactionInfo,
    required String? mpcSenderPublicKey,
    String? path = r'flutterchain',
    String? mpcContract = r'v2.multichain-mpc.testnet',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signBTCTransactionWithMPC,
          [],
          {
            #accountId: accountId,
            #publicKey: publicKey,
            #privateKey: privateKey,
            #transactionInfo: transactionInfo,
            #mpcSenderPublicKey: mpcSenderPublicKey,
            #path: path,
            #mpcContract: mpcContract,
          },
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #signBTCTransactionWithMPC,
            [],
            {
              #accountId: accountId,
              #publicKey: publicKey,
              #privateKey: privateKey,
              #transactionInfo: transactionInfo,
              #mpcSenderPublicKey: mpcSenderPublicKey,
              #path: path,
              #mpcContract: mpcContract,
            },
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> signXRPTransactionWithMPC({
    required String? accountId,
    required String? publicKey,
    required String? privateKey,
    required _i14.MpcTransactionInfo? mpcTransactionInfo,
    String? path = r'flutterchain',
    String? mpcContract = r'v2.multichain-mpc.testnet',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signXRPTransactionWithMPC,
          [],
          {
            #accountId: accountId,
            #publicKey: publicKey,
            #privateKey: privateKey,
            #mpcTransactionInfo: mpcTransactionInfo,
            #path: path,
            #mpcContract: mpcContract,
          },
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #signXRPTransactionWithMPC,
            [],
            {
              #accountId: accountId,
              #publicKey: publicKey,
              #privateKey: privateKey,
              #mpcTransactionInfo: mpcTransactionInfo,
              #path: path,
              #mpcContract: mpcContract,
            },
          ),
        )),
      ) as _i9.Future<String>);
}
