//
//  Generated code. Do not modify.
//  source: lib/flutterchain_lib/network/chains/concordium_grpc/protos/types.proto
//
// @dart = 2.12

// ignore_for_file: annotate_overrides, camel_case_types, comment_references
// ignore_for_file: constant_identifier_names, library_prefixes
// ignore_for_file: non_constant_identifier_names, prefer_final_fields
// ignore_for_file: unnecessary_import, unnecessary_this, unused_import

import 'dart:core' as $core;

import 'package:fixnum/fixnum.dart' as $fixnum;
import 'package:protobuf/protobuf.dart' as $pb;

import 'types.pbenum.dart';

export 'types.pbenum.dart';

/// A message that contains no information.
class Empty extends $pb.GeneratedMessage {
  factory Empty() => create();
  Empty._() : super();
  factory Empty.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Empty.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Empty', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Empty clone() => Empty()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Empty copyWith(void Function(Empty) updates) => super.copyWith((message) => updates(message as Empty)) as Empty;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Empty create() => Empty._();
  Empty createEmptyInstance() => create();
  static $pb.PbList<Empty> createRepeated() => $pb.PbList<Empty>();
  @$core.pragma('dart2js:noInline')
  static Empty getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Empty>(create);
  static Empty? _defaultInstance;
}

/// Hash of a block. This is always 32 bytes long.
class BlockHash extends $pb.GeneratedMessage {
  factory BlockHash({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  BlockHash._() : super();
  factory BlockHash.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockHash.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockHash', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockHash clone() => BlockHash()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockHash copyWith(void Function(BlockHash) updates) => super.copyWith((message) => updates(message as BlockHash)) as BlockHash;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockHash create() => BlockHash._();
  BlockHash createEmptyInstance() => create();
  static $pb.PbList<BlockHash> createRepeated() => $pb.PbList<BlockHash>();
  @$core.pragma('dart2js:noInline')
  static BlockHash getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockHash>(create);
  static BlockHash? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A SHA256 hash. This is always 32 bytes long.
class Sha256Hash extends $pb.GeneratedMessage {
  factory Sha256Hash({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Sha256Hash._() : super();
  factory Sha256Hash.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Sha256Hash.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Sha256Hash', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Sha256Hash clone() => Sha256Hash()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Sha256Hash copyWith(void Function(Sha256Hash) updates) => super.copyWith((message) => updates(message as Sha256Hash)) as Sha256Hash;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Sha256Hash create() => Sha256Hash._();
  Sha256Hash createEmptyInstance() => create();
  static $pb.PbList<Sha256Hash> createRepeated() => $pb.PbList<Sha256Hash>();
  @$core.pragma('dart2js:noInline')
  static Sha256Hash getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Sha256Hash>(create);
  static Sha256Hash? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Hash of a transaction. This is always 32 bytes long.
class TransactionHash extends $pb.GeneratedMessage {
  factory TransactionHash({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  TransactionHash._() : super();
  factory TransactionHash.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TransactionHash.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TransactionHash', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TransactionHash clone() => TransactionHash()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TransactionHash copyWith(void Function(TransactionHash) updates) => super.copyWith((message) => updates(message as TransactionHash)) as TransactionHash;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TransactionHash create() => TransactionHash._();
  TransactionHash createEmptyInstance() => create();
  static $pb.PbList<TransactionHash> createRepeated() => $pb.PbList<TransactionHash>();
  @$core.pragma('dart2js:noInline')
  static TransactionHash getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TransactionHash>(create);
  static TransactionHash? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Hash of the state after some block. This is always 32 bytes long.
class StateHash extends $pb.GeneratedMessage {
  factory StateHash({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  StateHash._() : super();
  factory StateHash.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory StateHash.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'StateHash', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  StateHash clone() => StateHash()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  StateHash copyWith(void Function(StateHash) updates) => super.copyWith((message) => updates(message as StateHash)) as StateHash;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static StateHash create() => StateHash._();
  StateHash createEmptyInstance() => create();
  static $pb.PbList<StateHash> createRepeated() => $pb.PbList<StateHash>();
  @$core.pragma('dart2js:noInline')
  static StateHash getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<StateHash>(create);
  static StateHash? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The absolute height of a block. This is the number of ancestors of a block
/// since the genesis block. In particular, the chain genesis block has absolute
/// height 0.
class AbsoluteBlockHeight extends $pb.GeneratedMessage {
  factory AbsoluteBlockHeight({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  AbsoluteBlockHeight._() : super();
  factory AbsoluteBlockHeight.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AbsoluteBlockHeight.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AbsoluteBlockHeight', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AbsoluteBlockHeight clone() => AbsoluteBlockHeight()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AbsoluteBlockHeight copyWith(void Function(AbsoluteBlockHeight) updates) => super.copyWith((message) => updates(message as AbsoluteBlockHeight)) as AbsoluteBlockHeight;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AbsoluteBlockHeight create() => AbsoluteBlockHeight._();
  AbsoluteBlockHeight createEmptyInstance() => create();
  static $pb.PbList<AbsoluteBlockHeight> createRepeated() => $pb.PbList<AbsoluteBlockHeight>();
  @$core.pragma('dart2js:noInline')
  static AbsoluteBlockHeight getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AbsoluteBlockHeight>(create);
  static AbsoluteBlockHeight? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The height of a block relative to the last genesis. This differs from the
/// absolute block height in that it counts height from the last protocol update.
class BlockHeight extends $pb.GeneratedMessage {
  factory BlockHeight({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  BlockHeight._() : super();
  factory BlockHeight.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockHeight.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockHeight', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockHeight clone() => BlockHeight()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockHeight copyWith(void Function(BlockHeight) updates) => super.copyWith((message) => updates(message as BlockHeight)) as BlockHeight;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockHeight create() => BlockHeight._();
  BlockHeight createEmptyInstance() => create();
  static $pb.PbList<BlockHeight> createRepeated() => $pb.PbList<BlockHeight>();
  @$core.pragma('dart2js:noInline')
  static BlockHeight getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockHeight>(create);
  static BlockHeight? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The ID of a baker, which is the index of its account.
class BakerId extends $pb.GeneratedMessage {
  factory BakerId({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  BakerId._() : super();
  factory BakerId.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerId.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerId', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerId clone() => BakerId()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerId copyWith(void Function(BakerId) updates) => super.copyWith((message) => updates(message as BakerId)) as BakerId;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerId create() => BakerId._();
  BakerId createEmptyInstance() => create();
  static $pb.PbList<BakerId> createRepeated() => $pb.PbList<BakerId>();
  @$core.pragma('dart2js:noInline')
  static BakerId getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerId>(create);
  static BakerId? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Index of the account in the account table. These are assigned sequentially
/// in the order of creation of accounts. The first account has index 0.
class AccountIndex extends $pb.GeneratedMessage {
  factory AccountIndex({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  AccountIndex._() : super();
  factory AccountIndex.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountIndex.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountIndex', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountIndex clone() => AccountIndex()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountIndex copyWith(void Function(AccountIndex) updates) => super.copyWith((message) => updates(message as AccountIndex)) as AccountIndex;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountIndex create() => AccountIndex._();
  AccountIndex createEmptyInstance() => create();
  static $pb.PbList<AccountIndex> createRepeated() => $pb.PbList<AccountIndex>();
  @$core.pragma('dart2js:noInline')
  static AccountIndex getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountIndex>(create);
  static AccountIndex? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A smart contract module reference. This is always 32 bytes long.
class ModuleRef extends $pb.GeneratedMessage {
  factory ModuleRef({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ModuleRef._() : super();
  factory ModuleRef.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ModuleRef.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ModuleRef', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ModuleRef clone() => ModuleRef()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ModuleRef copyWith(void Function(ModuleRef) updates) => super.copyWith((message) => updates(message as ModuleRef)) as ModuleRef;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ModuleRef create() => ModuleRef._();
  ModuleRef createEmptyInstance() => create();
  static $pb.PbList<ModuleRef> createRepeated() => $pb.PbList<ModuleRef>();
  @$core.pragma('dart2js:noInline')
  static ModuleRef getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ModuleRef>(create);
  static ModuleRef? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Source bytes of a smart contract v0 module.
class VersionedModuleSource_ModuleSourceV0 extends $pb.GeneratedMessage {
  factory VersionedModuleSource_ModuleSourceV0({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  VersionedModuleSource_ModuleSourceV0._() : super();
  factory VersionedModuleSource_ModuleSourceV0.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VersionedModuleSource_ModuleSourceV0.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VersionedModuleSource.ModuleSourceV0', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VersionedModuleSource_ModuleSourceV0 clone() => VersionedModuleSource_ModuleSourceV0()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VersionedModuleSource_ModuleSourceV0 copyWith(void Function(VersionedModuleSource_ModuleSourceV0) updates) => super.copyWith((message) => updates(message as VersionedModuleSource_ModuleSourceV0)) as VersionedModuleSource_ModuleSourceV0;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VersionedModuleSource_ModuleSourceV0 create() => VersionedModuleSource_ModuleSourceV0._();
  VersionedModuleSource_ModuleSourceV0 createEmptyInstance() => create();
  static $pb.PbList<VersionedModuleSource_ModuleSourceV0> createRepeated() => $pb.PbList<VersionedModuleSource_ModuleSourceV0>();
  @$core.pragma('dart2js:noInline')
  static VersionedModuleSource_ModuleSourceV0 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VersionedModuleSource_ModuleSourceV0>(create);
  static VersionedModuleSource_ModuleSourceV0? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Source bytes of a smart contract v1 module.
class VersionedModuleSource_ModuleSourceV1 extends $pb.GeneratedMessage {
  factory VersionedModuleSource_ModuleSourceV1({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  VersionedModuleSource_ModuleSourceV1._() : super();
  factory VersionedModuleSource_ModuleSourceV1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VersionedModuleSource_ModuleSourceV1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VersionedModuleSource.ModuleSourceV1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VersionedModuleSource_ModuleSourceV1 clone() => VersionedModuleSource_ModuleSourceV1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VersionedModuleSource_ModuleSourceV1 copyWith(void Function(VersionedModuleSource_ModuleSourceV1) updates) => super.copyWith((message) => updates(message as VersionedModuleSource_ModuleSourceV1)) as VersionedModuleSource_ModuleSourceV1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VersionedModuleSource_ModuleSourceV1 create() => VersionedModuleSource_ModuleSourceV1._();
  VersionedModuleSource_ModuleSourceV1 createEmptyInstance() => create();
  static $pb.PbList<VersionedModuleSource_ModuleSourceV1> createRepeated() => $pb.PbList<VersionedModuleSource_ModuleSourceV1>();
  @$core.pragma('dart2js:noInline')
  static VersionedModuleSource_ModuleSourceV1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VersionedModuleSource_ModuleSourceV1>(create);
  static VersionedModuleSource_ModuleSourceV1? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

enum VersionedModuleSource_Module {
  v0, 
  v1, 
  notSet
}

/// Source bytes of a versioned smart contract module.
class VersionedModuleSource extends $pb.GeneratedMessage {
  factory VersionedModuleSource({
    VersionedModuleSource_ModuleSourceV0? v0,
    VersionedModuleSource_ModuleSourceV1? v1,
  }) {
    final $result = create();
    if (v0 != null) {
      $result.v0 = v0;
    }
    if (v1 != null) {
      $result.v1 = v1;
    }
    return $result;
  }
  VersionedModuleSource._() : super();
  factory VersionedModuleSource.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VersionedModuleSource.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, VersionedModuleSource_Module> _VersionedModuleSource_ModuleByTag = {
    1 : VersionedModuleSource_Module.v0,
    2 : VersionedModuleSource_Module.v1,
    0 : VersionedModuleSource_Module.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VersionedModuleSource', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<VersionedModuleSource_ModuleSourceV0>(1, _omitFieldNames ? '' : 'v0', subBuilder: VersionedModuleSource_ModuleSourceV0.create)
    ..aOM<VersionedModuleSource_ModuleSourceV1>(2, _omitFieldNames ? '' : 'v1', subBuilder: VersionedModuleSource_ModuleSourceV1.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VersionedModuleSource clone() => VersionedModuleSource()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VersionedModuleSource copyWith(void Function(VersionedModuleSource) updates) => super.copyWith((message) => updates(message as VersionedModuleSource)) as VersionedModuleSource;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VersionedModuleSource create() => VersionedModuleSource._();
  VersionedModuleSource createEmptyInstance() => create();
  static $pb.PbList<VersionedModuleSource> createRepeated() => $pb.PbList<VersionedModuleSource>();
  @$core.pragma('dart2js:noInline')
  static VersionedModuleSource getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VersionedModuleSource>(create);
  static VersionedModuleSource? _defaultInstance;

  VersionedModuleSource_Module whichModule() => _VersionedModuleSource_ModuleByTag[$_whichOneof(0)]!;
  void clearModule() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  VersionedModuleSource_ModuleSourceV0 get v0 => $_getN(0);
  @$pb.TagNumber(1)
  set v0(VersionedModuleSource_ModuleSourceV0 v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasV0() => $_has(0);
  @$pb.TagNumber(1)
  void clearV0() => clearField(1);
  @$pb.TagNumber(1)
  VersionedModuleSource_ModuleSourceV0 ensureV0() => $_ensure(0);

  @$pb.TagNumber(2)
  VersionedModuleSource_ModuleSourceV1 get v1 => $_getN(1);
  @$pb.TagNumber(2)
  set v1(VersionedModuleSource_ModuleSourceV1 v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasV1() => $_has(1);
  @$pb.TagNumber(2)
  void clearV1() => clearField(2);
  @$pb.TagNumber(2)
  VersionedModuleSource_ModuleSourceV1 ensureV1() => $_ensure(1);
}

/// Unix timestamp in milliseconds.
class Timestamp extends $pb.GeneratedMessage {
  factory Timestamp({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Timestamp._() : super();
  factory Timestamp.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Timestamp.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Timestamp', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Timestamp clone() => Timestamp()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Timestamp copyWith(void Function(Timestamp) updates) => super.copyWith((message) => updates(message as Timestamp)) as Timestamp;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Timestamp create() => Timestamp._();
  Timestamp createEmptyInstance() => create();
  static $pb.PbList<Timestamp> createRepeated() => $pb.PbList<Timestamp>();
  @$core.pragma('dart2js:noInline')
  static Timestamp getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Timestamp>(create);
  static Timestamp? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// An individual release of a locked balance.
class Release extends $pb.GeneratedMessage {
  factory Release({
    Timestamp? timestamp,
    Amount? amount,
    $core.Iterable<TransactionHash>? transactions,
  }) {
    final $result = create();
    if (timestamp != null) {
      $result.timestamp = timestamp;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (transactions != null) {
      $result.transactions.addAll(transactions);
    }
    return $result;
  }
  Release._() : super();
  factory Release.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Release.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Release', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Timestamp>(1, _omitFieldNames ? '' : 'timestamp', subBuilder: Timestamp.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..pc<TransactionHash>(3, _omitFieldNames ? '' : 'transactions', $pb.PbFieldType.PM, subBuilder: TransactionHash.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Release clone() => Release()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Release copyWith(void Function(Release) updates) => super.copyWith((message) => updates(message as Release)) as Release;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Release create() => Release._();
  Release createEmptyInstance() => create();
  static $pb.PbList<Release> createRepeated() => $pb.PbList<Release>();
  @$core.pragma('dart2js:noInline')
  static Release getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Release>(create);
  static Release? _defaultInstance;

  /// Effective time of the release in milliseconds since unix epoch.
  @$pb.TagNumber(1)
  Timestamp get timestamp => $_getN(0);
  @$pb.TagNumber(1)
  set timestamp(Timestamp v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTimestamp() => $_has(0);
  @$pb.TagNumber(1)
  void clearTimestamp() => clearField(1);
  @$pb.TagNumber(1)
  Timestamp ensureTimestamp() => $_ensure(0);

  /// Amount to be released.
  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);

  /// List of transaction hashes that contribute a balance to this release.
  @$pb.TagNumber(3)
  $core.List<TransactionHash> get transactions => $_getList(2);
}

/// A new individual release. Part of a single transfer with schedule transaction.
class NewRelease extends $pb.GeneratedMessage {
  factory NewRelease({
    Timestamp? timestamp,
    Amount? amount,
  }) {
    final $result = create();
    if (timestamp != null) {
      $result.timestamp = timestamp;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    return $result;
  }
  NewRelease._() : super();
  factory NewRelease.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NewRelease.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NewRelease', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Timestamp>(1, _omitFieldNames ? '' : 'timestamp', subBuilder: Timestamp.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NewRelease clone() => NewRelease()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NewRelease copyWith(void Function(NewRelease) updates) => super.copyWith((message) => updates(message as NewRelease)) as NewRelease;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NewRelease create() => NewRelease._();
  NewRelease createEmptyInstance() => create();
  static $pb.PbList<NewRelease> createRepeated() => $pb.PbList<NewRelease>();
  @$core.pragma('dart2js:noInline')
  static NewRelease getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NewRelease>(create);
  static NewRelease? _defaultInstance;

  /// Effective time of the release in milliseconds since unix epoch.
  @$pb.TagNumber(1)
  Timestamp get timestamp => $_getN(0);
  @$pb.TagNumber(1)
  set timestamp(Timestamp v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTimestamp() => $_has(0);
  @$pb.TagNumber(1)
  void clearTimestamp() => clearField(1);
  @$pb.TagNumber(1)
  Timestamp ensureTimestamp() => $_ensure(0);

  /// Amount to be released.
  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);
}

/// State of the account's release schedule. This is the balance of the account
/// that is owned by the account, but cannot be used until the release point.
class ReleaseSchedule extends $pb.GeneratedMessage {
  factory ReleaseSchedule({
    Amount? total,
    $core.Iterable<Release>? schedules,
  }) {
    final $result = create();
    if (total != null) {
      $result.total = total;
    }
    if (schedules != null) {
      $result.schedules.addAll(schedules);
    }
    return $result;
  }
  ReleaseSchedule._() : super();
  factory ReleaseSchedule.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ReleaseSchedule.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ReleaseSchedule', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'total', subBuilder: Amount.create)
    ..pc<Release>(2, _omitFieldNames ? '' : 'schedules', $pb.PbFieldType.PM, subBuilder: Release.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ReleaseSchedule clone() => ReleaseSchedule()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ReleaseSchedule copyWith(void Function(ReleaseSchedule) updates) => super.copyWith((message) => updates(message as ReleaseSchedule)) as ReleaseSchedule;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ReleaseSchedule create() => ReleaseSchedule._();
  ReleaseSchedule createEmptyInstance() => create();
  static $pb.PbList<ReleaseSchedule> createRepeated() => $pb.PbList<ReleaseSchedule>();
  @$core.pragma('dart2js:noInline')
  static ReleaseSchedule getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ReleaseSchedule>(create);
  static ReleaseSchedule? _defaultInstance;

  /// Total amount locked in the release schedule.
  @$pb.TagNumber(1)
  Amount get total => $_getN(0);
  @$pb.TagNumber(1)
  set total(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTotal() => $_has(0);
  @$pb.TagNumber(1)
  void clearTotal() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureTotal() => $_ensure(0);

  /// A list of releases, ordered by increasing timestamp.
  @$pb.TagNumber(2)
  $core.List<Release> get schedules => $_getList(1);
}

/// An encrypted amount, in two chunks in "little endian limbs". That is, the
/// first chunk represents the low 32 bits of an amount, and the second chunk
/// represents the high 32 bits. The chunks are serialized in order and
/// represented as a byte array.
/// Always 192 bytes.
class EncryptedAmount extends $pb.GeneratedMessage {
  factory EncryptedAmount({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  EncryptedAmount._() : super();
  factory EncryptedAmount.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EncryptedAmount.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EncryptedAmount', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EncryptedAmount clone() => EncryptedAmount()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EncryptedAmount copyWith(void Function(EncryptedAmount) updates) => super.copyWith((message) => updates(message as EncryptedAmount)) as EncryptedAmount;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EncryptedAmount create() => EncryptedAmount._();
  EncryptedAmount createEmptyInstance() => create();
  static $pb.PbList<EncryptedAmount> createRepeated() => $pb.PbList<EncryptedAmount>();
  @$core.pragma('dart2js:noInline')
  static EncryptedAmount getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EncryptedAmount>(create);
  static EncryptedAmount? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

class EncryptedBalance extends $pb.GeneratedMessage {
  factory EncryptedBalance({
    EncryptedAmount? selfAmount,
    $fixnum.Int64? startIndex,
    EncryptedAmount? aggregatedAmount,
    $core.int? numAggregated,
    $core.Iterable<EncryptedAmount>? incomingAmounts,
  }) {
    final $result = create();
    if (selfAmount != null) {
      $result.selfAmount = selfAmount;
    }
    if (startIndex != null) {
      $result.startIndex = startIndex;
    }
    if (aggregatedAmount != null) {
      $result.aggregatedAmount = aggregatedAmount;
    }
    if (numAggregated != null) {
      $result.numAggregated = numAggregated;
    }
    if (incomingAmounts != null) {
      $result.incomingAmounts.addAll(incomingAmounts);
    }
    return $result;
  }
  EncryptedBalance._() : super();
  factory EncryptedBalance.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EncryptedBalance.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EncryptedBalance', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<EncryptedAmount>(1, _omitFieldNames ? '' : 'selfAmount', subBuilder: EncryptedAmount.create)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'startIndex', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..aOM<EncryptedAmount>(3, _omitFieldNames ? '' : 'aggregatedAmount', subBuilder: EncryptedAmount.create)
    ..a<$core.int>(4, _omitFieldNames ? '' : 'numAggregated', $pb.PbFieldType.OU3)
    ..pc<EncryptedAmount>(5, _omitFieldNames ? '' : 'incomingAmounts', $pb.PbFieldType.PM, subBuilder: EncryptedAmount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EncryptedBalance clone() => EncryptedBalance()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EncryptedBalance copyWith(void Function(EncryptedBalance) updates) => super.copyWith((message) => updates(message as EncryptedBalance)) as EncryptedBalance;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EncryptedBalance create() => EncryptedBalance._();
  EncryptedBalance createEmptyInstance() => create();
  static $pb.PbList<EncryptedBalance> createRepeated() => $pb.PbList<EncryptedBalance>();
  @$core.pragma('dart2js:noInline')
  static EncryptedBalance getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EncryptedBalance>(create);
  static EncryptedBalance? _defaultInstance;

  ///  Encrypted amount that is a result of this account's actions.
  ///  In particular this list includes the aggregate of
  ///
  ///  - remaining amounts that result when transferring to public balance
  ///  - remaining amounts when transferring to another account
  ///  - encrypted amounts that are transferred from public balance
  ///
  ///  When a transfer is made all of these must always be used.
  @$pb.TagNumber(1)
  EncryptedAmount get selfAmount => $_getN(0);
  @$pb.TagNumber(1)
  set selfAmount(EncryptedAmount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSelfAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearSelfAmount() => clearField(1);
  @$pb.TagNumber(1)
  EncryptedAmount ensureSelfAmount() => $_ensure(0);

  /// Starting index for incoming encrypted amounts. If an aggregated amount
  /// is present then this index is associated with such an amount and the
  /// list of incoming encrypted amounts starts at the index `start_index
  /// + 1`.
  @$pb.TagNumber(2)
  $fixnum.Int64 get startIndex => $_getI64(1);
  @$pb.TagNumber(2)
  set startIndex($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasStartIndex() => $_has(1);
  @$pb.TagNumber(2)
  void clearStartIndex() => clearField(2);

  /// If present, the amount that has resulted from aggregating other amounts
  /// If this field is present so is `num_aggregated`.
  @$pb.TagNumber(3)
  EncryptedAmount get aggregatedAmount => $_getN(2);
  @$pb.TagNumber(3)
  set aggregatedAmount(EncryptedAmount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAggregatedAmount() => $_has(2);
  @$pb.TagNumber(3)
  void clearAggregatedAmount() => clearField(3);
  @$pb.TagNumber(3)
  EncryptedAmount ensureAggregatedAmount() => $_ensure(2);

  /// The number of aggregated amounts (must be at least 2 if present). This
  /// field is present if and only if `aggregated_amount` is present.
  @$pb.TagNumber(4)
  $core.int get numAggregated => $_getIZ(3);
  @$pb.TagNumber(4)
  set numAggregated($core.int v) { $_setUnsignedInt32(3, v); }
  @$pb.TagNumber(4)
  $core.bool hasNumAggregated() => $_has(3);
  @$pb.TagNumber(4)
  void clearNumAggregated() => clearField(4);

  /// Amounts starting at `start_index` (or at `start_index + 1` if there is
  /// an aggregated amount present). They are assumed to be numbered
  /// sequentially. The length of this list is bounded by the maximum number
  /// of incoming amounts on the accounts, which is currently 32. After
  /// that aggregation kicks in.
  @$pb.TagNumber(5)
  $core.List<EncryptedAmount> get incomingAmounts => $_getList(4);
}

enum DelegationTarget_Target {
  passive, 
  baker, 
  notSet
}

/// Entity to which the account delegates a portion of its stake.
class DelegationTarget extends $pb.GeneratedMessage {
  factory DelegationTarget({
    Empty? passive,
    BakerId? baker,
  }) {
    final $result = create();
    if (passive != null) {
      $result.passive = passive;
    }
    if (baker != null) {
      $result.baker = baker;
    }
    return $result;
  }
  DelegationTarget._() : super();
  factory DelegationTarget.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegationTarget.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DelegationTarget_Target> _DelegationTarget_TargetByTag = {
    1 : DelegationTarget_Target.passive,
    2 : DelegationTarget_Target.baker,
    0 : DelegationTarget_Target.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegationTarget', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<Empty>(1, _omitFieldNames ? '' : 'passive', subBuilder: Empty.create)
    ..aOM<BakerId>(2, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegationTarget clone() => DelegationTarget()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegationTarget copyWith(void Function(DelegationTarget) updates) => super.copyWith((message) => updates(message as DelegationTarget)) as DelegationTarget;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegationTarget create() => DelegationTarget._();
  DelegationTarget createEmptyInstance() => create();
  static $pb.PbList<DelegationTarget> createRepeated() => $pb.PbList<DelegationTarget>();
  @$core.pragma('dart2js:noInline')
  static DelegationTarget getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegationTarget>(create);
  static DelegationTarget? _defaultInstance;

  DelegationTarget_Target whichTarget() => _DelegationTarget_TargetByTag[$_whichOneof(0)]!;
  void clearTarget() => clearField($_whichOneof(0));

  /// Delegate passively, i.e., to no specific baker.
  @$pb.TagNumber(1)
  Empty get passive => $_getN(0);
  @$pb.TagNumber(1)
  set passive(Empty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasPassive() => $_has(0);
  @$pb.TagNumber(1)
  void clearPassive() => clearField(1);
  @$pb.TagNumber(1)
  Empty ensurePassive() => $_ensure(0);

  /// Delegate to a specific baker.
  @$pb.TagNumber(2)
  BakerId get baker => $_getN(1);
  @$pb.TagNumber(2)
  set baker(BakerId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBaker() => $_has(1);
  @$pb.TagNumber(2)
  void clearBaker() => clearField(2);
  @$pb.TagNumber(2)
  BakerId ensureBaker() => $_ensure(1);
}

/// Baker's public key used to check whether they won the lottery or not.
class BakerElectionVerifyKey extends $pb.GeneratedMessage {
  factory BakerElectionVerifyKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  BakerElectionVerifyKey._() : super();
  factory BakerElectionVerifyKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerElectionVerifyKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerElectionVerifyKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerElectionVerifyKey clone() => BakerElectionVerifyKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerElectionVerifyKey copyWith(void Function(BakerElectionVerifyKey) updates) => super.copyWith((message) => updates(message as BakerElectionVerifyKey)) as BakerElectionVerifyKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerElectionVerifyKey create() => BakerElectionVerifyKey._();
  BakerElectionVerifyKey createEmptyInstance() => create();
  static $pb.PbList<BakerElectionVerifyKey> createRepeated() => $pb.PbList<BakerElectionVerifyKey>();
  @$core.pragma('dart2js:noInline')
  static BakerElectionVerifyKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerElectionVerifyKey>(create);
  static BakerElectionVerifyKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Baker's public key used to check that they are indeed the ones who
/// produced the block.
class BakerSignatureVerifyKey extends $pb.GeneratedMessage {
  factory BakerSignatureVerifyKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  BakerSignatureVerifyKey._() : super();
  factory BakerSignatureVerifyKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerSignatureVerifyKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerSignatureVerifyKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerSignatureVerifyKey clone() => BakerSignatureVerifyKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerSignatureVerifyKey copyWith(void Function(BakerSignatureVerifyKey) updates) => super.copyWith((message) => updates(message as BakerSignatureVerifyKey)) as BakerSignatureVerifyKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerSignatureVerifyKey create() => BakerSignatureVerifyKey._();
  BakerSignatureVerifyKey createEmptyInstance() => create();
  static $pb.PbList<BakerSignatureVerifyKey> createRepeated() => $pb.PbList<BakerSignatureVerifyKey>();
  @$core.pragma('dart2js:noInline')
  static BakerSignatureVerifyKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerSignatureVerifyKey>(create);
  static BakerSignatureVerifyKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Baker's public key used to check signatures on finalization records.
/// This is only used if the baker has sufficient stake to participate in
/// finalization.
class BakerAggregationVerifyKey extends $pb.GeneratedMessage {
  factory BakerAggregationVerifyKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  BakerAggregationVerifyKey._() : super();
  factory BakerAggregationVerifyKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerAggregationVerifyKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerAggregationVerifyKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerAggregationVerifyKey clone() => BakerAggregationVerifyKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerAggregationVerifyKey copyWith(void Function(BakerAggregationVerifyKey) updates) => super.copyWith((message) => updates(message as BakerAggregationVerifyKey)) as BakerAggregationVerifyKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerAggregationVerifyKey create() => BakerAggregationVerifyKey._();
  BakerAggregationVerifyKey createEmptyInstance() => create();
  static $pb.PbList<BakerAggregationVerifyKey> createRepeated() => $pb.PbList<BakerAggregationVerifyKey>();
  @$core.pragma('dart2js:noInline')
  static BakerAggregationVerifyKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerAggregationVerifyKey>(create);
  static BakerAggregationVerifyKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Information about a baker.
class BakerInfo extends $pb.GeneratedMessage {
  factory BakerInfo({
    BakerId? bakerId,
    BakerElectionVerifyKey? electionKey,
    BakerSignatureVerifyKey? signatureKey,
    BakerAggregationVerifyKey? aggregationKey,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (electionKey != null) {
      $result.electionKey = electionKey;
    }
    if (signatureKey != null) {
      $result.signatureKey = signatureKey;
    }
    if (aggregationKey != null) {
      $result.aggregationKey = aggregationKey;
    }
    return $result;
  }
  BakerInfo._() : super();
  factory BakerInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<BakerElectionVerifyKey>(2, _omitFieldNames ? '' : 'electionKey', subBuilder: BakerElectionVerifyKey.create)
    ..aOM<BakerSignatureVerifyKey>(3, _omitFieldNames ? '' : 'signatureKey', subBuilder: BakerSignatureVerifyKey.create)
    ..aOM<BakerAggregationVerifyKey>(4, _omitFieldNames ? '' : 'aggregationKey', subBuilder: BakerAggregationVerifyKey.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerInfo clone() => BakerInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerInfo copyWith(void Function(BakerInfo) updates) => super.copyWith((message) => updates(message as BakerInfo)) as BakerInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerInfo create() => BakerInfo._();
  BakerInfo createEmptyInstance() => create();
  static $pb.PbList<BakerInfo> createRepeated() => $pb.PbList<BakerInfo>();
  @$core.pragma('dart2js:noInline')
  static BakerInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerInfo>(create);
  static BakerInfo? _defaultInstance;

  /// Identity of the baker. This is actually the account index of
  /// the account controlling the baker.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// Baker's public key used to check whether they won the lottery or not.
  @$pb.TagNumber(2)
  BakerElectionVerifyKey get electionKey => $_getN(1);
  @$pb.TagNumber(2)
  set electionKey(BakerElectionVerifyKey v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasElectionKey() => $_has(1);
  @$pb.TagNumber(2)
  void clearElectionKey() => clearField(2);
  @$pb.TagNumber(2)
  BakerElectionVerifyKey ensureElectionKey() => $_ensure(1);

  /// Baker's public key used to check that they are indeed the ones who
  /// produced the block.
  @$pb.TagNumber(3)
  BakerSignatureVerifyKey get signatureKey => $_getN(2);
  @$pb.TagNumber(3)
  set signatureKey(BakerSignatureVerifyKey v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasSignatureKey() => $_has(2);
  @$pb.TagNumber(3)
  void clearSignatureKey() => clearField(3);
  @$pb.TagNumber(3)
  BakerSignatureVerifyKey ensureSignatureKey() => $_ensure(2);

  /// Baker's public key used to check signatures on finalization records.
  /// This is only used if the baker has sufficient stake to participate in
  /// finalization.
  @$pb.TagNumber(4)
  BakerAggregationVerifyKey get aggregationKey => $_getN(3);
  @$pb.TagNumber(4)
  set aggregationKey(BakerAggregationVerifyKey v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasAggregationKey() => $_has(3);
  @$pb.TagNumber(4)
  void clearAggregationKey() => clearField(4);
  @$pb.TagNumber(4)
  BakerAggregationVerifyKey ensureAggregationKey() => $_ensure(3);
}

class StakePendingChange_Reduce extends $pb.GeneratedMessage {
  factory StakePendingChange_Reduce({
    Amount? newStake,
    Timestamp? effectiveTime,
  }) {
    final $result = create();
    if (newStake != null) {
      $result.newStake = newStake;
    }
    if (effectiveTime != null) {
      $result.effectiveTime = effectiveTime;
    }
    return $result;
  }
  StakePendingChange_Reduce._() : super();
  factory StakePendingChange_Reduce.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory StakePendingChange_Reduce.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'StakePendingChange.Reduce', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'newStake', subBuilder: Amount.create)
    ..aOM<Timestamp>(2, _omitFieldNames ? '' : 'effectiveTime', subBuilder: Timestamp.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  StakePendingChange_Reduce clone() => StakePendingChange_Reduce()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  StakePendingChange_Reduce copyWith(void Function(StakePendingChange_Reduce) updates) => super.copyWith((message) => updates(message as StakePendingChange_Reduce)) as StakePendingChange_Reduce;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static StakePendingChange_Reduce create() => StakePendingChange_Reduce._();
  StakePendingChange_Reduce createEmptyInstance() => create();
  static $pb.PbList<StakePendingChange_Reduce> createRepeated() => $pb.PbList<StakePendingChange_Reduce>();
  @$core.pragma('dart2js:noInline')
  static StakePendingChange_Reduce getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<StakePendingChange_Reduce>(create);
  static StakePendingChange_Reduce? _defaultInstance;

  @$pb.TagNumber(1)
  Amount get newStake => $_getN(0);
  @$pb.TagNumber(1)
  set newStake(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasNewStake() => $_has(0);
  @$pb.TagNumber(1)
  void clearNewStake() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureNewStake() => $_ensure(0);

  /// Unix timestamp in milliseconds when the change takes effect.
  @$pb.TagNumber(2)
  Timestamp get effectiveTime => $_getN(1);
  @$pb.TagNumber(2)
  set effectiveTime(Timestamp v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEffectiveTime() => $_has(1);
  @$pb.TagNumber(2)
  void clearEffectiveTime() => clearField(2);
  @$pb.TagNumber(2)
  Timestamp ensureEffectiveTime() => $_ensure(1);
}

enum StakePendingChange_Change {
  reduce, 
  remove, 
  notSet
}

/// Pending change to the stake either of a baker or delegator.
class StakePendingChange extends $pb.GeneratedMessage {
  factory StakePendingChange({
    StakePendingChange_Reduce? reduce,
    Timestamp? remove,
  }) {
    final $result = create();
    if (reduce != null) {
      $result.reduce = reduce;
    }
    if (remove != null) {
      $result.remove = remove;
    }
    return $result;
  }
  StakePendingChange._() : super();
  factory StakePendingChange.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory StakePendingChange.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, StakePendingChange_Change> _StakePendingChange_ChangeByTag = {
    1 : StakePendingChange_Change.reduce,
    2 : StakePendingChange_Change.remove,
    0 : StakePendingChange_Change.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'StakePendingChange', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<StakePendingChange_Reduce>(1, _omitFieldNames ? '' : 'reduce', subBuilder: StakePendingChange_Reduce.create)
    ..aOM<Timestamp>(2, _omitFieldNames ? '' : 'remove', subBuilder: Timestamp.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  StakePendingChange clone() => StakePendingChange()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  StakePendingChange copyWith(void Function(StakePendingChange) updates) => super.copyWith((message) => updates(message as StakePendingChange)) as StakePendingChange;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static StakePendingChange create() => StakePendingChange._();
  StakePendingChange createEmptyInstance() => create();
  static $pb.PbList<StakePendingChange> createRepeated() => $pb.PbList<StakePendingChange>();
  @$core.pragma('dart2js:noInline')
  static StakePendingChange getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<StakePendingChange>(create);
  static StakePendingChange? _defaultInstance;

  StakePendingChange_Change whichChange() => _StakePendingChange_ChangeByTag[$_whichOneof(0)]!;
  void clearChange() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  StakePendingChange_Reduce get reduce => $_getN(0);
  @$pb.TagNumber(1)
  set reduce(StakePendingChange_Reduce v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasReduce() => $_has(0);
  @$pb.TagNumber(1)
  void clearReduce() => clearField(1);
  @$pb.TagNumber(1)
  StakePendingChange_Reduce ensureReduce() => $_ensure(0);

  /// Remove the stake. The value is a Unix timestamp of the effective time in
  /// milliseconds.
  @$pb.TagNumber(2)
  Timestamp get remove => $_getN(1);
  @$pb.TagNumber(2)
  set remove(Timestamp v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRemove() => $_has(1);
  @$pb.TagNumber(2)
  void clearRemove() => clearField(2);
  @$pb.TagNumber(2)
  Timestamp ensureRemove() => $_ensure(1);
}

/// A fraction of an amount with a precision of `1/100_000`.
class AmountFraction extends $pb.GeneratedMessage {
  factory AmountFraction({
    $core.int? partsPerHundredThousand,
  }) {
    final $result = create();
    if (partsPerHundredThousand != null) {
      $result.partsPerHundredThousand = partsPerHundredThousand;
    }
    return $result;
  }
  AmountFraction._() : super();
  factory AmountFraction.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AmountFraction.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AmountFraction', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'partsPerHundredThousand', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AmountFraction clone() => AmountFraction()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AmountFraction copyWith(void Function(AmountFraction) updates) => super.copyWith((message) => updates(message as AmountFraction)) as AmountFraction;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AmountFraction create() => AmountFraction._();
  AmountFraction createEmptyInstance() => create();
  static $pb.PbList<AmountFraction> createRepeated() => $pb.PbList<AmountFraction>();
  @$core.pragma('dart2js:noInline')
  static AmountFraction getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AmountFraction>(create);
  static AmountFraction? _defaultInstance;

  /// Must not exceed 100000.
  @$pb.TagNumber(1)
  $core.int get partsPerHundredThousand => $_getIZ(0);
  @$pb.TagNumber(1)
  set partsPerHundredThousand($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasPartsPerHundredThousand() => $_has(0);
  @$pb.TagNumber(1)
  void clearPartsPerHundredThousand() => clearField(1);
}

/// Distribution of the rewards for the particular pool.
class CommissionRates extends $pb.GeneratedMessage {
  factory CommissionRates({
    AmountFraction? finalization,
    AmountFraction? baking,
    AmountFraction? transaction,
  }) {
    final $result = create();
    if (finalization != null) {
      $result.finalization = finalization;
    }
    if (baking != null) {
      $result.baking = baking;
    }
    if (transaction != null) {
      $result.transaction = transaction;
    }
    return $result;
  }
  CommissionRates._() : super();
  factory CommissionRates.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CommissionRates.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CommissionRates', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'finalization', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'baking', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(3, _omitFieldNames ? '' : 'transaction', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CommissionRates clone() => CommissionRates()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CommissionRates copyWith(void Function(CommissionRates) updates) => super.copyWith((message) => updates(message as CommissionRates)) as CommissionRates;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CommissionRates create() => CommissionRates._();
  CommissionRates createEmptyInstance() => create();
  static $pb.PbList<CommissionRates> createRepeated() => $pb.PbList<CommissionRates>();
  @$core.pragma('dart2js:noInline')
  static CommissionRates getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CommissionRates>(create);
  static CommissionRates? _defaultInstance;

  /// Fraction of finalization rewards charged by the pool owner.
  @$pb.TagNumber(1)
  AmountFraction get finalization => $_getN(0);
  @$pb.TagNumber(1)
  set finalization(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasFinalization() => $_has(0);
  @$pb.TagNumber(1)
  void clearFinalization() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureFinalization() => $_ensure(0);

  /// Fraction of baking rewards charged by the pool owner.
  @$pb.TagNumber(2)
  AmountFraction get baking => $_getN(1);
  @$pb.TagNumber(2)
  set baking(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBaking() => $_has(1);
  @$pb.TagNumber(2)
  void clearBaking() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureBaking() => $_ensure(1);

  /// Fraction of transaction rewards charged by the pool owner.
  @$pb.TagNumber(3)
  AmountFraction get transaction => $_getN(2);
  @$pb.TagNumber(3)
  set transaction(AmountFraction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasTransaction() => $_has(2);
  @$pb.TagNumber(3)
  void clearTransaction() => clearField(3);
  @$pb.TagNumber(3)
  AmountFraction ensureTransaction() => $_ensure(2);
}

/// Additional information about a baking pool.
/// This information is added with the introduction of delegation.
class BakerPoolInfo extends $pb.GeneratedMessage {
  factory BakerPoolInfo({
    OpenStatus? openStatus,
    $core.String? url,
    CommissionRates? commissionRates,
  }) {
    final $result = create();
    if (openStatus != null) {
      $result.openStatus = openStatus;
    }
    if (url != null) {
      $result.url = url;
    }
    if (commissionRates != null) {
      $result.commissionRates = commissionRates;
    }
    return $result;
  }
  BakerPoolInfo._() : super();
  factory BakerPoolInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerPoolInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerPoolInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..e<OpenStatus>(1, _omitFieldNames ? '' : 'openStatus', $pb.PbFieldType.OE, defaultOrMaker: OpenStatus.OPEN_STATUS_OPEN_FOR_ALL, valueOf: OpenStatus.valueOf, enumValues: OpenStatus.values)
    ..aOS(2, _omitFieldNames ? '' : 'url')
    ..aOM<CommissionRates>(3, _omitFieldNames ? '' : 'commissionRates', subBuilder: CommissionRates.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerPoolInfo clone() => BakerPoolInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerPoolInfo copyWith(void Function(BakerPoolInfo) updates) => super.copyWith((message) => updates(message as BakerPoolInfo)) as BakerPoolInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerPoolInfo create() => BakerPoolInfo._();
  BakerPoolInfo createEmptyInstance() => create();
  static $pb.PbList<BakerPoolInfo> createRepeated() => $pb.PbList<BakerPoolInfo>();
  @$core.pragma('dart2js:noInline')
  static BakerPoolInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerPoolInfo>(create);
  static BakerPoolInfo? _defaultInstance;

  /// Whether the pool allows delegators.
  @$pb.TagNumber(1)
  OpenStatus get openStatus => $_getN(0);
  @$pb.TagNumber(1)
  set openStatus(OpenStatus v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasOpenStatus() => $_has(0);
  @$pb.TagNumber(1)
  void clearOpenStatus() => clearField(1);

  /// The URL that links to the metadata about the pool.
  @$pb.TagNumber(2)
  $core.String get url => $_getSZ(1);
  @$pb.TagNumber(2)
  set url($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasUrl() => $_has(1);
  @$pb.TagNumber(2)
  void clearUrl() => clearField(2);

  /// The commission rates charged by the pool owner.
  @$pb.TagNumber(3)
  CommissionRates get commissionRates => $_getN(2);
  @$pb.TagNumber(3)
  set commissionRates(CommissionRates v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasCommissionRates() => $_has(2);
  @$pb.TagNumber(3)
  void clearCommissionRates() => clearField(3);
  @$pb.TagNumber(3)
  CommissionRates ensureCommissionRates() => $_ensure(2);
}

class AccountStakingInfo_Baker extends $pb.GeneratedMessage {
  factory AccountStakingInfo_Baker({
    Amount? stakedAmount,
    $core.bool? restakeEarnings,
    BakerInfo? bakerInfo,
    StakePendingChange? pendingChange,
    BakerPoolInfo? poolInfo,
  }) {
    final $result = create();
    if (stakedAmount != null) {
      $result.stakedAmount = stakedAmount;
    }
    if (restakeEarnings != null) {
      $result.restakeEarnings = restakeEarnings;
    }
    if (bakerInfo != null) {
      $result.bakerInfo = bakerInfo;
    }
    if (pendingChange != null) {
      $result.pendingChange = pendingChange;
    }
    if (poolInfo != null) {
      $result.poolInfo = poolInfo;
    }
    return $result;
  }
  AccountStakingInfo_Baker._() : super();
  factory AccountStakingInfo_Baker.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountStakingInfo_Baker.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountStakingInfo.Baker', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'stakedAmount', subBuilder: Amount.create)
    ..aOB(2, _omitFieldNames ? '' : 'restakeEarnings')
    ..aOM<BakerInfo>(3, _omitFieldNames ? '' : 'bakerInfo', subBuilder: BakerInfo.create)
    ..aOM<StakePendingChange>(4, _omitFieldNames ? '' : 'pendingChange', subBuilder: StakePendingChange.create)
    ..aOM<BakerPoolInfo>(5, _omitFieldNames ? '' : 'poolInfo', subBuilder: BakerPoolInfo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountStakingInfo_Baker clone() => AccountStakingInfo_Baker()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountStakingInfo_Baker copyWith(void Function(AccountStakingInfo_Baker) updates) => super.copyWith((message) => updates(message as AccountStakingInfo_Baker)) as AccountStakingInfo_Baker;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountStakingInfo_Baker create() => AccountStakingInfo_Baker._();
  AccountStakingInfo_Baker createEmptyInstance() => create();
  static $pb.PbList<AccountStakingInfo_Baker> createRepeated() => $pb.PbList<AccountStakingInfo_Baker>();
  @$core.pragma('dart2js:noInline')
  static AccountStakingInfo_Baker getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountStakingInfo_Baker>(create);
  static AccountStakingInfo_Baker? _defaultInstance;

  /// Amount staked at present.
  @$pb.TagNumber(1)
  Amount get stakedAmount => $_getN(0);
  @$pb.TagNumber(1)
  set stakedAmount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasStakedAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearStakedAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureStakedAmount() => $_ensure(0);

  /// A flag indicating whether rewards paid to the baker are automatically
  /// restaked or not.
  @$pb.TagNumber(2)
  $core.bool get restakeEarnings => $_getBF(1);
  @$pb.TagNumber(2)
  set restakeEarnings($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasRestakeEarnings() => $_has(1);
  @$pb.TagNumber(2)
  void clearRestakeEarnings() => clearField(2);

  /// Information about the baker that is staking.
  @$pb.TagNumber(3)
  BakerInfo get bakerInfo => $_getN(2);
  @$pb.TagNumber(3)
  set bakerInfo(BakerInfo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasBakerInfo() => $_has(2);
  @$pb.TagNumber(3)
  void clearBakerInfo() => clearField(3);
  @$pb.TagNumber(3)
  BakerInfo ensureBakerInfo() => $_ensure(2);

  /// If present, any pending change to the delegated stake.
  @$pb.TagNumber(4)
  StakePendingChange get pendingChange => $_getN(3);
  @$pb.TagNumber(4)
  set pendingChange(StakePendingChange v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasPendingChange() => $_has(3);
  @$pb.TagNumber(4)
  void clearPendingChange() => clearField(4);
  @$pb.TagNumber(4)
  StakePendingChange ensurePendingChange() => $_ensure(3);

  /// Present if the account is currently a baker, i.e., it is in the baking
  /// committee of the current epoch.
  @$pb.TagNumber(5)
  BakerPoolInfo get poolInfo => $_getN(4);
  @$pb.TagNumber(5)
  set poolInfo(BakerPoolInfo v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasPoolInfo() => $_has(4);
  @$pb.TagNumber(5)
  void clearPoolInfo() => clearField(5);
  @$pb.TagNumber(5)
  BakerPoolInfo ensurePoolInfo() => $_ensure(4);
}

class AccountStakingInfo_Delegator extends $pb.GeneratedMessage {
  factory AccountStakingInfo_Delegator({
    Amount? stakedAmount,
    $core.bool? restakeEarnings,
    DelegationTarget? target,
    StakePendingChange? pendingChange,
  }) {
    final $result = create();
    if (stakedAmount != null) {
      $result.stakedAmount = stakedAmount;
    }
    if (restakeEarnings != null) {
      $result.restakeEarnings = restakeEarnings;
    }
    if (target != null) {
      $result.target = target;
    }
    if (pendingChange != null) {
      $result.pendingChange = pendingChange;
    }
    return $result;
  }
  AccountStakingInfo_Delegator._() : super();
  factory AccountStakingInfo_Delegator.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountStakingInfo_Delegator.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountStakingInfo.Delegator', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'stakedAmount', subBuilder: Amount.create)
    ..aOB(2, _omitFieldNames ? '' : 'restakeEarnings')
    ..aOM<DelegationTarget>(3, _omitFieldNames ? '' : 'target', subBuilder: DelegationTarget.create)
    ..aOM<StakePendingChange>(4, _omitFieldNames ? '' : 'pendingChange', subBuilder: StakePendingChange.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountStakingInfo_Delegator clone() => AccountStakingInfo_Delegator()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountStakingInfo_Delegator copyWith(void Function(AccountStakingInfo_Delegator) updates) => super.copyWith((message) => updates(message as AccountStakingInfo_Delegator)) as AccountStakingInfo_Delegator;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountStakingInfo_Delegator create() => AccountStakingInfo_Delegator._();
  AccountStakingInfo_Delegator createEmptyInstance() => create();
  static $pb.PbList<AccountStakingInfo_Delegator> createRepeated() => $pb.PbList<AccountStakingInfo_Delegator>();
  @$core.pragma('dart2js:noInline')
  static AccountStakingInfo_Delegator getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountStakingInfo_Delegator>(create);
  static AccountStakingInfo_Delegator? _defaultInstance;

  /// The amount that the account delegates.
  @$pb.TagNumber(1)
  Amount get stakedAmount => $_getN(0);
  @$pb.TagNumber(1)
  set stakedAmount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasStakedAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearStakedAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureStakedAmount() => $_ensure(0);

  /// Whether the earnings are automatically added to the staked amount.
  @$pb.TagNumber(2)
  $core.bool get restakeEarnings => $_getBF(1);
  @$pb.TagNumber(2)
  set restakeEarnings($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasRestakeEarnings() => $_has(1);
  @$pb.TagNumber(2)
  void clearRestakeEarnings() => clearField(2);

  /// The entity to which the account delegates.
  @$pb.TagNumber(3)
  DelegationTarget get target => $_getN(2);
  @$pb.TagNumber(3)
  set target(DelegationTarget v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasTarget() => $_has(2);
  @$pb.TagNumber(3)
  void clearTarget() => clearField(3);
  @$pb.TagNumber(3)
  DelegationTarget ensureTarget() => $_ensure(2);

  /// If present, any pending change to the delegated stake.
  @$pb.TagNumber(4)
  StakePendingChange get pendingChange => $_getN(3);
  @$pb.TagNumber(4)
  set pendingChange(StakePendingChange v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasPendingChange() => $_has(3);
  @$pb.TagNumber(4)
  void clearPendingChange() => clearField(4);
  @$pb.TagNumber(4)
  StakePendingChange ensurePendingChange() => $_ensure(3);
}

enum AccountStakingInfo_StakingInfo {
  baker, 
  delegator, 
  notSet
}

/// Information about the account stake, if the account is either a baker or a
/// delegator.
class AccountStakingInfo extends $pb.GeneratedMessage {
  factory AccountStakingInfo({
    AccountStakingInfo_Baker? baker,
    AccountStakingInfo_Delegator? delegator,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (delegator != null) {
      $result.delegator = delegator;
    }
    return $result;
  }
  AccountStakingInfo._() : super();
  factory AccountStakingInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountStakingInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, AccountStakingInfo_StakingInfo> _AccountStakingInfo_StakingInfoByTag = {
    1 : AccountStakingInfo_StakingInfo.baker,
    2 : AccountStakingInfo_StakingInfo.delegator,
    0 : AccountStakingInfo_StakingInfo.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountStakingInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<AccountStakingInfo_Baker>(1, _omitFieldNames ? '' : 'baker', subBuilder: AccountStakingInfo_Baker.create)
    ..aOM<AccountStakingInfo_Delegator>(2, _omitFieldNames ? '' : 'delegator', subBuilder: AccountStakingInfo_Delegator.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountStakingInfo clone() => AccountStakingInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountStakingInfo copyWith(void Function(AccountStakingInfo) updates) => super.copyWith((message) => updates(message as AccountStakingInfo)) as AccountStakingInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountStakingInfo create() => AccountStakingInfo._();
  AccountStakingInfo createEmptyInstance() => create();
  static $pb.PbList<AccountStakingInfo> createRepeated() => $pb.PbList<AccountStakingInfo>();
  @$core.pragma('dart2js:noInline')
  static AccountStakingInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountStakingInfo>(create);
  static AccountStakingInfo? _defaultInstance;

  AccountStakingInfo_StakingInfo whichStakingInfo() => _AccountStakingInfo_StakingInfoByTag[$_whichOneof(0)]!;
  void clearStakingInfo() => clearField($_whichOneof(0));

  /// The account is a baker.
  @$pb.TagNumber(1)
  AccountStakingInfo_Baker get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(AccountStakingInfo_Baker v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  AccountStakingInfo_Baker ensureBaker() => $_ensure(0);

  /// The account is a delegator.
  @$pb.TagNumber(2)
  AccountStakingInfo_Delegator get delegator => $_getN(1);
  @$pb.TagNumber(2)
  set delegator(AccountStakingInfo_Delegator v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDelegator() => $_has(1);
  @$pb.TagNumber(2)
  void clearDelegator() => clearField(2);
  @$pb.TagNumber(2)
  AccountStakingInfo_Delegator ensureDelegator() => $_ensure(1);
}

/// A sequence number that determines the ordering of transactions from the
/// account. The minimum sequence number is 1.
class SequenceNumber extends $pb.GeneratedMessage {
  factory SequenceNumber({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  SequenceNumber._() : super();
  factory SequenceNumber.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory SequenceNumber.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'SequenceNumber', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  SequenceNumber clone() => SequenceNumber()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  SequenceNumber copyWith(void Function(SequenceNumber) updates) => super.copyWith((message) => updates(message as SequenceNumber)) as SequenceNumber;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static SequenceNumber create() => SequenceNumber._();
  SequenceNumber createEmptyInstance() => create();
  static $pb.PbList<SequenceNumber> createRepeated() => $pb.PbList<SequenceNumber>();
  @$core.pragma('dart2js:noInline')
  static SequenceNumber getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<SequenceNumber>(create);
  static SequenceNumber? _defaultInstance;

  /// The sequence number.
  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A sequence number that determines the ordering of update transactions.
/// Equivalent to `SequenceNumber` for account transactions.
/// Update sequence numbers are per update type and the minimum value is 1.
class UpdateSequenceNumber extends $pb.GeneratedMessage {
  factory UpdateSequenceNumber({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  UpdateSequenceNumber._() : super();
  factory UpdateSequenceNumber.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateSequenceNumber.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateSequenceNumber', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateSequenceNumber clone() => UpdateSequenceNumber()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateSequenceNumber copyWith(void Function(UpdateSequenceNumber) updates) => super.copyWith((message) => updates(message as UpdateSequenceNumber)) as UpdateSequenceNumber;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateSequenceNumber create() => UpdateSequenceNumber._();
  UpdateSequenceNumber createEmptyInstance() => create();
  static $pb.PbList<UpdateSequenceNumber> createRepeated() => $pb.PbList<UpdateSequenceNumber>();
  @$core.pragma('dart2js:noInline')
  static UpdateSequenceNumber getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateSequenceNumber>(create);
  static UpdateSequenceNumber? _defaultInstance;

  /// The sequence number.
  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// An amount of microCCD.
class Amount extends $pb.GeneratedMessage {
  factory Amount({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Amount._() : super();
  factory Amount.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Amount.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Amount', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Amount clone() => Amount()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Amount copyWith(void Function(Amount) updates) => super.copyWith((message) => updates(message as Amount)) as Amount;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Amount create() => Amount._();
  Amount createEmptyInstance() => create();
  static $pb.PbList<Amount> createRepeated() => $pb.PbList<Amount>();
  @$core.pragma('dart2js:noInline')
  static Amount getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Amount>(create);
  static Amount? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Index of a credential on an account.
class CredentialIndex extends $pb.GeneratedMessage {
  factory CredentialIndex({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  CredentialIndex._() : super();
  factory CredentialIndex.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CredentialIndex.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CredentialIndex', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CredentialIndex clone() => CredentialIndex()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CredentialIndex copyWith(void Function(CredentialIndex) updates) => super.copyWith((message) => updates(message as CredentialIndex)) as CredentialIndex;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CredentialIndex create() => CredentialIndex._();
  CredentialIndex createEmptyInstance() => create();
  static $pb.PbList<CredentialIndex> createRepeated() => $pb.PbList<CredentialIndex>();
  @$core.pragma('dart2js:noInline')
  static CredentialIndex getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CredentialIndex>(create);
  static CredentialIndex? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The number of signatures required to sign.
class SignatureThreshold extends $pb.GeneratedMessage {
  factory SignatureThreshold({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  SignatureThreshold._() : super();
  factory SignatureThreshold.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory SignatureThreshold.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'SignatureThreshold', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  SignatureThreshold clone() => SignatureThreshold()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  SignatureThreshold copyWith(void Function(SignatureThreshold) updates) => super.copyWith((message) => updates(message as SignatureThreshold)) as SignatureThreshold;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static SignatureThreshold create() => SignatureThreshold._();
  SignatureThreshold createEmptyInstance() => create();
  static $pb.PbList<SignatureThreshold> createRepeated() => $pb.PbList<SignatureThreshold>();
  @$core.pragma('dart2js:noInline')
  static SignatureThreshold getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<SignatureThreshold>(create);
  static SignatureThreshold? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The number of credentials required to sign an account transaction.
class AccountThreshold extends $pb.GeneratedMessage {
  factory AccountThreshold({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  AccountThreshold._() : super();
  factory AccountThreshold.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountThreshold.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountThreshold', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountThreshold clone() => AccountThreshold()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountThreshold copyWith(void Function(AccountThreshold) updates) => super.copyWith((message) => updates(message as AccountThreshold)) as AccountThreshold;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountThreshold create() => AccountThreshold._();
  AccountThreshold createEmptyInstance() => create();
  static $pb.PbList<AccountThreshold> createRepeated() => $pb.PbList<AccountThreshold>();
  @$core.pragma('dart2js:noInline')
  static AccountThreshold getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountThreshold>(create);
  static AccountThreshold? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// An account encryption key. Always 96 bytes.
class EncryptionKey extends $pb.GeneratedMessage {
  factory EncryptionKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  EncryptionKey._() : super();
  factory EncryptionKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EncryptionKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EncryptionKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EncryptionKey clone() => EncryptionKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EncryptionKey copyWith(void Function(EncryptionKey) updates) => super.copyWith((message) => updates(message as EncryptionKey)) as EncryptionKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EncryptionKey create() => EncryptionKey._();
  EncryptionKey createEmptyInstance() => create();
  static $pb.PbList<EncryptionKey> createRepeated() => $pb.PbList<EncryptionKey>();
  @$core.pragma('dart2js:noInline')
  static EncryptionKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EncryptionKey>(create);
  static EncryptionKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// An address of an account. Always 32 bytes.
class AccountAddress extends $pb.GeneratedMessage {
  factory AccountAddress({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  AccountAddress._() : super();
  factory AccountAddress.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountAddress.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountAddress', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountAddress clone() => AccountAddress()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountAddress copyWith(void Function(AccountAddress) updates) => super.copyWith((message) => updates(message as AccountAddress)) as AccountAddress;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountAddress create() => AccountAddress._();
  AccountAddress createEmptyInstance() => create();
  static $pb.PbList<AccountAddress> createRepeated() => $pb.PbList<AccountAddress>();
  @$core.pragma('dart2js:noInline')
  static AccountAddress getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountAddress>(create);
  static AccountAddress? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

enum Address_Type {
  account, 
  contract, 
  notSet
}

/// An address of either a contract or an account.
class Address extends $pb.GeneratedMessage {
  factory Address({
    AccountAddress? account,
    ContractAddress? contract,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (contract != null) {
      $result.contract = contract;
    }
    return $result;
  }
  Address._() : super();
  factory Address.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Address.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, Address_Type> _Address_TypeByTag = {
    1 : Address_Type.account,
    2 : Address_Type.contract,
    0 : Address_Type.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Address', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'contract', subBuilder: ContractAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Address clone() => Address()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Address copyWith(void Function(Address) updates) => super.copyWith((message) => updates(message as Address)) as Address;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Address create() => Address._();
  Address createEmptyInstance() => create();
  static $pb.PbList<Address> createRepeated() => $pb.PbList<Address>();
  @$core.pragma('dart2js:noInline')
  static Address getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Address>(create);
  static Address? _defaultInstance;

  Address_Type whichType() => _Address_TypeByTag[$_whichOneof(0)]!;
  void clearType() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  @$pb.TagNumber(2)
  ContractAddress get contract => $_getN(1);
  @$pb.TagNumber(2)
  set contract(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasContract() => $_has(1);
  @$pb.TagNumber(2)
  void clearContract() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureContract() => $_ensure(1);
}

enum AccountVerifyKey_Key {
  ed25519Key, 
  notSet
}

/// A public key used to verify transaction signatures from an account.
class AccountVerifyKey extends $pb.GeneratedMessage {
  factory AccountVerifyKey({
    $core.List<$core.int>? ed25519Key,
  }) {
    final $result = create();
    if (ed25519Key != null) {
      $result.ed25519Key = ed25519Key;
    }
    return $result;
  }
  AccountVerifyKey._() : super();
  factory AccountVerifyKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountVerifyKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, AccountVerifyKey_Key> _AccountVerifyKey_KeyByTag = {
    1 : AccountVerifyKey_Key.ed25519Key,
    0 : AccountVerifyKey_Key.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountVerifyKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1])
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'ed25519Key', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountVerifyKey clone() => AccountVerifyKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountVerifyKey copyWith(void Function(AccountVerifyKey) updates) => super.copyWith((message) => updates(message as AccountVerifyKey)) as AccountVerifyKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountVerifyKey create() => AccountVerifyKey._();
  AccountVerifyKey createEmptyInstance() => create();
  static $pb.PbList<AccountVerifyKey> createRepeated() => $pb.PbList<AccountVerifyKey>();
  @$core.pragma('dart2js:noInline')
  static AccountVerifyKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountVerifyKey>(create);
  static AccountVerifyKey? _defaultInstance;

  AccountVerifyKey_Key whichKey() => _AccountVerifyKey_KeyByTag[$_whichOneof(0)]!;
  void clearKey() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  $core.List<$core.int> get ed25519Key => $_getN(0);
  @$pb.TagNumber(1)
  set ed25519Key($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasEd25519Key() => $_has(0);
  @$pb.TagNumber(1)
  void clearEd25519Key() => clearField(1);
}

/// Public keys of a single credential.
class CredentialPublicKeys extends $pb.GeneratedMessage {
  factory CredentialPublicKeys({
    $core.Map<$core.int, AccountVerifyKey>? keys,
    SignatureThreshold? threshold,
  }) {
    final $result = create();
    if (keys != null) {
      $result.keys.addAll(keys);
    }
    if (threshold != null) {
      $result.threshold = threshold;
    }
    return $result;
  }
  CredentialPublicKeys._() : super();
  factory CredentialPublicKeys.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CredentialPublicKeys.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CredentialPublicKeys', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..m<$core.int, AccountVerifyKey>(1, _omitFieldNames ? '' : 'keys', entryClassName: 'CredentialPublicKeys.KeysEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OM, valueCreator: AccountVerifyKey.create, valueDefaultOrMaker: AccountVerifyKey.getDefault, packageName: const $pb.PackageName('concordium.v2'))
    ..aOM<SignatureThreshold>(2, _omitFieldNames ? '' : 'threshold', subBuilder: SignatureThreshold.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CredentialPublicKeys clone() => CredentialPublicKeys()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CredentialPublicKeys copyWith(void Function(CredentialPublicKeys) updates) => super.copyWith((message) => updates(message as CredentialPublicKeys)) as CredentialPublicKeys;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CredentialPublicKeys create() => CredentialPublicKeys._();
  CredentialPublicKeys createEmptyInstance() => create();
  static $pb.PbList<CredentialPublicKeys> createRepeated() => $pb.PbList<CredentialPublicKeys>();
  @$core.pragma('dart2js:noInline')
  static CredentialPublicKeys getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CredentialPublicKeys>(create);
  static CredentialPublicKeys? _defaultInstance;

  @$pb.TagNumber(1)
  $core.Map<$core.int, AccountVerifyKey> get keys => $_getMap(0);

  @$pb.TagNumber(2)
  SignatureThreshold get threshold => $_getN(1);
  @$pb.TagNumber(2)
  set threshold(SignatureThreshold v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasThreshold() => $_has(1);
  @$pb.TagNumber(2)
  void clearThreshold() => clearField(2);
  @$pb.TagNumber(2)
  SignatureThreshold ensureThreshold() => $_ensure(1);
}

/// A registration ID of a credential, derived from the secret PRF key and a
/// nonce. This is always 48 bytes long.
class CredentialRegistrationId extends $pb.GeneratedMessage {
  factory CredentialRegistrationId({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  CredentialRegistrationId._() : super();
  factory CredentialRegistrationId.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CredentialRegistrationId.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CredentialRegistrationId', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CredentialRegistrationId clone() => CredentialRegistrationId()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CredentialRegistrationId copyWith(void Function(CredentialRegistrationId) updates) => super.copyWith((message) => updates(message as CredentialRegistrationId)) as CredentialRegistrationId;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CredentialRegistrationId create() => CredentialRegistrationId._();
  CredentialRegistrationId createEmptyInstance() => create();
  static $pb.PbList<CredentialRegistrationId> createRepeated() => $pb.PbList<CredentialRegistrationId>();
  @$core.pragma('dart2js:noInline')
  static CredentialRegistrationId getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CredentialRegistrationId>(create);
  static CredentialRegistrationId? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// An index of the identity provider that identifies them uniquely in the
/// context of a specific chain.
class IdentityProviderIdentity extends $pb.GeneratedMessage {
  factory IdentityProviderIdentity({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  IdentityProviderIdentity._() : super();
  factory IdentityProviderIdentity.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory IdentityProviderIdentity.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'IdentityProviderIdentity', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  IdentityProviderIdentity clone() => IdentityProviderIdentity()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  IdentityProviderIdentity copyWith(void Function(IdentityProviderIdentity) updates) => super.copyWith((message) => updates(message as IdentityProviderIdentity)) as IdentityProviderIdentity;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static IdentityProviderIdentity create() => IdentityProviderIdentity._();
  IdentityProviderIdentity createEmptyInstance() => create();
  static $pb.PbList<IdentityProviderIdentity> createRepeated() => $pb.PbList<IdentityProviderIdentity>();
  @$core.pragma('dart2js:noInline')
  static IdentityProviderIdentity getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<IdentityProviderIdentity>(create);
  static IdentityProviderIdentity? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Representation of the pair of a year and month.
class YearMonth extends $pb.GeneratedMessage {
  factory YearMonth({
    $core.int? year,
    $core.int? month,
  }) {
    final $result = create();
    if (year != null) {
      $result.year = year;
    }
    if (month != null) {
      $result.month = month;
    }
    return $result;
  }
  YearMonth._() : super();
  factory YearMonth.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory YearMonth.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'YearMonth', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'year', $pb.PbFieldType.OU3)
    ..a<$core.int>(2, _omitFieldNames ? '' : 'month', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  YearMonth clone() => YearMonth()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  YearMonth copyWith(void Function(YearMonth) updates) => super.copyWith((message) => updates(message as YearMonth)) as YearMonth;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static YearMonth create() => YearMonth._();
  YearMonth createEmptyInstance() => create();
  static $pb.PbList<YearMonth> createRepeated() => $pb.PbList<YearMonth>();
  @$core.pragma('dart2js:noInline')
  static YearMonth getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<YearMonth>(create);
  static YearMonth? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get year => $_getIZ(0);
  @$pb.TagNumber(1)
  set year($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasYear() => $_has(0);
  @$pb.TagNumber(1)
  void clearYear() => clearField(1);

  @$pb.TagNumber(2)
  $core.int get month => $_getIZ(1);
  @$pb.TagNumber(2)
  set month($core.int v) { $_setUnsignedInt32(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasMonth() => $_has(1);
  @$pb.TagNumber(2)
  void clearMonth() => clearField(2);
}

/// Policy on a credential.
class Policy extends $pb.GeneratedMessage {
  factory Policy({
    YearMonth? createdAt,
    YearMonth? validTo,
    $core.Map<$core.int, $core.List<$core.int>>? attributes,
  }) {
    final $result = create();
    if (createdAt != null) {
      $result.createdAt = createdAt;
    }
    if (validTo != null) {
      $result.validTo = validTo;
    }
    if (attributes != null) {
      $result.attributes.addAll(attributes);
    }
    return $result;
  }
  Policy._() : super();
  factory Policy.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Policy.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Policy', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<YearMonth>(1, _omitFieldNames ? '' : 'createdAt', subBuilder: YearMonth.create)
    ..aOM<YearMonth>(2, _omitFieldNames ? '' : 'validTo', subBuilder: YearMonth.create)
    ..m<$core.int, $core.List<$core.int>>(3, _omitFieldNames ? '' : 'attributes', entryClassName: 'Policy.AttributesEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OY, packageName: const $pb.PackageName('concordium.v2'))
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Policy clone() => Policy()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Policy copyWith(void Function(Policy) updates) => super.copyWith((message) => updates(message as Policy)) as Policy;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Policy create() => Policy._();
  Policy createEmptyInstance() => create();
  static $pb.PbList<Policy> createRepeated() => $pb.PbList<Policy>();
  @$core.pragma('dart2js:noInline')
  static Policy getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Policy>(create);
  static Policy? _defaultInstance;

  /// The year and month when the identity object from which the credential is
  /// derived was created.
  @$pb.TagNumber(1)
  YearMonth get createdAt => $_getN(0);
  @$pb.TagNumber(1)
  set createdAt(YearMonth v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasCreatedAt() => $_has(0);
  @$pb.TagNumber(1)
  void clearCreatedAt() => clearField(1);
  @$pb.TagNumber(1)
  YearMonth ensureCreatedAt() => $_ensure(0);

  /// The last year and month when the credential is still valid. After this
  /// expires an account can no longer be created from the credential.
  @$pb.TagNumber(2)
  YearMonth get validTo => $_getN(1);
  @$pb.TagNumber(2)
  set validTo(YearMonth v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasValidTo() => $_has(1);
  @$pb.TagNumber(2)
  void clearValidTo() => clearField(2);
  @$pb.TagNumber(2)
  YearMonth ensureValidTo() => $_ensure(1);

  /// Mapping from attribute tags to attribute values. Attribute tags are always
  /// representable in a single `u8`, attribute values are never more than 31
  /// bytes in length.
  @$pb.TagNumber(3)
  $core.Map<$core.int, $core.List<$core.int>> get attributes => $_getMap(2);
}

/// Values contained in an initial credential.
class InitialCredentialValues extends $pb.GeneratedMessage {
  factory InitialCredentialValues({
    CredentialPublicKeys? keys,
    CredentialRegistrationId? credId,
    IdentityProviderIdentity? ipId,
    Policy? policy,
  }) {
    final $result = create();
    if (keys != null) {
      $result.keys = keys;
    }
    if (credId != null) {
      $result.credId = credId;
    }
    if (ipId != null) {
      $result.ipId = ipId;
    }
    if (policy != null) {
      $result.policy = policy;
    }
    return $result;
  }
  InitialCredentialValues._() : super();
  factory InitialCredentialValues.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InitialCredentialValues.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InitialCredentialValues', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<CredentialPublicKeys>(1, _omitFieldNames ? '' : 'keys', subBuilder: CredentialPublicKeys.create)
    ..aOM<CredentialRegistrationId>(2, _omitFieldNames ? '' : 'credId', subBuilder: CredentialRegistrationId.create)
    ..aOM<IdentityProviderIdentity>(3, _omitFieldNames ? '' : 'ipId', subBuilder: IdentityProviderIdentity.create)
    ..aOM<Policy>(4, _omitFieldNames ? '' : 'policy', subBuilder: Policy.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InitialCredentialValues clone() => InitialCredentialValues()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InitialCredentialValues copyWith(void Function(InitialCredentialValues) updates) => super.copyWith((message) => updates(message as InitialCredentialValues)) as InitialCredentialValues;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InitialCredentialValues create() => InitialCredentialValues._();
  InitialCredentialValues createEmptyInstance() => create();
  static $pb.PbList<InitialCredentialValues> createRepeated() => $pb.PbList<InitialCredentialValues>();
  @$core.pragma('dart2js:noInline')
  static InitialCredentialValues getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InitialCredentialValues>(create);
  static InitialCredentialValues? _defaultInstance;

  /// Public keys of the credential.
  @$pb.TagNumber(1)
  CredentialPublicKeys get keys => $_getN(0);
  @$pb.TagNumber(1)
  set keys(CredentialPublicKeys v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasKeys() => $_has(0);
  @$pb.TagNumber(1)
  void clearKeys() => clearField(1);
  @$pb.TagNumber(1)
  CredentialPublicKeys ensureKeys() => $_ensure(0);

  /// Its registration ID.
  @$pb.TagNumber(2)
  CredentialRegistrationId get credId => $_getN(1);
  @$pb.TagNumber(2)
  set credId(CredentialRegistrationId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCredId() => $_has(1);
  @$pb.TagNumber(2)
  void clearCredId() => clearField(2);
  @$pb.TagNumber(2)
  CredentialRegistrationId ensureCredId() => $_ensure(1);

  /// The identity provider who signed the identity object from which this
  /// credential is derived.
  @$pb.TagNumber(3)
  IdentityProviderIdentity get ipId => $_getN(2);
  @$pb.TagNumber(3)
  set ipId(IdentityProviderIdentity v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasIpId() => $_has(2);
  @$pb.TagNumber(3)
  void clearIpId() => clearField(3);
  @$pb.TagNumber(3)
  IdentityProviderIdentity ensureIpId() => $_ensure(2);

  /// Policy of this credential.
  @$pb.TagNumber(4)
  Policy get policy => $_getN(3);
  @$pb.TagNumber(4)
  set policy(Policy v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasPolicy() => $_has(3);
  @$pb.TagNumber(4)
  void clearPolicy() => clearField(4);
  @$pb.TagNumber(4)
  Policy ensurePolicy() => $_ensure(3);
}

/// Data relating to a single anonymity revoker sent by the account holder to
/// the chain.
class ChainArData extends $pb.GeneratedMessage {
  factory ChainArData({
    $core.List<$core.int>? encIdCredPubShare,
  }) {
    final $result = create();
    if (encIdCredPubShare != null) {
      $result.encIdCredPubShare = encIdCredPubShare;
    }
    return $result;
  }
  ChainArData._() : super();
  factory ChainArData.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ChainArData.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ChainArData', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'encIdCredPubShare', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ChainArData clone() => ChainArData()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ChainArData copyWith(void Function(ChainArData) updates) => super.copyWith((message) => updates(message as ChainArData)) as ChainArData;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ChainArData create() => ChainArData._();
  ChainArData createEmptyInstance() => create();
  static $pb.PbList<ChainArData> createRepeated() => $pb.PbList<ChainArData>();
  @$core.pragma('dart2js:noInline')
  static ChainArData getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ChainArData>(create);
  static ChainArData? _defaultInstance;

  /// Share of the encryption of IdCredPub.
  @$pb.TagNumber(1)
  $core.List<$core.int> get encIdCredPubShare => $_getN(0);
  @$pb.TagNumber(1)
  set encIdCredPubShare($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasEncIdCredPubShare() => $_has(0);
  @$pb.TagNumber(1)
  void clearEncIdCredPubShare() => clearField(1);
}

/// The number of anonymity revokers needed to revoke anonymity of a credential
/// holder.
class ArThreshold extends $pb.GeneratedMessage {
  factory ArThreshold({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ArThreshold._() : super();
  factory ArThreshold.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ArThreshold.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ArThreshold', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ArThreshold clone() => ArThreshold()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ArThreshold copyWith(void Function(ArThreshold) updates) => super.copyWith((message) => updates(message as ArThreshold)) as ArThreshold;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ArThreshold create() => ArThreshold._();
  ArThreshold createEmptyInstance() => create();
  static $pb.PbList<ArThreshold> createRepeated() => $pb.PbList<ArThreshold>();
  @$core.pragma('dart2js:noInline')
  static ArThreshold getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ArThreshold>(create);
  static ArThreshold? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A single commitment in the G1 group of the BLS curve. This is always 48 bytes
/// in length.
class Commitment extends $pb.GeneratedMessage {
  factory Commitment({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Commitment._() : super();
  factory Commitment.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Commitment.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Commitment', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Commitment clone() => Commitment()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Commitment copyWith(void Function(Commitment) updates) => super.copyWith((message) => updates(message as Commitment)) as Commitment;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Commitment create() => Commitment._();
  Commitment createEmptyInstance() => create();
  static $pb.PbList<Commitment> createRepeated() => $pb.PbList<Commitment>();
  @$core.pragma('dart2js:noInline')
  static Commitment getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Commitment>(create);
  static Commitment? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Commitments that are part of a normal credential.
class CredentialCommitments extends $pb.GeneratedMessage {
  factory CredentialCommitments({
    Commitment? prf,
    Commitment? credCounter,
    Commitment? maxAccounts,
    $core.Map<$core.int, Commitment>? attributes,
    $core.Iterable<Commitment>? idCredSecSharingCoeff,
  }) {
    final $result = create();
    if (prf != null) {
      $result.prf = prf;
    }
    if (credCounter != null) {
      $result.credCounter = credCounter;
    }
    if (maxAccounts != null) {
      $result.maxAccounts = maxAccounts;
    }
    if (attributes != null) {
      $result.attributes.addAll(attributes);
    }
    if (idCredSecSharingCoeff != null) {
      $result.idCredSecSharingCoeff.addAll(idCredSecSharingCoeff);
    }
    return $result;
  }
  CredentialCommitments._() : super();
  factory CredentialCommitments.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CredentialCommitments.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CredentialCommitments', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Commitment>(1, _omitFieldNames ? '' : 'prf', subBuilder: Commitment.create)
    ..aOM<Commitment>(2, _omitFieldNames ? '' : 'credCounter', subBuilder: Commitment.create)
    ..aOM<Commitment>(3, _omitFieldNames ? '' : 'maxAccounts', subBuilder: Commitment.create)
    ..m<$core.int, Commitment>(4, _omitFieldNames ? '' : 'attributes', entryClassName: 'CredentialCommitments.AttributesEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OM, valueCreator: Commitment.create, valueDefaultOrMaker: Commitment.getDefault, packageName: const $pb.PackageName('concordium.v2'))
    ..pc<Commitment>(5, _omitFieldNames ? '' : 'idCredSecSharingCoeff', $pb.PbFieldType.PM, subBuilder: Commitment.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CredentialCommitments clone() => CredentialCommitments()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CredentialCommitments copyWith(void Function(CredentialCommitments) updates) => super.copyWith((message) => updates(message as CredentialCommitments)) as CredentialCommitments;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CredentialCommitments create() => CredentialCommitments._();
  CredentialCommitments createEmptyInstance() => create();
  static $pb.PbList<CredentialCommitments> createRepeated() => $pb.PbList<CredentialCommitments>();
  @$core.pragma('dart2js:noInline')
  static CredentialCommitments getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CredentialCommitments>(create);
  static CredentialCommitments? _defaultInstance;

  /// Commitment to the PRF key.
  @$pb.TagNumber(1)
  Commitment get prf => $_getN(0);
  @$pb.TagNumber(1)
  set prf(Commitment v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasPrf() => $_has(0);
  @$pb.TagNumber(1)
  void clearPrf() => clearField(1);
  @$pb.TagNumber(1)
  Commitment ensurePrf() => $_ensure(0);

  /// Commitment to the counter used to generate the credential registration id.
  @$pb.TagNumber(2)
  Commitment get credCounter => $_getN(1);
  @$pb.TagNumber(2)
  set credCounter(Commitment v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCredCounter() => $_has(1);
  @$pb.TagNumber(2)
  void clearCredCounter() => clearField(2);
  @$pb.TagNumber(2)
  Commitment ensureCredCounter() => $_ensure(1);

  /// Commitment to the `max_accounts` value, which determines the maximum number
  /// of credentials that may be created from the identity object.
  @$pb.TagNumber(3)
  Commitment get maxAccounts => $_getN(2);
  @$pb.TagNumber(3)
  set maxAccounts(Commitment v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMaxAccounts() => $_has(2);
  @$pb.TagNumber(3)
  void clearMaxAccounts() => clearField(3);
  @$pb.TagNumber(3)
  Commitment ensureMaxAccounts() => $_ensure(2);

  /// Commitments to the attributes which have not been revealed in the policy.
  @$pb.TagNumber(4)
  $core.Map<$core.int, Commitment> get attributes => $_getMap(3);

  /// List of commitments to the coefficients of the sharing polynomial. This
  /// polynomial is used in a shared encryption of `id_cred_pub` among the
  /// anonymity revokers.
  @$pb.TagNumber(5)
  $core.List<Commitment> get idCredSecSharingCoeff => $_getList(4);
}

/// Values contained in a normal (non-initial) credential.
class NormalCredentialValues extends $pb.GeneratedMessage {
  factory NormalCredentialValues({
    CredentialPublicKeys? keys,
    CredentialRegistrationId? credId,
    IdentityProviderIdentity? ipId,
    Policy? policy,
    ArThreshold? arThreshold,
    $core.Map<$core.int, ChainArData>? arData,
    CredentialCommitments? commitments,
  }) {
    final $result = create();
    if (keys != null) {
      $result.keys = keys;
    }
    if (credId != null) {
      $result.credId = credId;
    }
    if (ipId != null) {
      $result.ipId = ipId;
    }
    if (policy != null) {
      $result.policy = policy;
    }
    if (arThreshold != null) {
      $result.arThreshold = arThreshold;
    }
    if (arData != null) {
      $result.arData.addAll(arData);
    }
    if (commitments != null) {
      $result.commitments = commitments;
    }
    return $result;
  }
  NormalCredentialValues._() : super();
  factory NormalCredentialValues.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NormalCredentialValues.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NormalCredentialValues', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<CredentialPublicKeys>(1, _omitFieldNames ? '' : 'keys', subBuilder: CredentialPublicKeys.create)
    ..aOM<CredentialRegistrationId>(2, _omitFieldNames ? '' : 'credId', subBuilder: CredentialRegistrationId.create)
    ..aOM<IdentityProviderIdentity>(3, _omitFieldNames ? '' : 'ipId', subBuilder: IdentityProviderIdentity.create)
    ..aOM<Policy>(4, _omitFieldNames ? '' : 'policy', subBuilder: Policy.create)
    ..aOM<ArThreshold>(5, _omitFieldNames ? '' : 'arThreshold', subBuilder: ArThreshold.create)
    ..m<$core.int, ChainArData>(6, _omitFieldNames ? '' : 'arData', entryClassName: 'NormalCredentialValues.ArDataEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OM, valueCreator: ChainArData.create, valueDefaultOrMaker: ChainArData.getDefault, packageName: const $pb.PackageName('concordium.v2'))
    ..aOM<CredentialCommitments>(7, _omitFieldNames ? '' : 'commitments', subBuilder: CredentialCommitments.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NormalCredentialValues clone() => NormalCredentialValues()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NormalCredentialValues copyWith(void Function(NormalCredentialValues) updates) => super.copyWith((message) => updates(message as NormalCredentialValues)) as NormalCredentialValues;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NormalCredentialValues create() => NormalCredentialValues._();
  NormalCredentialValues createEmptyInstance() => create();
  static $pb.PbList<NormalCredentialValues> createRepeated() => $pb.PbList<NormalCredentialValues>();
  @$core.pragma('dart2js:noInline')
  static NormalCredentialValues getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NormalCredentialValues>(create);
  static NormalCredentialValues? _defaultInstance;

  /// Public keys of the credential.
  @$pb.TagNumber(1)
  CredentialPublicKeys get keys => $_getN(0);
  @$pb.TagNumber(1)
  set keys(CredentialPublicKeys v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasKeys() => $_has(0);
  @$pb.TagNumber(1)
  void clearKeys() => clearField(1);
  @$pb.TagNumber(1)
  CredentialPublicKeys ensureKeys() => $_ensure(0);

  /// Its registration ID.
  @$pb.TagNumber(2)
  CredentialRegistrationId get credId => $_getN(1);
  @$pb.TagNumber(2)
  set credId(CredentialRegistrationId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCredId() => $_has(1);
  @$pb.TagNumber(2)
  void clearCredId() => clearField(2);
  @$pb.TagNumber(2)
  CredentialRegistrationId ensureCredId() => $_ensure(1);

  /// The identity provider who signed the identity object from which this
  /// credential is derived.
  @$pb.TagNumber(3)
  IdentityProviderIdentity get ipId => $_getN(2);
  @$pb.TagNumber(3)
  set ipId(IdentityProviderIdentity v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasIpId() => $_has(2);
  @$pb.TagNumber(3)
  void clearIpId() => clearField(3);
  @$pb.TagNumber(3)
  IdentityProviderIdentity ensureIpId() => $_ensure(2);

  /// Policy of this credential.
  @$pb.TagNumber(4)
  Policy get policy => $_getN(3);
  @$pb.TagNumber(4)
  set policy(Policy v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasPolicy() => $_has(3);
  @$pb.TagNumber(4)
  void clearPolicy() => clearField(4);
  @$pb.TagNumber(4)
  Policy ensurePolicy() => $_ensure(3);

  /// The number of anonymity revokers that must work together to revoke the
  /// anonymity of the credential holder.
  @$pb.TagNumber(5)
  ArThreshold get arThreshold => $_getN(4);
  @$pb.TagNumber(5)
  set arThreshold(ArThreshold v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasArThreshold() => $_has(4);
  @$pb.TagNumber(5)
  void clearArThreshold() => clearField(5);
  @$pb.TagNumber(5)
  ArThreshold ensureArThreshold() => $_ensure(4);

  /// Mapping from anonymity revoker identities to revocation data for the given anonymity revoker.
  @$pb.TagNumber(6)
  $core.Map<$core.int, ChainArData> get arData => $_getMap(5);

  /// Commitments to attributes which have not been revealed.
  @$pb.TagNumber(7)
  CredentialCommitments get commitments => $_getN(6);
  @$pb.TagNumber(7)
  set commitments(CredentialCommitments v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasCommitments() => $_has(6);
  @$pb.TagNumber(7)
  void clearCommitments() => clearField(7);
  @$pb.TagNumber(7)
  CredentialCommitments ensureCommitments() => $_ensure(6);
}

enum AccountCredential_CredentialValues {
  initial, 
  normal, 
  notSet
}

/// Credential that is part of an account.
class AccountCredential extends $pb.GeneratedMessage {
  factory AccountCredential({
    InitialCredentialValues? initial,
    NormalCredentialValues? normal,
  }) {
    final $result = create();
    if (initial != null) {
      $result.initial = initial;
    }
    if (normal != null) {
      $result.normal = normal;
    }
    return $result;
  }
  AccountCredential._() : super();
  factory AccountCredential.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountCredential.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, AccountCredential_CredentialValues> _AccountCredential_CredentialValuesByTag = {
    1 : AccountCredential_CredentialValues.initial,
    2 : AccountCredential_CredentialValues.normal,
    0 : AccountCredential_CredentialValues.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountCredential', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<InitialCredentialValues>(1, _omitFieldNames ? '' : 'initial', subBuilder: InitialCredentialValues.create)
    ..aOM<NormalCredentialValues>(2, _omitFieldNames ? '' : 'normal', subBuilder: NormalCredentialValues.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountCredential clone() => AccountCredential()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountCredential copyWith(void Function(AccountCredential) updates) => super.copyWith((message) => updates(message as AccountCredential)) as AccountCredential;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountCredential create() => AccountCredential._();
  AccountCredential createEmptyInstance() => create();
  static $pb.PbList<AccountCredential> createRepeated() => $pb.PbList<AccountCredential>();
  @$core.pragma('dart2js:noInline')
  static AccountCredential getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountCredential>(create);
  static AccountCredential? _defaultInstance;

  AccountCredential_CredentialValues whichCredentialValues() => _AccountCredential_CredentialValuesByTag[$_whichOneof(0)]!;
  void clearCredentialValues() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  InitialCredentialValues get initial => $_getN(0);
  @$pb.TagNumber(1)
  set initial(InitialCredentialValues v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasInitial() => $_has(0);
  @$pb.TagNumber(1)
  void clearInitial() => clearField(1);
  @$pb.TagNumber(1)
  InitialCredentialValues ensureInitial() => $_ensure(0);

  @$pb.TagNumber(2)
  NormalCredentialValues get normal => $_getN(1);
  @$pb.TagNumber(2)
  set normal(NormalCredentialValues v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNormal() => $_has(1);
  @$pb.TagNumber(2)
  void clearNormal() => clearField(2);
  @$pb.TagNumber(2)
  NormalCredentialValues ensureNormal() => $_ensure(1);
}

/// Information about the account at a particular point in time.
class AccountInfo extends $pb.GeneratedMessage {
  factory AccountInfo({
    SequenceNumber? sequenceNumber,
    Amount? amount,
    ReleaseSchedule? schedule,
    $core.Map<$core.int, AccountCredential>? creds,
    AccountThreshold? threshold,
    EncryptedBalance? encryptedBalance,
    EncryptionKey? encryptionKey,
    AccountIndex? index,
    AccountStakingInfo? stake,
    AccountAddress? address,
  }) {
    final $result = create();
    if (sequenceNumber != null) {
      $result.sequenceNumber = sequenceNumber;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (schedule != null) {
      $result.schedule = schedule;
    }
    if (creds != null) {
      $result.creds.addAll(creds);
    }
    if (threshold != null) {
      $result.threshold = threshold;
    }
    if (encryptedBalance != null) {
      $result.encryptedBalance = encryptedBalance;
    }
    if (encryptionKey != null) {
      $result.encryptionKey = encryptionKey;
    }
    if (index != null) {
      $result.index = index;
    }
    if (stake != null) {
      $result.stake = stake;
    }
    if (address != null) {
      $result.address = address;
    }
    return $result;
  }
  AccountInfo._() : super();
  factory AccountInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<SequenceNumber>(1, _omitFieldNames ? '' : 'sequenceNumber', subBuilder: SequenceNumber.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<ReleaseSchedule>(3, _omitFieldNames ? '' : 'schedule', subBuilder: ReleaseSchedule.create)
    ..m<$core.int, AccountCredential>(4, _omitFieldNames ? '' : 'creds', entryClassName: 'AccountInfo.CredsEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OM, valueCreator: AccountCredential.create, valueDefaultOrMaker: AccountCredential.getDefault, packageName: const $pb.PackageName('concordium.v2'))
    ..aOM<AccountThreshold>(5, _omitFieldNames ? '' : 'threshold', subBuilder: AccountThreshold.create)
    ..aOM<EncryptedBalance>(6, _omitFieldNames ? '' : 'encryptedBalance', subBuilder: EncryptedBalance.create)
    ..aOM<EncryptionKey>(7, _omitFieldNames ? '' : 'encryptionKey', subBuilder: EncryptionKey.create)
    ..aOM<AccountIndex>(8, _omitFieldNames ? '' : 'index', subBuilder: AccountIndex.create)
    ..aOM<AccountStakingInfo>(9, _omitFieldNames ? '' : 'stake', subBuilder: AccountStakingInfo.create)
    ..aOM<AccountAddress>(10, _omitFieldNames ? '' : 'address', subBuilder: AccountAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountInfo clone() => AccountInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountInfo copyWith(void Function(AccountInfo) updates) => super.copyWith((message) => updates(message as AccountInfo)) as AccountInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountInfo create() => AccountInfo._();
  AccountInfo createEmptyInstance() => create();
  static $pb.PbList<AccountInfo> createRepeated() => $pb.PbList<AccountInfo>();
  @$core.pragma('dart2js:noInline')
  static AccountInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountInfo>(create);
  static AccountInfo? _defaultInstance;

  /// Next sequence number to be used for transactions signed from this account.
  @$pb.TagNumber(1)
  SequenceNumber get sequenceNumber => $_getN(0);
  @$pb.TagNumber(1)
  set sequenceNumber(SequenceNumber v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSequenceNumber() => $_has(0);
  @$pb.TagNumber(1)
  void clearSequenceNumber() => clearField(1);
  @$pb.TagNumber(1)
  SequenceNumber ensureSequenceNumber() => $_ensure(0);

  /// Current (unencrypted) balance of the account.
  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);

  /// Release schedule for any locked up amount. This could be an empty
  /// release schedule.
  @$pb.TagNumber(3)
  ReleaseSchedule get schedule => $_getN(2);
  @$pb.TagNumber(3)
  set schedule(ReleaseSchedule v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasSchedule() => $_has(2);
  @$pb.TagNumber(3)
  void clearSchedule() => clearField(3);
  @$pb.TagNumber(3)
  ReleaseSchedule ensureSchedule() => $_ensure(2);

  /// Map of all currently active credentials on the account.
  /// This includes public keys that can sign for the given credentials, as
  /// well as any revealed attributes. This map always contains a credential
  /// with index 0.
  @$pb.TagNumber(4)
  $core.Map<$core.int, AccountCredential> get creds => $_getMap(3);

  /// Lower bound on how many credentials must sign any given transaction from
  /// this account.
  @$pb.TagNumber(5)
  AccountThreshold get threshold => $_getN(4);
  @$pb.TagNumber(5)
  set threshold(AccountThreshold v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasThreshold() => $_has(4);
  @$pb.TagNumber(5)
  void clearThreshold() => clearField(5);
  @$pb.TagNumber(5)
  AccountThreshold ensureThreshold() => $_ensure(4);

  /// The encrypted balance of the account.
  @$pb.TagNumber(6)
  EncryptedBalance get encryptedBalance => $_getN(5);
  @$pb.TagNumber(6)
  set encryptedBalance(EncryptedBalance v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasEncryptedBalance() => $_has(5);
  @$pb.TagNumber(6)
  void clearEncryptedBalance() => clearField(6);
  @$pb.TagNumber(6)
  EncryptedBalance ensureEncryptedBalance() => $_ensure(5);

  /// The public key for sending encrypted balances to the account.
  @$pb.TagNumber(7)
  EncryptionKey get encryptionKey => $_getN(6);
  @$pb.TagNumber(7)
  set encryptionKey(EncryptionKey v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasEncryptionKey() => $_has(6);
  @$pb.TagNumber(7)
  void clearEncryptionKey() => clearField(7);
  @$pb.TagNumber(7)
  EncryptionKey ensureEncryptionKey() => $_ensure(6);

  /// Internal index of the account. Accounts on the chain get sequential
  /// indices. These should generally not be used outside of the chain,
  /// the account address is meant to be used to refer to accounts,
  /// however the account index serves the role of the baker id, if the
  /// account is a baker. Hence it is exposed here as well.
  @$pb.TagNumber(8)
  AccountIndex get index => $_getN(7);
  @$pb.TagNumber(8)
  set index(AccountIndex v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasIndex() => $_has(7);
  @$pb.TagNumber(8)
  void clearIndex() => clearField(8);
  @$pb.TagNumber(8)
  AccountIndex ensureIndex() => $_ensure(7);

  /// Present if the account is a baker or delegator. In that case
  /// it is the information about the baker or delegator.
  @$pb.TagNumber(9)
  AccountStakingInfo get stake => $_getN(8);
  @$pb.TagNumber(9)
  set stake(AccountStakingInfo v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasStake() => $_has(8);
  @$pb.TagNumber(9)
  void clearStake() => clearField(9);
  @$pb.TagNumber(9)
  AccountStakingInfo ensureStake() => $_ensure(8);

  /// Canonical address of the account. This is derived from the first credential
  /// that created the account.
  @$pb.TagNumber(10)
  AccountAddress get address => $_getN(9);
  @$pb.TagNumber(10)
  set address(AccountAddress v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasAddress() => $_has(9);
  @$pb.TagNumber(10)
  void clearAddress() => clearField(10);
  @$pb.TagNumber(10)
  AccountAddress ensureAddress() => $_ensure(9);
}

/// Request using a relative block height.
class BlockHashInput_RelativeHeight extends $pb.GeneratedMessage {
  factory BlockHashInput_RelativeHeight({
    GenesisIndex? genesisIndex,
    BlockHeight? height,
    $core.bool? restrict,
  }) {
    final $result = create();
    if (genesisIndex != null) {
      $result.genesisIndex = genesisIndex;
    }
    if (height != null) {
      $result.height = height;
    }
    if (restrict != null) {
      $result.restrict = restrict;
    }
    return $result;
  }
  BlockHashInput_RelativeHeight._() : super();
  factory BlockHashInput_RelativeHeight.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockHashInput_RelativeHeight.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockHashInput.RelativeHeight', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<GenesisIndex>(1, _omitFieldNames ? '' : 'genesisIndex', subBuilder: GenesisIndex.create)
    ..aOM<BlockHeight>(2, _omitFieldNames ? '' : 'height', subBuilder: BlockHeight.create)
    ..aOB(3, _omitFieldNames ? '' : 'restrict')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockHashInput_RelativeHeight clone() => BlockHashInput_RelativeHeight()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockHashInput_RelativeHeight copyWith(void Function(BlockHashInput_RelativeHeight) updates) => super.copyWith((message) => updates(message as BlockHashInput_RelativeHeight)) as BlockHashInput_RelativeHeight;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockHashInput_RelativeHeight create() => BlockHashInput_RelativeHeight._();
  BlockHashInput_RelativeHeight createEmptyInstance() => create();
  static $pb.PbList<BlockHashInput_RelativeHeight> createRepeated() => $pb.PbList<BlockHashInput_RelativeHeight>();
  @$core.pragma('dart2js:noInline')
  static BlockHashInput_RelativeHeight getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockHashInput_RelativeHeight>(create);
  static BlockHashInput_RelativeHeight? _defaultInstance;

  /// Genesis index to start from.
  @$pb.TagNumber(1)
  GenesisIndex get genesisIndex => $_getN(0);
  @$pb.TagNumber(1)
  set genesisIndex(GenesisIndex v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasGenesisIndex() => $_has(0);
  @$pb.TagNumber(1)
  void clearGenesisIndex() => clearField(1);
  @$pb.TagNumber(1)
  GenesisIndex ensureGenesisIndex() => $_ensure(0);

  /// Height starting from the genesis block at the genesis index.
  @$pb.TagNumber(2)
  BlockHeight get height => $_getN(1);
  @$pb.TagNumber(2)
  set height(BlockHeight v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasHeight() => $_has(1);
  @$pb.TagNumber(2)
  void clearHeight() => clearField(2);
  @$pb.TagNumber(2)
  BlockHeight ensureHeight() => $_ensure(1);

  /// Whether to return results only from the specified genesis index (`true`),
  /// or allow results from more recent genesis indices as well (`false`).
  @$pb.TagNumber(3)
  $core.bool get restrict => $_getBF(2);
  @$pb.TagNumber(3)
  set restrict($core.bool v) { $_setBool(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasRestrict() => $_has(2);
  @$pb.TagNumber(3)
  void clearRestrict() => clearField(3);
}

enum BlockHashInput_BlockHashInput {
  best, 
  lastFinal, 
  given, 
  absoluteHeight, 
  relativeHeight, 
  notSet
}

/// Input to queries which take a block as a parameter.
class BlockHashInput extends $pb.GeneratedMessage {
  factory BlockHashInput({
    Empty? best,
    Empty? lastFinal,
    BlockHash? given,
    AbsoluteBlockHeight? absoluteHeight,
    BlockHashInput_RelativeHeight? relativeHeight,
  }) {
    final $result = create();
    if (best != null) {
      $result.best = best;
    }
    if (lastFinal != null) {
      $result.lastFinal = lastFinal;
    }
    if (given != null) {
      $result.given = given;
    }
    if (absoluteHeight != null) {
      $result.absoluteHeight = absoluteHeight;
    }
    if (relativeHeight != null) {
      $result.relativeHeight = relativeHeight;
    }
    return $result;
  }
  BlockHashInput._() : super();
  factory BlockHashInput.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockHashInput.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BlockHashInput_BlockHashInput> _BlockHashInput_BlockHashInputByTag = {
    1 : BlockHashInput_BlockHashInput.best,
    2 : BlockHashInput_BlockHashInput.lastFinal,
    3 : BlockHashInput_BlockHashInput.given,
    4 : BlockHashInput_BlockHashInput.absoluteHeight,
    5 : BlockHashInput_BlockHashInput.relativeHeight,
    0 : BlockHashInput_BlockHashInput.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockHashInput', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5])
    ..aOM<Empty>(1, _omitFieldNames ? '' : 'best', subBuilder: Empty.create)
    ..aOM<Empty>(2, _omitFieldNames ? '' : 'lastFinal', subBuilder: Empty.create)
    ..aOM<BlockHash>(3, _omitFieldNames ? '' : 'given', subBuilder: BlockHash.create)
    ..aOM<AbsoluteBlockHeight>(4, _omitFieldNames ? '' : 'absoluteHeight', subBuilder: AbsoluteBlockHeight.create)
    ..aOM<BlockHashInput_RelativeHeight>(5, _omitFieldNames ? '' : 'relativeHeight', subBuilder: BlockHashInput_RelativeHeight.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockHashInput clone() => BlockHashInput()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockHashInput copyWith(void Function(BlockHashInput) updates) => super.copyWith((message) => updates(message as BlockHashInput)) as BlockHashInput;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockHashInput create() => BlockHashInput._();
  BlockHashInput createEmptyInstance() => create();
  static $pb.PbList<BlockHashInput> createRepeated() => $pb.PbList<BlockHashInput>();
  @$core.pragma('dart2js:noInline')
  static BlockHashInput getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockHashInput>(create);
  static BlockHashInput? _defaultInstance;

  BlockHashInput_BlockHashInput whichBlockHashInput() => _BlockHashInput_BlockHashInputByTag[$_whichOneof(0)]!;
  void clearBlockHashInput() => clearField($_whichOneof(0));

  /// Query for the best block.
  @$pb.TagNumber(1)
  Empty get best => $_getN(0);
  @$pb.TagNumber(1)
  set best(Empty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBest() => $_has(0);
  @$pb.TagNumber(1)
  void clearBest() => clearField(1);
  @$pb.TagNumber(1)
  Empty ensureBest() => $_ensure(0);

  /// Query for the last finalized block.
  @$pb.TagNumber(2)
  Empty get lastFinal => $_getN(1);
  @$pb.TagNumber(2)
  set lastFinal(Empty v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasLastFinal() => $_has(1);
  @$pb.TagNumber(2)
  void clearLastFinal() => clearField(2);
  @$pb.TagNumber(2)
  Empty ensureLastFinal() => $_ensure(1);

  /// Query for the block specified by the hash. This hash should always be 32 bytes.
  @$pb.TagNumber(3)
  BlockHash get given => $_getN(2);
  @$pb.TagNumber(3)
  set given(BlockHash v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasGiven() => $_has(2);
  @$pb.TagNumber(3)
  void clearGiven() => clearField(3);
  @$pb.TagNumber(3)
  BlockHash ensureGiven() => $_ensure(2);

  /// Query for a block at absolute height, if a unique block can be identified at that height.
  @$pb.TagNumber(4)
  AbsoluteBlockHeight get absoluteHeight => $_getN(3);
  @$pb.TagNumber(4)
  set absoluteHeight(AbsoluteBlockHeight v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasAbsoluteHeight() => $_has(3);
  @$pb.TagNumber(4)
  void clearAbsoluteHeight() => clearField(4);
  @$pb.TagNumber(4)
  AbsoluteBlockHeight ensureAbsoluteHeight() => $_ensure(3);

  /// Query for a block at height relative to a genesis index.
  @$pb.TagNumber(5)
  BlockHashInput_RelativeHeight get relativeHeight => $_getN(4);
  @$pb.TagNumber(5)
  set relativeHeight(BlockHashInput_RelativeHeight v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasRelativeHeight() => $_has(4);
  @$pb.TagNumber(5)
  void clearRelativeHeight() => clearField(5);
  @$pb.TagNumber(5)
  BlockHashInput_RelativeHeight ensureRelativeHeight() => $_ensure(4);
}

/// Request an epoch by number at a given genesis index.
class EpochRequest_RelativeEpoch extends $pb.GeneratedMessage {
  factory EpochRequest_RelativeEpoch({
    GenesisIndex? genesisIndex,
    Epoch? epoch,
  }) {
    final $result = create();
    if (genesisIndex != null) {
      $result.genesisIndex = genesisIndex;
    }
    if (epoch != null) {
      $result.epoch = epoch;
    }
    return $result;
  }
  EpochRequest_RelativeEpoch._() : super();
  factory EpochRequest_RelativeEpoch.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EpochRequest_RelativeEpoch.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EpochRequest.RelativeEpoch', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<GenesisIndex>(1, _omitFieldNames ? '' : 'genesisIndex', subBuilder: GenesisIndex.create)
    ..aOM<Epoch>(2, _omitFieldNames ? '' : 'epoch', subBuilder: Epoch.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EpochRequest_RelativeEpoch clone() => EpochRequest_RelativeEpoch()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EpochRequest_RelativeEpoch copyWith(void Function(EpochRequest_RelativeEpoch) updates) => super.copyWith((message) => updates(message as EpochRequest_RelativeEpoch)) as EpochRequest_RelativeEpoch;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EpochRequest_RelativeEpoch create() => EpochRequest_RelativeEpoch._();
  EpochRequest_RelativeEpoch createEmptyInstance() => create();
  static $pb.PbList<EpochRequest_RelativeEpoch> createRepeated() => $pb.PbList<EpochRequest_RelativeEpoch>();
  @$core.pragma('dart2js:noInline')
  static EpochRequest_RelativeEpoch getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EpochRequest_RelativeEpoch>(create);
  static EpochRequest_RelativeEpoch? _defaultInstance;

  /// The genesis index to query at. The query is restricted to this genesis index, and
  /// will not return results for other indices even if the epoch number is out of bounds.
  @$pb.TagNumber(1)
  GenesisIndex get genesisIndex => $_getN(0);
  @$pb.TagNumber(1)
  set genesisIndex(GenesisIndex v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasGenesisIndex() => $_has(0);
  @$pb.TagNumber(1)
  void clearGenesisIndex() => clearField(1);
  @$pb.TagNumber(1)
  GenesisIndex ensureGenesisIndex() => $_ensure(0);

  /// The epoch number to query at.
  @$pb.TagNumber(2)
  Epoch get epoch => $_getN(1);
  @$pb.TagNumber(2)
  set epoch(Epoch v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEpoch() => $_has(1);
  @$pb.TagNumber(2)
  void clearEpoch() => clearField(2);
  @$pb.TagNumber(2)
  Epoch ensureEpoch() => $_ensure(1);
}

enum EpochRequest_EpochRequestInput {
  relativeEpoch, 
  blockHash, 
  notSet
}

/// Input to queries which take an epoch as a parameter.
class EpochRequest extends $pb.GeneratedMessage {
  factory EpochRequest({
    EpochRequest_RelativeEpoch? relativeEpoch,
    BlockHashInput? blockHash,
  }) {
    final $result = create();
    if (relativeEpoch != null) {
      $result.relativeEpoch = relativeEpoch;
    }
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    return $result;
  }
  EpochRequest._() : super();
  factory EpochRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EpochRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, EpochRequest_EpochRequestInput> _EpochRequest_EpochRequestInputByTag = {
    1 : EpochRequest_EpochRequestInput.relativeEpoch,
    2 : EpochRequest_EpochRequestInput.blockHash,
    0 : EpochRequest_EpochRequestInput.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EpochRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<EpochRequest_RelativeEpoch>(1, _omitFieldNames ? '' : 'relativeEpoch', subBuilder: EpochRequest_RelativeEpoch.create)
    ..aOM<BlockHashInput>(2, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EpochRequest clone() => EpochRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EpochRequest copyWith(void Function(EpochRequest) updates) => super.copyWith((message) => updates(message as EpochRequest)) as EpochRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EpochRequest create() => EpochRequest._();
  EpochRequest createEmptyInstance() => create();
  static $pb.PbList<EpochRequest> createRepeated() => $pb.PbList<EpochRequest>();
  @$core.pragma('dart2js:noInline')
  static EpochRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EpochRequest>(create);
  static EpochRequest? _defaultInstance;

  EpochRequest_EpochRequestInput whichEpochRequestInput() => _EpochRequest_EpochRequestInputByTag[$_whichOneof(0)]!;
  void clearEpochRequestInput() => clearField($_whichOneof(0));

  /// Query by genesis index and epoch number.
  @$pb.TagNumber(1)
  EpochRequest_RelativeEpoch get relativeEpoch => $_getN(0);
  @$pb.TagNumber(1)
  set relativeEpoch(EpochRequest_RelativeEpoch v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRelativeEpoch() => $_has(0);
  @$pb.TagNumber(1)
  void clearRelativeEpoch() => clearField(1);
  @$pb.TagNumber(1)
  EpochRequest_RelativeEpoch ensureRelativeEpoch() => $_ensure(0);

  /// Query for the epoch of a specified block.
  @$pb.TagNumber(2)
  BlockHashInput get blockHash => $_getN(1);
  @$pb.TagNumber(2)
  set blockHash(BlockHashInput v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBlockHash() => $_has(1);
  @$pb.TagNumber(2)
  void clearBlockHash() => clearField(2);
  @$pb.TagNumber(2)
  BlockHashInput ensureBlockHash() => $_ensure(1);
}

enum AccountIdentifierInput_AccountIdentifierInput {
  address, 
  credId, 
  accountIndex, 
  notSet
}

/// Input to queries which take an account as a parameter.
class AccountIdentifierInput extends $pb.GeneratedMessage {
  factory AccountIdentifierInput({
    AccountAddress? address,
    CredentialRegistrationId? credId,
    AccountIndex? accountIndex,
  }) {
    final $result = create();
    if (address != null) {
      $result.address = address;
    }
    if (credId != null) {
      $result.credId = credId;
    }
    if (accountIndex != null) {
      $result.accountIndex = accountIndex;
    }
    return $result;
  }
  AccountIdentifierInput._() : super();
  factory AccountIdentifierInput.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountIdentifierInput.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, AccountIdentifierInput_AccountIdentifierInput> _AccountIdentifierInput_AccountIdentifierInputByTag = {
    1 : AccountIdentifierInput_AccountIdentifierInput.address,
    2 : AccountIdentifierInput_AccountIdentifierInput.credId,
    3 : AccountIdentifierInput_AccountIdentifierInput.accountIndex,
    0 : AccountIdentifierInput_AccountIdentifierInput.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountIdentifierInput', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'address', subBuilder: AccountAddress.create)
    ..aOM<CredentialRegistrationId>(2, _omitFieldNames ? '' : 'credId', subBuilder: CredentialRegistrationId.create)
    ..aOM<AccountIndex>(3, _omitFieldNames ? '' : 'accountIndex', subBuilder: AccountIndex.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountIdentifierInput clone() => AccountIdentifierInput()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountIdentifierInput copyWith(void Function(AccountIdentifierInput) updates) => super.copyWith((message) => updates(message as AccountIdentifierInput)) as AccountIdentifierInput;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountIdentifierInput create() => AccountIdentifierInput._();
  AccountIdentifierInput createEmptyInstance() => create();
  static $pb.PbList<AccountIdentifierInput> createRepeated() => $pb.PbList<AccountIdentifierInput>();
  @$core.pragma('dart2js:noInline')
  static AccountIdentifierInput getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountIdentifierInput>(create);
  static AccountIdentifierInput? _defaultInstance;

  AccountIdentifierInput_AccountIdentifierInput whichAccountIdentifierInput() => _AccountIdentifierInput_AccountIdentifierInputByTag[$_whichOneof(0)]!;
  void clearAccountIdentifierInput() => clearField($_whichOneof(0));

  /// Identify the account by the address of the account.
  @$pb.TagNumber(1)
  AccountAddress get address => $_getN(0);
  @$pb.TagNumber(1)
  set address(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAddress() => $_has(0);
  @$pb.TagNumber(1)
  void clearAddress() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAddress() => $_ensure(0);

  /// Identify the account by the credential that belongs or has belonged to it.
  @$pb.TagNumber(2)
  CredentialRegistrationId get credId => $_getN(1);
  @$pb.TagNumber(2)
  set credId(CredentialRegistrationId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCredId() => $_has(1);
  @$pb.TagNumber(2)
  void clearCredId() => clearField(2);
  @$pb.TagNumber(2)
  CredentialRegistrationId ensureCredId() => $_ensure(1);

  /// Identify the account via its index.
  @$pb.TagNumber(3)
  AccountIndex get accountIndex => $_getN(2);
  @$pb.TagNumber(3)
  set accountIndex(AccountIndex v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAccountIndex() => $_has(2);
  @$pb.TagNumber(3)
  void clearAccountIndex() => clearField(3);
  @$pb.TagNumber(3)
  AccountIndex ensureAccountIndex() => $_ensure(2);
}

/// Request for account information.
class AccountInfoRequest extends $pb.GeneratedMessage {
  factory AccountInfoRequest({
    BlockHashInput? blockHash,
    AccountIdentifierInput? accountIdentifier,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (accountIdentifier != null) {
      $result.accountIdentifier = accountIdentifier;
    }
    return $result;
  }
  AccountInfoRequest._() : super();
  factory AccountInfoRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountInfoRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountInfoRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..aOM<AccountIdentifierInput>(2, _omitFieldNames ? '' : 'accountIdentifier', subBuilder: AccountIdentifierInput.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountInfoRequest clone() => AccountInfoRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountInfoRequest copyWith(void Function(AccountInfoRequest) updates) => super.copyWith((message) => updates(message as AccountInfoRequest)) as AccountInfoRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountInfoRequest create() => AccountInfoRequest._();
  AccountInfoRequest createEmptyInstance() => create();
  static $pb.PbList<AccountInfoRequest> createRepeated() => $pb.PbList<AccountInfoRequest>();
  @$core.pragma('dart2js:noInline')
  static AccountInfoRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountInfoRequest>(create);
  static AccountInfoRequest? _defaultInstance;

  /// Block in which to query the account information.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// Specification of the account.
  @$pb.TagNumber(2)
  AccountIdentifierInput get accountIdentifier => $_getN(1);
  @$pb.TagNumber(2)
  set accountIdentifier(AccountIdentifierInput v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAccountIdentifier() => $_has(1);
  @$pb.TagNumber(2)
  void clearAccountIdentifier() => clearField(2);
  @$pb.TagNumber(2)
  AccountIdentifierInput ensureAccountIdentifier() => $_ensure(1);
}

/// Information about a finalized block that is part of the streaming response.
class FinalizedBlockInfo extends $pb.GeneratedMessage {
  factory FinalizedBlockInfo({
    BlockHash? hash,
    AbsoluteBlockHeight? height,
  }) {
    final $result = create();
    if (hash != null) {
      $result.hash = hash;
    }
    if (height != null) {
      $result.height = height;
    }
    return $result;
  }
  FinalizedBlockInfo._() : super();
  factory FinalizedBlockInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory FinalizedBlockInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'FinalizedBlockInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'hash', subBuilder: BlockHash.create)
    ..aOM<AbsoluteBlockHeight>(2, _omitFieldNames ? '' : 'height', subBuilder: AbsoluteBlockHeight.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  FinalizedBlockInfo clone() => FinalizedBlockInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  FinalizedBlockInfo copyWith(void Function(FinalizedBlockInfo) updates) => super.copyWith((message) => updates(message as FinalizedBlockInfo)) as FinalizedBlockInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static FinalizedBlockInfo create() => FinalizedBlockInfo._();
  FinalizedBlockInfo createEmptyInstance() => create();
  static $pb.PbList<FinalizedBlockInfo> createRepeated() => $pb.PbList<FinalizedBlockInfo>();
  @$core.pragma('dart2js:noInline')
  static FinalizedBlockInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<FinalizedBlockInfo>(create);
  static FinalizedBlockInfo? _defaultInstance;

  /// Hash of the block.
  @$pb.TagNumber(1)
  BlockHash get hash => $_getN(0);
  @$pb.TagNumber(1)
  set hash(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureHash() => $_ensure(0);

  /// Absolute height of the block, height 0 is the genesis block.
  @$pb.TagNumber(2)
  AbsoluteBlockHeight get height => $_getN(1);
  @$pb.TagNumber(2)
  set height(AbsoluteBlockHeight v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasHeight() => $_has(1);
  @$pb.TagNumber(2)
  void clearHeight() => clearField(2);
  @$pb.TagNumber(2)
  AbsoluteBlockHeight ensureHeight() => $_ensure(1);
}

/// Request the ancestors for the given block.
class AncestorsRequest extends $pb.GeneratedMessage {
  factory AncestorsRequest({
    BlockHashInput? blockHash,
    $fixnum.Int64? amount,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    return $result;
  }
  AncestorsRequest._() : super();
  factory AncestorsRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AncestorsRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AncestorsRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'amount', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AncestorsRequest clone() => AncestorsRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AncestorsRequest copyWith(void Function(AncestorsRequest) updates) => super.copyWith((message) => updates(message as AncestorsRequest)) as AncestorsRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AncestorsRequest create() => AncestorsRequest._();
  AncestorsRequest createEmptyInstance() => create();
  static $pb.PbList<AncestorsRequest> createRepeated() => $pb.PbList<AncestorsRequest>();
  @$core.pragma('dart2js:noInline')
  static AncestorsRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AncestorsRequest>(create);
  static AncestorsRequest? _defaultInstance;

  /// The block to get ancestors of.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// The maximum number of ancestors returned.
  @$pb.TagNumber(2)
  $fixnum.Int64 get amount => $_getI64(1);
  @$pb.TagNumber(2)
  set amount($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
}

/// Request for getting the source of a smart contract module.
class ModuleSourceRequest extends $pb.GeneratedMessage {
  factory ModuleSourceRequest({
    BlockHashInput? blockHash,
    ModuleRef? moduleRef,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (moduleRef != null) {
      $result.moduleRef = moduleRef;
    }
    return $result;
  }
  ModuleSourceRequest._() : super();
  factory ModuleSourceRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ModuleSourceRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ModuleSourceRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..aOM<ModuleRef>(2, _omitFieldNames ? '' : 'moduleRef', subBuilder: ModuleRef.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ModuleSourceRequest clone() => ModuleSourceRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ModuleSourceRequest copyWith(void Function(ModuleSourceRequest) updates) => super.copyWith((message) => updates(message as ModuleSourceRequest)) as ModuleSourceRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ModuleSourceRequest create() => ModuleSourceRequest._();
  ModuleSourceRequest createEmptyInstance() => create();
  static $pb.PbList<ModuleSourceRequest> createRepeated() => $pb.PbList<ModuleSourceRequest>();
  @$core.pragma('dart2js:noInline')
  static ModuleSourceRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ModuleSourceRequest>(create);
  static ModuleSourceRequest? _defaultInstance;

  /// The block to be used for the query.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// The reference of the module.
  @$pb.TagNumber(2)
  ModuleRef get moduleRef => $_getN(1);
  @$pb.TagNumber(2)
  set moduleRef(ModuleRef v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasModuleRef() => $_has(1);
  @$pb.TagNumber(2)
  void clearModuleRef() => clearField(2);
  @$pb.TagNumber(2)
  ModuleRef ensureModuleRef() => $_ensure(1);
}

/// Address of a smart contract instance.
class ContractAddress extends $pb.GeneratedMessage {
  factory ContractAddress({
    $fixnum.Int64? index,
    $fixnum.Int64? subindex,
  }) {
    final $result = create();
    if (index != null) {
      $result.index = index;
    }
    if (subindex != null) {
      $result.subindex = subindex;
    }
    return $result;
  }
  ContractAddress._() : super();
  factory ContractAddress.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractAddress.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractAddress', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'index', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'subindex', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractAddress clone() => ContractAddress()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractAddress copyWith(void Function(ContractAddress) updates) => super.copyWith((message) => updates(message as ContractAddress)) as ContractAddress;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractAddress create() => ContractAddress._();
  ContractAddress createEmptyInstance() => create();
  static $pb.PbList<ContractAddress> createRepeated() => $pb.PbList<ContractAddress>();
  @$core.pragma('dart2js:noInline')
  static ContractAddress getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractAddress>(create);
  static ContractAddress? _defaultInstance;

  /// The index of the smart contract.
  @$pb.TagNumber(1)
  $fixnum.Int64 get index => $_getI64(0);
  @$pb.TagNumber(1)
  set index($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasIndex() => $_has(0);
  @$pb.TagNumber(1)
  void clearIndex() => clearField(1);

  /// The subindex of the smart contract instance.
  /// Currently not used, so it is always 0.
  @$pb.TagNumber(2)
  $fixnum.Int64 get subindex => $_getI64(1);
  @$pb.TagNumber(2)
  set subindex($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasSubindex() => $_has(1);
  @$pb.TagNumber(2)
  void clearSubindex() => clearField(2);
}

/// Request for getting information about a smart contract instance.
class InstanceInfoRequest extends $pb.GeneratedMessage {
  factory InstanceInfoRequest({
    BlockHashInput? blockHash,
    ContractAddress? address,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (address != null) {
      $result.address = address;
    }
    return $result;
  }
  InstanceInfoRequest._() : super();
  factory InstanceInfoRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceInfoRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceInfoRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceInfoRequest clone() => InstanceInfoRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceInfoRequest copyWith(void Function(InstanceInfoRequest) updates) => super.copyWith((message) => updates(message as InstanceInfoRequest)) as InstanceInfoRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceInfoRequest create() => InstanceInfoRequest._();
  InstanceInfoRequest createEmptyInstance() => create();
  static $pb.PbList<InstanceInfoRequest> createRepeated() => $pb.PbList<InstanceInfoRequest>();
  @$core.pragma('dart2js:noInline')
  static InstanceInfoRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceInfoRequest>(create);
  static InstanceInfoRequest? _defaultInstance;

  /// The block to be used for the query.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// The address of the smart contract instance.
  @$pb.TagNumber(2)
  ContractAddress get address => $_getN(1);
  @$pb.TagNumber(2)
  set address(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearAddress() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureAddress() => $_ensure(1);
}

/// Version 0 smart contract instance information.
class InstanceInfo_V0 extends $pb.GeneratedMessage {
  factory InstanceInfo_V0({
    ContractStateV0? model,
    AccountAddress? owner,
    Amount? amount,
    $core.Iterable<ReceiveName>? methods,
    InitName? name,
    ModuleRef? sourceModule,
  }) {
    final $result = create();
    if (model != null) {
      $result.model = model;
    }
    if (owner != null) {
      $result.owner = owner;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (methods != null) {
      $result.methods.addAll(methods);
    }
    if (name != null) {
      $result.name = name;
    }
    if (sourceModule != null) {
      $result.sourceModule = sourceModule;
    }
    return $result;
  }
  InstanceInfo_V0._() : super();
  factory InstanceInfo_V0.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceInfo_V0.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceInfo.V0', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ContractStateV0>(1, _omitFieldNames ? '' : 'model', subBuilder: ContractStateV0.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'owner', subBuilder: AccountAddress.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..pc<ReceiveName>(4, _omitFieldNames ? '' : 'methods', $pb.PbFieldType.PM, subBuilder: ReceiveName.create)
    ..aOM<InitName>(5, _omitFieldNames ? '' : 'name', subBuilder: InitName.create)
    ..aOM<ModuleRef>(6, _omitFieldNames ? '' : 'sourceModule', subBuilder: ModuleRef.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceInfo_V0 clone() => InstanceInfo_V0()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceInfo_V0 copyWith(void Function(InstanceInfo_V0) updates) => super.copyWith((message) => updates(message as InstanceInfo_V0)) as InstanceInfo_V0;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceInfo_V0 create() => InstanceInfo_V0._();
  InstanceInfo_V0 createEmptyInstance() => create();
  static $pb.PbList<InstanceInfo_V0> createRepeated() => $pb.PbList<InstanceInfo_V0>();
  @$core.pragma('dart2js:noInline')
  static InstanceInfo_V0 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceInfo_V0>(create);
  static InstanceInfo_V0? _defaultInstance;

  /// The state of the instance.
  @$pb.TagNumber(1)
  ContractStateV0 get model => $_getN(0);
  @$pb.TagNumber(1)
  set model(ContractStateV0 v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasModel() => $_has(0);
  @$pb.TagNumber(1)
  void clearModel() => clearField(1);
  @$pb.TagNumber(1)
  ContractStateV0 ensureModel() => $_ensure(0);

  /// The account address which deployed the instance.
  @$pb.TagNumber(2)
  AccountAddress get owner => $_getN(1);
  @$pb.TagNumber(2)
  set owner(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOwner() => $_has(1);
  @$pb.TagNumber(2)
  void clearOwner() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureOwner() => $_ensure(1);

  /// The amount of CCD tokens in the balance of the instance.
  @$pb.TagNumber(3)
  Amount get amount => $_getN(2);
  @$pb.TagNumber(3)
  set amount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAmount() => $_has(2);
  @$pb.TagNumber(3)
  void clearAmount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureAmount() => $_ensure(2);

  /// A list of endpoints exposed by the instance.
  @$pb.TagNumber(4)
  $core.List<ReceiveName> get methods => $_getList(3);

  /// The name of the smart contract of the instance.
  @$pb.TagNumber(5)
  InitName get name => $_getN(4);
  @$pb.TagNumber(5)
  set name(InitName v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasName() => $_has(4);
  @$pb.TagNumber(5)
  void clearName() => clearField(5);
  @$pb.TagNumber(5)
  InitName ensureName() => $_ensure(4);

  /// The module reference for the smart contract module of the instance.
  @$pb.TagNumber(6)
  ModuleRef get sourceModule => $_getN(5);
  @$pb.TagNumber(6)
  set sourceModule(ModuleRef v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasSourceModule() => $_has(5);
  @$pb.TagNumber(6)
  void clearSourceModule() => clearField(6);
  @$pb.TagNumber(6)
  ModuleRef ensureSourceModule() => $_ensure(5);
}

/// Version 1 smart contract instance information.
class InstanceInfo_V1 extends $pb.GeneratedMessage {
  factory InstanceInfo_V1({
    AccountAddress? owner,
    Amount? amount,
    $core.Iterable<ReceiveName>? methods,
    InitName? name,
    ModuleRef? sourceModule,
  }) {
    final $result = create();
    if (owner != null) {
      $result.owner = owner;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (methods != null) {
      $result.methods.addAll(methods);
    }
    if (name != null) {
      $result.name = name;
    }
    if (sourceModule != null) {
      $result.sourceModule = sourceModule;
    }
    return $result;
  }
  InstanceInfo_V1._() : super();
  factory InstanceInfo_V1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceInfo_V1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceInfo.V1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'owner', subBuilder: AccountAddress.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..pc<ReceiveName>(4, _omitFieldNames ? '' : 'methods', $pb.PbFieldType.PM, subBuilder: ReceiveName.create)
    ..aOM<InitName>(5, _omitFieldNames ? '' : 'name', subBuilder: InitName.create)
    ..aOM<ModuleRef>(6, _omitFieldNames ? '' : 'sourceModule', subBuilder: ModuleRef.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceInfo_V1 clone() => InstanceInfo_V1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceInfo_V1 copyWith(void Function(InstanceInfo_V1) updates) => super.copyWith((message) => updates(message as InstanceInfo_V1)) as InstanceInfo_V1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceInfo_V1 create() => InstanceInfo_V1._();
  InstanceInfo_V1 createEmptyInstance() => create();
  static $pb.PbList<InstanceInfo_V1> createRepeated() => $pb.PbList<InstanceInfo_V1>();
  @$core.pragma('dart2js:noInline')
  static InstanceInfo_V1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceInfo_V1>(create);
  static InstanceInfo_V1? _defaultInstance;

  /// The account address which deployed the instance.
  @$pb.TagNumber(2)
  AccountAddress get owner => $_getN(0);
  @$pb.TagNumber(2)
  set owner(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOwner() => $_has(0);
  @$pb.TagNumber(2)
  void clearOwner() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureOwner() => $_ensure(0);

  /// The amount of CCD tokens in the balance of the instance.
  @$pb.TagNumber(3)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(3)
  set amount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(3)
  void clearAmount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureAmount() => $_ensure(1);

  /// A list of endpoints exposed by the instance.
  @$pb.TagNumber(4)
  $core.List<ReceiveName> get methods => $_getList(2);

  /// The name of the smart contract of the instance.
  @$pb.TagNumber(5)
  InitName get name => $_getN(3);
  @$pb.TagNumber(5)
  set name(InitName v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasName() => $_has(3);
  @$pb.TagNumber(5)
  void clearName() => clearField(5);
  @$pb.TagNumber(5)
  InitName ensureName() => $_ensure(3);

  /// The module reference for the smart contract module of the instance.
  @$pb.TagNumber(6)
  ModuleRef get sourceModule => $_getN(4);
  @$pb.TagNumber(6)
  set sourceModule(ModuleRef v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasSourceModule() => $_has(4);
  @$pb.TagNumber(6)
  void clearSourceModule() => clearField(6);
  @$pb.TagNumber(6)
  ModuleRef ensureSourceModule() => $_ensure(4);
}

enum InstanceInfo_Version {
  v0, 
  v1, 
  notSet
}

/// Information about a smart contract instance.
class InstanceInfo extends $pb.GeneratedMessage {
  factory InstanceInfo({
    InstanceInfo_V0? v0,
    InstanceInfo_V1? v1,
  }) {
    final $result = create();
    if (v0 != null) {
      $result.v0 = v0;
    }
    if (v1 != null) {
      $result.v1 = v1;
    }
    return $result;
  }
  InstanceInfo._() : super();
  factory InstanceInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, InstanceInfo_Version> _InstanceInfo_VersionByTag = {
    1 : InstanceInfo_Version.v0,
    2 : InstanceInfo_Version.v1,
    0 : InstanceInfo_Version.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<InstanceInfo_V0>(1, _omitFieldNames ? '' : 'v0', subBuilder: InstanceInfo_V0.create)
    ..aOM<InstanceInfo_V1>(2, _omitFieldNames ? '' : 'v1', subBuilder: InstanceInfo_V1.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceInfo clone() => InstanceInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceInfo copyWith(void Function(InstanceInfo) updates) => super.copyWith((message) => updates(message as InstanceInfo)) as InstanceInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceInfo create() => InstanceInfo._();
  InstanceInfo createEmptyInstance() => create();
  static $pb.PbList<InstanceInfo> createRepeated() => $pb.PbList<InstanceInfo>();
  @$core.pragma('dart2js:noInline')
  static InstanceInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceInfo>(create);
  static InstanceInfo? _defaultInstance;

  InstanceInfo_Version whichVersion() => _InstanceInfo_VersionByTag[$_whichOneof(0)]!;
  void clearVersion() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  InstanceInfo_V0 get v0 => $_getN(0);
  @$pb.TagNumber(1)
  set v0(InstanceInfo_V0 v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasV0() => $_has(0);
  @$pb.TagNumber(1)
  void clearV0() => clearField(1);
  @$pb.TagNumber(1)
  InstanceInfo_V0 ensureV0() => $_ensure(0);

  @$pb.TagNumber(2)
  InstanceInfo_V1 get v1 => $_getN(1);
  @$pb.TagNumber(2)
  set v1(InstanceInfo_V1 v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasV1() => $_has(1);
  @$pb.TagNumber(2)
  void clearV1() => clearField(2);
  @$pb.TagNumber(2)
  InstanceInfo_V1 ensureV1() => $_ensure(1);
}

/// A smart contract instance key-value pair.
class InstanceStateKVPair extends $pb.GeneratedMessage {
  factory InstanceStateKVPair({
    $core.List<$core.int>? key,
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (key != null) {
      $result.key = key;
    }
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  InstanceStateKVPair._() : super();
  factory InstanceStateKVPair.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceStateKVPair.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceStateKVPair', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'key', $pb.PbFieldType.OY)
    ..a<$core.List<$core.int>>(2, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceStateKVPair clone() => InstanceStateKVPair()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceStateKVPair copyWith(void Function(InstanceStateKVPair) updates) => super.copyWith((message) => updates(message as InstanceStateKVPair)) as InstanceStateKVPair;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceStateKVPair create() => InstanceStateKVPair._();
  InstanceStateKVPair createEmptyInstance() => create();
  static $pb.PbList<InstanceStateKVPair> createRepeated() => $pb.PbList<InstanceStateKVPair>();
  @$core.pragma('dart2js:noInline')
  static InstanceStateKVPair getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceStateKVPair>(create);
  static InstanceStateKVPair? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get key => $_getN(0);
  @$pb.TagNumber(1)
  set key($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasKey() => $_has(0);
  @$pb.TagNumber(1)
  void clearKey() => clearField(1);

  @$pb.TagNumber(2)
  $core.List<$core.int> get value => $_getN(1);
  @$pb.TagNumber(2)
  set value($core.List<$core.int> v) { $_setBytes(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasValue() => $_has(1);
  @$pb.TagNumber(2)
  void clearValue() => clearField(2);
}

/// Request for a specific key of a smart contract instance state.
class InstanceStateLookupRequest extends $pb.GeneratedMessage {
  factory InstanceStateLookupRequest({
    BlockHashInput? blockHash,
    ContractAddress? address,
    $core.List<$core.int>? key,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (address != null) {
      $result.address = address;
    }
    if (key != null) {
      $result.key = key;
    }
    return $result;
  }
  InstanceStateLookupRequest._() : super();
  factory InstanceStateLookupRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceStateLookupRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceStateLookupRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..a<$core.List<$core.int>>(3, _omitFieldNames ? '' : 'key', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceStateLookupRequest clone() => InstanceStateLookupRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceStateLookupRequest copyWith(void Function(InstanceStateLookupRequest) updates) => super.copyWith((message) => updates(message as InstanceStateLookupRequest)) as InstanceStateLookupRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceStateLookupRequest create() => InstanceStateLookupRequest._();
  InstanceStateLookupRequest createEmptyInstance() => create();
  static $pb.PbList<InstanceStateLookupRequest> createRepeated() => $pb.PbList<InstanceStateLookupRequest>();
  @$core.pragma('dart2js:noInline')
  static InstanceStateLookupRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceStateLookupRequest>(create);
  static InstanceStateLookupRequest? _defaultInstance;

  /// The block to be used for the query.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// The address of the smart contract instance.
  @$pb.TagNumber(2)
  ContractAddress get address => $_getN(1);
  @$pb.TagNumber(2)
  set address(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearAddress() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureAddress() => $_ensure(1);

  /// Key to look up. If the instance is a V0 instance then this will not be used.
  @$pb.TagNumber(3)
  $core.List<$core.int> get key => $_getN(2);
  @$pb.TagNumber(3)
  set key($core.List<$core.int> v) { $_setBytes(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasKey() => $_has(2);
  @$pb.TagNumber(3)
  void clearKey() => clearField(3);
}

/// Value at the requested key of a smart contract instance state. For V0
/// contracts this will always be the entire state of the contract.
class InstanceStateValueAtKey extends $pb.GeneratedMessage {
  factory InstanceStateValueAtKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  InstanceStateValueAtKey._() : super();
  factory InstanceStateValueAtKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceStateValueAtKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceStateValueAtKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceStateValueAtKey clone() => InstanceStateValueAtKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceStateValueAtKey copyWith(void Function(InstanceStateValueAtKey) updates) => super.copyWith((message) => updates(message as InstanceStateValueAtKey)) as InstanceStateValueAtKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceStateValueAtKey create() => InstanceStateValueAtKey._();
  InstanceStateValueAtKey createEmptyInstance() => create();
  static $pb.PbList<InstanceStateValueAtKey> createRepeated() => $pb.PbList<InstanceStateValueAtKey>();
  @$core.pragma('dart2js:noInline')
  static InstanceStateValueAtKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceStateValueAtKey>(create);
  static InstanceStateValueAtKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The receive name of a smart contract function. Expected format:
/// `<contract_name>.<func_name>`. It must only consist of atmost 100 ASCII
/// alphanumeric or punctuation characters, and must contain a '.'.
class ReceiveName extends $pb.GeneratedMessage {
  factory ReceiveName({
    $core.String? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ReceiveName._() : super();
  factory ReceiveName.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ReceiveName.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ReceiveName', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'value')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ReceiveName clone() => ReceiveName()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ReceiveName copyWith(void Function(ReceiveName) updates) => super.copyWith((message) => updates(message as ReceiveName)) as ReceiveName;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ReceiveName create() => ReceiveName._();
  ReceiveName createEmptyInstance() => create();
  static $pb.PbList<ReceiveName> createRepeated() => $pb.PbList<ReceiveName>();
  @$core.pragma('dart2js:noInline')
  static ReceiveName getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ReceiveName>(create);
  static ReceiveName? _defaultInstance;

  @$pb.TagNumber(1)
  $core.String get value => $_getSZ(0);
  @$pb.TagNumber(1)
  set value($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The init name of a smart contract function. Expected format:
/// `init_<contract_name>`. It must only consist of atmost 100 ASCII alphanumeric
/// or punctuation characters, must not contain a '.' and must start with
/// 'init_'.
class InitName extends $pb.GeneratedMessage {
  factory InitName({
    $core.String? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  InitName._() : super();
  factory InitName.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InitName.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InitName', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'value')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InitName clone() => InitName()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InitName copyWith(void Function(InitName) updates) => super.copyWith((message) => updates(message as InitName)) as InitName;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InitName create() => InitName._();
  InitName createEmptyInstance() => create();
  static $pb.PbList<InitName> createRepeated() => $pb.PbList<InitName>();
  @$core.pragma('dart2js:noInline')
  static InitName getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InitName>(create);
  static InitName? _defaultInstance;

  @$pb.TagNumber(1)
  $core.String get value => $_getSZ(0);
  @$pb.TagNumber(1)
  set value($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Parameter to a smart contract initialization or invocation.
class Parameter extends $pb.GeneratedMessage {
  factory Parameter({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Parameter._() : super();
  factory Parameter.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Parameter.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Parameter', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Parameter clone() => Parameter()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Parameter copyWith(void Function(Parameter) updates) => super.copyWith((message) => updates(message as Parameter)) as Parameter;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Parameter create() => Parameter._();
  Parameter createEmptyInstance() => create();
  static $pb.PbList<Parameter> createRepeated() => $pb.PbList<Parameter>();
  @$core.pragma('dart2js:noInline')
  static Parameter getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Parameter>(create);
  static Parameter? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A smart contract v0 state.
class ContractStateV0 extends $pb.GeneratedMessage {
  factory ContractStateV0({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ContractStateV0._() : super();
  factory ContractStateV0.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractStateV0.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractStateV0', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractStateV0 clone() => ContractStateV0()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractStateV0 copyWith(void Function(ContractStateV0) updates) => super.copyWith((message) => updates(message as ContractStateV0)) as ContractStateV0;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractStateV0 create() => ContractStateV0._();
  ContractStateV0 createEmptyInstance() => create();
  static $pb.PbList<ContractStateV0> createRepeated() => $pb.PbList<ContractStateV0>();
  @$core.pragma('dart2js:noInline')
  static ContractStateV0 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractStateV0>(create);
  static ContractStateV0? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

class BlockItemStatus_Committed extends $pb.GeneratedMessage {
  factory BlockItemStatus_Committed({
    $core.Iterable<BlockItemSummaryInBlock>? outcomes,
  }) {
    final $result = create();
    if (outcomes != null) {
      $result.outcomes.addAll(outcomes);
    }
    return $result;
  }
  BlockItemStatus_Committed._() : super();
  factory BlockItemStatus_Committed.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockItemStatus_Committed.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockItemStatus.Committed', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<BlockItemSummaryInBlock>(1, _omitFieldNames ? '' : 'outcomes', $pb.PbFieldType.PM, subBuilder: BlockItemSummaryInBlock.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockItemStatus_Committed clone() => BlockItemStatus_Committed()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockItemStatus_Committed copyWith(void Function(BlockItemStatus_Committed) updates) => super.copyWith((message) => updates(message as BlockItemStatus_Committed)) as BlockItemStatus_Committed;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockItemStatus_Committed create() => BlockItemStatus_Committed._();
  BlockItemStatus_Committed createEmptyInstance() => create();
  static $pb.PbList<BlockItemStatus_Committed> createRepeated() => $pb.PbList<BlockItemStatus_Committed>();
  @$core.pragma('dart2js:noInline')
  static BlockItemStatus_Committed getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockItemStatus_Committed>(create);
  static BlockItemStatus_Committed? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<BlockItemSummaryInBlock> get outcomes => $_getList(0);
}

class BlockItemStatus_Finalized extends $pb.GeneratedMessage {
  factory BlockItemStatus_Finalized({
    BlockItemSummaryInBlock? outcome,
  }) {
    final $result = create();
    if (outcome != null) {
      $result.outcome = outcome;
    }
    return $result;
  }
  BlockItemStatus_Finalized._() : super();
  factory BlockItemStatus_Finalized.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockItemStatus_Finalized.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockItemStatus.Finalized', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockItemSummaryInBlock>(1, _omitFieldNames ? '' : 'outcome', subBuilder: BlockItemSummaryInBlock.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockItemStatus_Finalized clone() => BlockItemStatus_Finalized()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockItemStatus_Finalized copyWith(void Function(BlockItemStatus_Finalized) updates) => super.copyWith((message) => updates(message as BlockItemStatus_Finalized)) as BlockItemStatus_Finalized;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockItemStatus_Finalized create() => BlockItemStatus_Finalized._();
  BlockItemStatus_Finalized createEmptyInstance() => create();
  static $pb.PbList<BlockItemStatus_Finalized> createRepeated() => $pb.PbList<BlockItemStatus_Finalized>();
  @$core.pragma('dart2js:noInline')
  static BlockItemStatus_Finalized getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockItemStatus_Finalized>(create);
  static BlockItemStatus_Finalized? _defaultInstance;

  @$pb.TagNumber(1)
  BlockItemSummaryInBlock get outcome => $_getN(0);
  @$pb.TagNumber(1)
  set outcome(BlockItemSummaryInBlock v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasOutcome() => $_has(0);
  @$pb.TagNumber(1)
  void clearOutcome() => clearField(1);
  @$pb.TagNumber(1)
  BlockItemSummaryInBlock ensureOutcome() => $_ensure(0);
}

enum BlockItemStatus_Status {
  received, 
  committed, 
  finalized, 
  notSet
}

/// Status of a block item known to the node.
class BlockItemStatus extends $pb.GeneratedMessage {
  factory BlockItemStatus({
    Empty? received,
    BlockItemStatus_Committed? committed,
    BlockItemStatus_Finalized? finalized,
  }) {
    final $result = create();
    if (received != null) {
      $result.received = received;
    }
    if (committed != null) {
      $result.committed = committed;
    }
    if (finalized != null) {
      $result.finalized = finalized;
    }
    return $result;
  }
  BlockItemStatus._() : super();
  factory BlockItemStatus.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockItemStatus.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BlockItemStatus_Status> _BlockItemStatus_StatusByTag = {
    1 : BlockItemStatus_Status.received,
    2 : BlockItemStatus_Status.committed,
    3 : BlockItemStatus_Status.finalized,
    0 : BlockItemStatus_Status.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockItemStatus', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<Empty>(1, _omitFieldNames ? '' : 'received', subBuilder: Empty.create)
    ..aOM<BlockItemStatus_Committed>(2, _omitFieldNames ? '' : 'committed', subBuilder: BlockItemStatus_Committed.create)
    ..aOM<BlockItemStatus_Finalized>(3, _omitFieldNames ? '' : 'finalized', subBuilder: BlockItemStatus_Finalized.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockItemStatus clone() => BlockItemStatus()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockItemStatus copyWith(void Function(BlockItemStatus) updates) => super.copyWith((message) => updates(message as BlockItemStatus)) as BlockItemStatus;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockItemStatus create() => BlockItemStatus._();
  BlockItemStatus createEmptyInstance() => create();
  static $pb.PbList<BlockItemStatus> createRepeated() => $pb.PbList<BlockItemStatus>();
  @$core.pragma('dart2js:noInline')
  static BlockItemStatus getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockItemStatus>(create);
  static BlockItemStatus? _defaultInstance;

  BlockItemStatus_Status whichStatus() => _BlockItemStatus_StatusByTag[$_whichOneof(0)]!;
  void clearStatus() => clearField($_whichOneof(0));

  /// Block item is received, but not yet in any blocks.
  @$pb.TagNumber(1)
  Empty get received => $_getN(0);
  @$pb.TagNumber(1)
  set received(Empty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasReceived() => $_has(0);
  @$pb.TagNumber(1)
  void clearReceived() => clearField(1);
  @$pb.TagNumber(1)
  Empty ensureReceived() => $_ensure(0);

  /// Block item is committed to one or more blocks. The outcomes are listed
  /// for each block. Note that in the vast majority of cases the outcome of a
  /// transaction should not be dependent on the block it is in, but this
  /// can in principle happen.
  @$pb.TagNumber(2)
  BlockItemStatus_Committed get committed => $_getN(1);
  @$pb.TagNumber(2)
  set committed(BlockItemStatus_Committed v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCommitted() => $_has(1);
  @$pb.TagNumber(2)
  void clearCommitted() => clearField(2);
  @$pb.TagNumber(2)
  BlockItemStatus_Committed ensureCommitted() => $_ensure(1);

  /// Block item is finalized in the given block, with the given summary.
  @$pb.TagNumber(3)
  BlockItemStatus_Finalized get finalized => $_getN(2);
  @$pb.TagNumber(3)
  set finalized(BlockItemStatus_Finalized v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasFinalized() => $_has(2);
  @$pb.TagNumber(3)
  void clearFinalized() => clearField(3);
  @$pb.TagNumber(3)
  BlockItemStatus_Finalized ensureFinalized() => $_ensure(2);
}

/// A block item summary together with a block hash. Used in BlockItemStatus.
class BlockItemSummaryInBlock extends $pb.GeneratedMessage {
  factory BlockItemSummaryInBlock({
    BlockHash? blockHash,
    BlockItemSummary? outcome,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (outcome != null) {
      $result.outcome = outcome;
    }
    return $result;
  }
  BlockItemSummaryInBlock._() : super();
  factory BlockItemSummaryInBlock.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockItemSummaryInBlock.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockItemSummaryInBlock', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHash.create)
    ..aOM<BlockItemSummary>(2, _omitFieldNames ? '' : 'outcome', subBuilder: BlockItemSummary.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockItemSummaryInBlock clone() => BlockItemSummaryInBlock()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockItemSummaryInBlock copyWith(void Function(BlockItemSummaryInBlock) updates) => super.copyWith((message) => updates(message as BlockItemSummaryInBlock)) as BlockItemSummaryInBlock;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockItemSummaryInBlock create() => BlockItemSummaryInBlock._();
  BlockItemSummaryInBlock createEmptyInstance() => create();
  static $pb.PbList<BlockItemSummaryInBlock> createRepeated() => $pb.PbList<BlockItemSummaryInBlock>();
  @$core.pragma('dart2js:noInline')
  static BlockItemSummaryInBlock getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockItemSummaryInBlock>(create);
  static BlockItemSummaryInBlock? _defaultInstance;

  /// The block hash.
  @$pb.TagNumber(1)
  BlockHash get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureBlockHash() => $_ensure(0);

  /// The block item summary.
  @$pb.TagNumber(2)
  BlockItemSummary get outcome => $_getN(1);
  @$pb.TagNumber(2)
  set outcome(BlockItemSummary v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOutcome() => $_has(1);
  @$pb.TagNumber(2)
  void clearOutcome() => clearField(2);
  @$pb.TagNumber(2)
  BlockItemSummary ensureOutcome() => $_ensure(1);
}

/// Energy is used to count exact execution cost.
/// This cost is then converted to CCD amounts.
class Energy extends $pb.GeneratedMessage {
  factory Energy({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Energy._() : super();
  factory Energy.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Energy.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Energy', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Energy clone() => Energy()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Energy copyWith(void Function(Energy) updates) => super.copyWith((message) => updates(message as Energy)) as Energy;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Energy create() => Energy._();
  Energy createEmptyInstance() => create();
  static $pb.PbList<Energy> createRepeated() => $pb.PbList<Energy>();
  @$core.pragma('dart2js:noInline')
  static Energy getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Energy>(create);
  static Energy? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A number representing a slot for baking a block.
class Slot extends $pb.GeneratedMessage {
  factory Slot({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Slot._() : super();
  factory Slot.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Slot.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Slot', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Slot clone() => Slot()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Slot copyWith(void Function(Slot) updates) => super.copyWith((message) => updates(message as Slot)) as Slot;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Slot create() => Slot._();
  Slot createEmptyInstance() => create();
  static $pb.PbList<Slot> createRepeated() => $pb.PbList<Slot>();
  @$core.pragma('dart2js:noInline')
  static Slot getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Slot>(create);
  static Slot? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The response for getNextAccountSequenceNumber.
class NextAccountSequenceNumber extends $pb.GeneratedMessage {
  factory NextAccountSequenceNumber({
    SequenceNumber? sequenceNumber,
    $core.bool? allFinal,
  }) {
    final $result = create();
    if (sequenceNumber != null) {
      $result.sequenceNumber = sequenceNumber;
    }
    if (allFinal != null) {
      $result.allFinal = allFinal;
    }
    return $result;
  }
  NextAccountSequenceNumber._() : super();
  factory NextAccountSequenceNumber.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NextAccountSequenceNumber.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NextAccountSequenceNumber', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<SequenceNumber>(1, _omitFieldNames ? '' : 'sequenceNumber', subBuilder: SequenceNumber.create)
    ..aOB(2, _omitFieldNames ? '' : 'allFinal')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NextAccountSequenceNumber clone() => NextAccountSequenceNumber()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NextAccountSequenceNumber copyWith(void Function(NextAccountSequenceNumber) updates) => super.copyWith((message) => updates(message as NextAccountSequenceNumber)) as NextAccountSequenceNumber;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NextAccountSequenceNumber create() => NextAccountSequenceNumber._();
  NextAccountSequenceNumber createEmptyInstance() => create();
  static $pb.PbList<NextAccountSequenceNumber> createRepeated() => $pb.PbList<NextAccountSequenceNumber>();
  @$core.pragma('dart2js:noInline')
  static NextAccountSequenceNumber getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NextAccountSequenceNumber>(create);
  static NextAccountSequenceNumber? _defaultInstance;

  /// The best guess for the available account sequence number.
  @$pb.TagNumber(1)
  SequenceNumber get sequenceNumber => $_getN(0);
  @$pb.TagNumber(1)
  set sequenceNumber(SequenceNumber v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSequenceNumber() => $_has(0);
  @$pb.TagNumber(1)
  void clearSequenceNumber() => clearField(1);
  @$pb.TagNumber(1)
  SequenceNumber ensureSequenceNumber() => $_ensure(0);

  /// Whether the guess relies on any non-finalized transactions. If true all of the relevant transactions are finalized.
  @$pb.TagNumber(2)
  $core.bool get allFinal => $_getBF(1);
  @$pb.TagNumber(2)
  set allFinal($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasAllFinal() => $_has(1);
  @$pb.TagNumber(2)
  void clearAllFinal() => clearField(2);
}

/// A duration of milliseconds.
class Duration extends $pb.GeneratedMessage {
  factory Duration({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Duration._() : super();
  factory Duration.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Duration.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Duration', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Duration clone() => Duration()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Duration copyWith(void Function(Duration) updates) => super.copyWith((message) => updates(message as Duration)) as Duration;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Duration create() => Duration._();
  Duration createEmptyInstance() => create();
  static $pb.PbList<Duration> createRepeated() => $pb.PbList<Duration>();
  @$core.pragma('dart2js:noInline')
  static Duration getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Duration>(create);
  static Duration? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

class RejectReason_InvalidInitMethod extends $pb.GeneratedMessage {
  factory RejectReason_InvalidInitMethod({
    ModuleRef? moduleRef,
    InitName? initName,
  }) {
    final $result = create();
    if (moduleRef != null) {
      $result.moduleRef = moduleRef;
    }
    if (initName != null) {
      $result.initName = initName;
    }
    return $result;
  }
  RejectReason_InvalidInitMethod._() : super();
  factory RejectReason_InvalidInitMethod.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason_InvalidInitMethod.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason.InvalidInitMethod', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ModuleRef>(1, _omitFieldNames ? '' : 'moduleRef', subBuilder: ModuleRef.create)
    ..aOM<InitName>(2, _omitFieldNames ? '' : 'initName', subBuilder: InitName.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason_InvalidInitMethod clone() => RejectReason_InvalidInitMethod()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason_InvalidInitMethod copyWith(void Function(RejectReason_InvalidInitMethod) updates) => super.copyWith((message) => updates(message as RejectReason_InvalidInitMethod)) as RejectReason_InvalidInitMethod;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason_InvalidInitMethod create() => RejectReason_InvalidInitMethod._();
  RejectReason_InvalidInitMethod createEmptyInstance() => create();
  static $pb.PbList<RejectReason_InvalidInitMethod> createRepeated() => $pb.PbList<RejectReason_InvalidInitMethod>();
  @$core.pragma('dart2js:noInline')
  static RejectReason_InvalidInitMethod getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason_InvalidInitMethod>(create);
  static RejectReason_InvalidInitMethod? _defaultInstance;

  @$pb.TagNumber(1)
  ModuleRef get moduleRef => $_getN(0);
  @$pb.TagNumber(1)
  set moduleRef(ModuleRef v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasModuleRef() => $_has(0);
  @$pb.TagNumber(1)
  void clearModuleRef() => clearField(1);
  @$pb.TagNumber(1)
  ModuleRef ensureModuleRef() => $_ensure(0);

  @$pb.TagNumber(2)
  InitName get initName => $_getN(1);
  @$pb.TagNumber(2)
  set initName(InitName v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasInitName() => $_has(1);
  @$pb.TagNumber(2)
  void clearInitName() => clearField(2);
  @$pb.TagNumber(2)
  InitName ensureInitName() => $_ensure(1);
}

class RejectReason_InvalidReceiveMethod extends $pb.GeneratedMessage {
  factory RejectReason_InvalidReceiveMethod({
    ModuleRef? moduleRef,
    ReceiveName? receiveName,
  }) {
    final $result = create();
    if (moduleRef != null) {
      $result.moduleRef = moduleRef;
    }
    if (receiveName != null) {
      $result.receiveName = receiveName;
    }
    return $result;
  }
  RejectReason_InvalidReceiveMethod._() : super();
  factory RejectReason_InvalidReceiveMethod.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason_InvalidReceiveMethod.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason.InvalidReceiveMethod', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ModuleRef>(1, _omitFieldNames ? '' : 'moduleRef', subBuilder: ModuleRef.create)
    ..aOM<ReceiveName>(2, _omitFieldNames ? '' : 'receiveName', subBuilder: ReceiveName.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason_InvalidReceiveMethod clone() => RejectReason_InvalidReceiveMethod()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason_InvalidReceiveMethod copyWith(void Function(RejectReason_InvalidReceiveMethod) updates) => super.copyWith((message) => updates(message as RejectReason_InvalidReceiveMethod)) as RejectReason_InvalidReceiveMethod;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason_InvalidReceiveMethod create() => RejectReason_InvalidReceiveMethod._();
  RejectReason_InvalidReceiveMethod createEmptyInstance() => create();
  static $pb.PbList<RejectReason_InvalidReceiveMethod> createRepeated() => $pb.PbList<RejectReason_InvalidReceiveMethod>();
  @$core.pragma('dart2js:noInline')
  static RejectReason_InvalidReceiveMethod getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason_InvalidReceiveMethod>(create);
  static RejectReason_InvalidReceiveMethod? _defaultInstance;

  @$pb.TagNumber(1)
  ModuleRef get moduleRef => $_getN(0);
  @$pb.TagNumber(1)
  set moduleRef(ModuleRef v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasModuleRef() => $_has(0);
  @$pb.TagNumber(1)
  void clearModuleRef() => clearField(1);
  @$pb.TagNumber(1)
  ModuleRef ensureModuleRef() => $_ensure(0);

  @$pb.TagNumber(2)
  ReceiveName get receiveName => $_getN(1);
  @$pb.TagNumber(2)
  set receiveName(ReceiveName v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasReceiveName() => $_has(1);
  @$pb.TagNumber(2)
  void clearReceiveName() => clearField(2);
  @$pb.TagNumber(2)
  ReceiveName ensureReceiveName() => $_ensure(1);
}

class RejectReason_AmountTooLarge extends $pb.GeneratedMessage {
  factory RejectReason_AmountTooLarge({
    Address? address,
    Amount? amount,
  }) {
    final $result = create();
    if (address != null) {
      $result.address = address;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    return $result;
  }
  RejectReason_AmountTooLarge._() : super();
  factory RejectReason_AmountTooLarge.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason_AmountTooLarge.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason.AmountTooLarge', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Address>(1, _omitFieldNames ? '' : 'address', subBuilder: Address.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason_AmountTooLarge clone() => RejectReason_AmountTooLarge()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason_AmountTooLarge copyWith(void Function(RejectReason_AmountTooLarge) updates) => super.copyWith((message) => updates(message as RejectReason_AmountTooLarge)) as RejectReason_AmountTooLarge;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason_AmountTooLarge create() => RejectReason_AmountTooLarge._();
  RejectReason_AmountTooLarge createEmptyInstance() => create();
  static $pb.PbList<RejectReason_AmountTooLarge> createRepeated() => $pb.PbList<RejectReason_AmountTooLarge>();
  @$core.pragma('dart2js:noInline')
  static RejectReason_AmountTooLarge getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason_AmountTooLarge>(create);
  static RejectReason_AmountTooLarge? _defaultInstance;

  @$pb.TagNumber(1)
  Address get address => $_getN(0);
  @$pb.TagNumber(1)
  set address(Address v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAddress() => $_has(0);
  @$pb.TagNumber(1)
  void clearAddress() => clearField(1);
  @$pb.TagNumber(1)
  Address ensureAddress() => $_ensure(0);

  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);
}

class RejectReason_RejectedInit extends $pb.GeneratedMessage {
  factory RejectReason_RejectedInit({
    $core.int? rejectReason,
  }) {
    final $result = create();
    if (rejectReason != null) {
      $result.rejectReason = rejectReason;
    }
    return $result;
  }
  RejectReason_RejectedInit._() : super();
  factory RejectReason_RejectedInit.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason_RejectedInit.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason.RejectedInit', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'rejectReason', $pb.PbFieldType.O3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason_RejectedInit clone() => RejectReason_RejectedInit()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason_RejectedInit copyWith(void Function(RejectReason_RejectedInit) updates) => super.copyWith((message) => updates(message as RejectReason_RejectedInit)) as RejectReason_RejectedInit;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason_RejectedInit create() => RejectReason_RejectedInit._();
  RejectReason_RejectedInit createEmptyInstance() => create();
  static $pb.PbList<RejectReason_RejectedInit> createRepeated() => $pb.PbList<RejectReason_RejectedInit>();
  @$core.pragma('dart2js:noInline')
  static RejectReason_RejectedInit getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason_RejectedInit>(create);
  static RejectReason_RejectedInit? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get rejectReason => $_getIZ(0);
  @$pb.TagNumber(1)
  set rejectReason($core.int v) { $_setSignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasRejectReason() => $_has(0);
  @$pb.TagNumber(1)
  void clearRejectReason() => clearField(1);
}

class RejectReason_RejectedReceive extends $pb.GeneratedMessage {
  factory RejectReason_RejectedReceive({
    $core.int? rejectReason,
    ContractAddress? contractAddress,
    ReceiveName? receiveName,
    Parameter? parameter,
  }) {
    final $result = create();
    if (rejectReason != null) {
      $result.rejectReason = rejectReason;
    }
    if (contractAddress != null) {
      $result.contractAddress = contractAddress;
    }
    if (receiveName != null) {
      $result.receiveName = receiveName;
    }
    if (parameter != null) {
      $result.parameter = parameter;
    }
    return $result;
  }
  RejectReason_RejectedReceive._() : super();
  factory RejectReason_RejectedReceive.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason_RejectedReceive.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason.RejectedReceive', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'rejectReason', $pb.PbFieldType.O3)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'contractAddress', subBuilder: ContractAddress.create)
    ..aOM<ReceiveName>(3, _omitFieldNames ? '' : 'receiveName', subBuilder: ReceiveName.create)
    ..aOM<Parameter>(4, _omitFieldNames ? '' : 'parameter', subBuilder: Parameter.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason_RejectedReceive clone() => RejectReason_RejectedReceive()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason_RejectedReceive copyWith(void Function(RejectReason_RejectedReceive) updates) => super.copyWith((message) => updates(message as RejectReason_RejectedReceive)) as RejectReason_RejectedReceive;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason_RejectedReceive create() => RejectReason_RejectedReceive._();
  RejectReason_RejectedReceive createEmptyInstance() => create();
  static $pb.PbList<RejectReason_RejectedReceive> createRepeated() => $pb.PbList<RejectReason_RejectedReceive>();
  @$core.pragma('dart2js:noInline')
  static RejectReason_RejectedReceive getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason_RejectedReceive>(create);
  static RejectReason_RejectedReceive? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get rejectReason => $_getIZ(0);
  @$pb.TagNumber(1)
  set rejectReason($core.int v) { $_setSignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasRejectReason() => $_has(0);
  @$pb.TagNumber(1)
  void clearRejectReason() => clearField(1);

  @$pb.TagNumber(2)
  ContractAddress get contractAddress => $_getN(1);
  @$pb.TagNumber(2)
  set contractAddress(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasContractAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearContractAddress() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureContractAddress() => $_ensure(1);

  @$pb.TagNumber(3)
  ReceiveName get receiveName => $_getN(2);
  @$pb.TagNumber(3)
  set receiveName(ReceiveName v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasReceiveName() => $_has(2);
  @$pb.TagNumber(3)
  void clearReceiveName() => clearField(3);
  @$pb.TagNumber(3)
  ReceiveName ensureReceiveName() => $_ensure(2);

  @$pb.TagNumber(4)
  Parameter get parameter => $_getN(3);
  @$pb.TagNumber(4)
  set parameter(Parameter v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasParameter() => $_has(3);
  @$pb.TagNumber(4)
  void clearParameter() => clearField(4);
  @$pb.TagNumber(4)
  Parameter ensureParameter() => $_ensure(3);
}

class RejectReason_DuplicateCredIds extends $pb.GeneratedMessage {
  factory RejectReason_DuplicateCredIds({
    $core.Iterable<CredentialRegistrationId>? ids,
  }) {
    final $result = create();
    if (ids != null) {
      $result.ids.addAll(ids);
    }
    return $result;
  }
  RejectReason_DuplicateCredIds._() : super();
  factory RejectReason_DuplicateCredIds.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason_DuplicateCredIds.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason.DuplicateCredIds', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<CredentialRegistrationId>(1, _omitFieldNames ? '' : 'ids', $pb.PbFieldType.PM, subBuilder: CredentialRegistrationId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason_DuplicateCredIds clone() => RejectReason_DuplicateCredIds()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason_DuplicateCredIds copyWith(void Function(RejectReason_DuplicateCredIds) updates) => super.copyWith((message) => updates(message as RejectReason_DuplicateCredIds)) as RejectReason_DuplicateCredIds;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason_DuplicateCredIds create() => RejectReason_DuplicateCredIds._();
  RejectReason_DuplicateCredIds createEmptyInstance() => create();
  static $pb.PbList<RejectReason_DuplicateCredIds> createRepeated() => $pb.PbList<RejectReason_DuplicateCredIds>();
  @$core.pragma('dart2js:noInline')
  static RejectReason_DuplicateCredIds getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason_DuplicateCredIds>(create);
  static RejectReason_DuplicateCredIds? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<CredentialRegistrationId> get ids => $_getList(0);
}

class RejectReason_NonExistentCredIds extends $pb.GeneratedMessage {
  factory RejectReason_NonExistentCredIds({
    $core.Iterable<CredentialRegistrationId>? ids,
  }) {
    final $result = create();
    if (ids != null) {
      $result.ids.addAll(ids);
    }
    return $result;
  }
  RejectReason_NonExistentCredIds._() : super();
  factory RejectReason_NonExistentCredIds.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason_NonExistentCredIds.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason.NonExistentCredIds', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<CredentialRegistrationId>(1, _omitFieldNames ? '' : 'ids', $pb.PbFieldType.PM, subBuilder: CredentialRegistrationId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason_NonExistentCredIds clone() => RejectReason_NonExistentCredIds()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason_NonExistentCredIds copyWith(void Function(RejectReason_NonExistentCredIds) updates) => super.copyWith((message) => updates(message as RejectReason_NonExistentCredIds)) as RejectReason_NonExistentCredIds;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason_NonExistentCredIds create() => RejectReason_NonExistentCredIds._();
  RejectReason_NonExistentCredIds createEmptyInstance() => create();
  static $pb.PbList<RejectReason_NonExistentCredIds> createRepeated() => $pb.PbList<RejectReason_NonExistentCredIds>();
  @$core.pragma('dart2js:noInline')
  static RejectReason_NonExistentCredIds getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason_NonExistentCredIds>(create);
  static RejectReason_NonExistentCredIds? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<CredentialRegistrationId> get ids => $_getList(0);
}

enum RejectReason_Reason {
  moduleNotWf, 
  moduleHashAlreadyExists, 
  invalidAccountReference, 
  invalidInitMethod, 
  invalidReceiveMethod, 
  invalidModuleReference, 
  invalidContractAddress, 
  runtimeFailure, 
  amountTooLarge, 
  serializationFailure, 
  outOfEnergy, 
  rejectedInit, 
  rejectedReceive, 
  invalidProof, 
  alreadyABaker, 
  notABaker, 
  insufficientBalanceForBakerStake, 
  stakeUnderMinimumThresholdForBaking, 
  bakerInCooldown, 
  duplicateAggregationKey, 
  nonExistentCredentialId, 
  keyIndexAlreadyInUse, 
  invalidAccountThreshold, 
  invalidCredentialKeySignThreshold, 
  invalidEncryptedAmountTransferProof, 
  invalidTransferToPublicProof, 
  encryptedAmountSelfTransfer, 
  invalidIndexOnEncryptedTransfer, 
  zeroScheduledAmount, 
  nonIncreasingSchedule, 
  firstScheduledReleaseExpired, 
  scheduledSelfTransfer, 
  invalidCredentials, 
  duplicateCredIds, 
  nonExistentCredIds, 
  removeFirstCredential, 
  credentialHolderDidNotSign, 
  notAllowedMultipleCredentials, 
  notAllowedToReceiveEncrypted, 
  notAllowedToHandleEncrypted, 
  missingBakerAddParameters, 
  finalizationRewardCommissionNotInRange, 
  bakingRewardCommissionNotInRange, 
  transactionFeeCommissionNotInRange, 
  alreadyADelegator, 
  insufficientBalanceForDelegationStake, 
  missingDelegationAddParameters, 
  insufficientDelegationStake, 
  delegatorInCooldown, 
  notADelegator, 
  delegationTargetNotABaker, 
  stakeOverMaximumThresholdForPool, 
  poolWouldBecomeOverDelegated, 
  poolClosed, 
  notSet
}

/// A reason for why a transaction was rejected. Rejected means included in a
/// block, but the desired action was not achieved. The only effect of a
/// rejected transaction is payment.
class RejectReason extends $pb.GeneratedMessage {
  factory RejectReason({
    Empty? moduleNotWf,
    ModuleRef? moduleHashAlreadyExists,
    AccountAddress? invalidAccountReference,
    RejectReason_InvalidInitMethod? invalidInitMethod,
    RejectReason_InvalidReceiveMethod? invalidReceiveMethod,
    ModuleRef? invalidModuleReference,
    ContractAddress? invalidContractAddress,
    Empty? runtimeFailure,
    RejectReason_AmountTooLarge? amountTooLarge,
    Empty? serializationFailure,
    Empty? outOfEnergy,
    RejectReason_RejectedInit? rejectedInit,
    RejectReason_RejectedReceive? rejectedReceive,
    Empty? invalidProof,
    BakerId? alreadyABaker,
    AccountAddress? notABaker,
    Empty? insufficientBalanceForBakerStake,
    Empty? stakeUnderMinimumThresholdForBaking,
    Empty? bakerInCooldown,
    BakerAggregationVerifyKey? duplicateAggregationKey,
    Empty? nonExistentCredentialId,
    Empty? keyIndexAlreadyInUse,
    Empty? invalidAccountThreshold,
    Empty? invalidCredentialKeySignThreshold,
    Empty? invalidEncryptedAmountTransferProof,
    Empty? invalidTransferToPublicProof,
    AccountAddress? encryptedAmountSelfTransfer,
    Empty? invalidIndexOnEncryptedTransfer,
    Empty? zeroScheduledAmount,
    Empty? nonIncreasingSchedule,
    Empty? firstScheduledReleaseExpired,
    AccountAddress? scheduledSelfTransfer,
    Empty? invalidCredentials,
    RejectReason_DuplicateCredIds? duplicateCredIds,
    RejectReason_NonExistentCredIds? nonExistentCredIds,
    Empty? removeFirstCredential,
    Empty? credentialHolderDidNotSign,
    Empty? notAllowedMultipleCredentials,
    Empty? notAllowedToReceiveEncrypted,
    Empty? notAllowedToHandleEncrypted,
    Empty? missingBakerAddParameters,
    Empty? finalizationRewardCommissionNotInRange,
    Empty? bakingRewardCommissionNotInRange,
    Empty? transactionFeeCommissionNotInRange,
    Empty? alreadyADelegator,
    Empty? insufficientBalanceForDelegationStake,
    Empty? missingDelegationAddParameters,
    Empty? insufficientDelegationStake,
    Empty? delegatorInCooldown,
    AccountAddress? notADelegator,
    BakerId? delegationTargetNotABaker,
    Empty? stakeOverMaximumThresholdForPool,
    Empty? poolWouldBecomeOverDelegated,
    Empty? poolClosed,
  }) {
    final $result = create();
    if (moduleNotWf != null) {
      $result.moduleNotWf = moduleNotWf;
    }
    if (moduleHashAlreadyExists != null) {
      $result.moduleHashAlreadyExists = moduleHashAlreadyExists;
    }
    if (invalidAccountReference != null) {
      $result.invalidAccountReference = invalidAccountReference;
    }
    if (invalidInitMethod != null) {
      $result.invalidInitMethod = invalidInitMethod;
    }
    if (invalidReceiveMethod != null) {
      $result.invalidReceiveMethod = invalidReceiveMethod;
    }
    if (invalidModuleReference != null) {
      $result.invalidModuleReference = invalidModuleReference;
    }
    if (invalidContractAddress != null) {
      $result.invalidContractAddress = invalidContractAddress;
    }
    if (runtimeFailure != null) {
      $result.runtimeFailure = runtimeFailure;
    }
    if (amountTooLarge != null) {
      $result.amountTooLarge = amountTooLarge;
    }
    if (serializationFailure != null) {
      $result.serializationFailure = serializationFailure;
    }
    if (outOfEnergy != null) {
      $result.outOfEnergy = outOfEnergy;
    }
    if (rejectedInit != null) {
      $result.rejectedInit = rejectedInit;
    }
    if (rejectedReceive != null) {
      $result.rejectedReceive = rejectedReceive;
    }
    if (invalidProof != null) {
      $result.invalidProof = invalidProof;
    }
    if (alreadyABaker != null) {
      $result.alreadyABaker = alreadyABaker;
    }
    if (notABaker != null) {
      $result.notABaker = notABaker;
    }
    if (insufficientBalanceForBakerStake != null) {
      $result.insufficientBalanceForBakerStake = insufficientBalanceForBakerStake;
    }
    if (stakeUnderMinimumThresholdForBaking != null) {
      $result.stakeUnderMinimumThresholdForBaking = stakeUnderMinimumThresholdForBaking;
    }
    if (bakerInCooldown != null) {
      $result.bakerInCooldown = bakerInCooldown;
    }
    if (duplicateAggregationKey != null) {
      $result.duplicateAggregationKey = duplicateAggregationKey;
    }
    if (nonExistentCredentialId != null) {
      $result.nonExistentCredentialId = nonExistentCredentialId;
    }
    if (keyIndexAlreadyInUse != null) {
      $result.keyIndexAlreadyInUse = keyIndexAlreadyInUse;
    }
    if (invalidAccountThreshold != null) {
      $result.invalidAccountThreshold = invalidAccountThreshold;
    }
    if (invalidCredentialKeySignThreshold != null) {
      $result.invalidCredentialKeySignThreshold = invalidCredentialKeySignThreshold;
    }
    if (invalidEncryptedAmountTransferProof != null) {
      $result.invalidEncryptedAmountTransferProof = invalidEncryptedAmountTransferProof;
    }
    if (invalidTransferToPublicProof != null) {
      $result.invalidTransferToPublicProof = invalidTransferToPublicProof;
    }
    if (encryptedAmountSelfTransfer != null) {
      $result.encryptedAmountSelfTransfer = encryptedAmountSelfTransfer;
    }
    if (invalidIndexOnEncryptedTransfer != null) {
      $result.invalidIndexOnEncryptedTransfer = invalidIndexOnEncryptedTransfer;
    }
    if (zeroScheduledAmount != null) {
      $result.zeroScheduledAmount = zeroScheduledAmount;
    }
    if (nonIncreasingSchedule != null) {
      $result.nonIncreasingSchedule = nonIncreasingSchedule;
    }
    if (firstScheduledReleaseExpired != null) {
      $result.firstScheduledReleaseExpired = firstScheduledReleaseExpired;
    }
    if (scheduledSelfTransfer != null) {
      $result.scheduledSelfTransfer = scheduledSelfTransfer;
    }
    if (invalidCredentials != null) {
      $result.invalidCredentials = invalidCredentials;
    }
    if (duplicateCredIds != null) {
      $result.duplicateCredIds = duplicateCredIds;
    }
    if (nonExistentCredIds != null) {
      $result.nonExistentCredIds = nonExistentCredIds;
    }
    if (removeFirstCredential != null) {
      $result.removeFirstCredential = removeFirstCredential;
    }
    if (credentialHolderDidNotSign != null) {
      $result.credentialHolderDidNotSign = credentialHolderDidNotSign;
    }
    if (notAllowedMultipleCredentials != null) {
      $result.notAllowedMultipleCredentials = notAllowedMultipleCredentials;
    }
    if (notAllowedToReceiveEncrypted != null) {
      $result.notAllowedToReceiveEncrypted = notAllowedToReceiveEncrypted;
    }
    if (notAllowedToHandleEncrypted != null) {
      $result.notAllowedToHandleEncrypted = notAllowedToHandleEncrypted;
    }
    if (missingBakerAddParameters != null) {
      $result.missingBakerAddParameters = missingBakerAddParameters;
    }
    if (finalizationRewardCommissionNotInRange != null) {
      $result.finalizationRewardCommissionNotInRange = finalizationRewardCommissionNotInRange;
    }
    if (bakingRewardCommissionNotInRange != null) {
      $result.bakingRewardCommissionNotInRange = bakingRewardCommissionNotInRange;
    }
    if (transactionFeeCommissionNotInRange != null) {
      $result.transactionFeeCommissionNotInRange = transactionFeeCommissionNotInRange;
    }
    if (alreadyADelegator != null) {
      $result.alreadyADelegator = alreadyADelegator;
    }
    if (insufficientBalanceForDelegationStake != null) {
      $result.insufficientBalanceForDelegationStake = insufficientBalanceForDelegationStake;
    }
    if (missingDelegationAddParameters != null) {
      $result.missingDelegationAddParameters = missingDelegationAddParameters;
    }
    if (insufficientDelegationStake != null) {
      $result.insufficientDelegationStake = insufficientDelegationStake;
    }
    if (delegatorInCooldown != null) {
      $result.delegatorInCooldown = delegatorInCooldown;
    }
    if (notADelegator != null) {
      $result.notADelegator = notADelegator;
    }
    if (delegationTargetNotABaker != null) {
      $result.delegationTargetNotABaker = delegationTargetNotABaker;
    }
    if (stakeOverMaximumThresholdForPool != null) {
      $result.stakeOverMaximumThresholdForPool = stakeOverMaximumThresholdForPool;
    }
    if (poolWouldBecomeOverDelegated != null) {
      $result.poolWouldBecomeOverDelegated = poolWouldBecomeOverDelegated;
    }
    if (poolClosed != null) {
      $result.poolClosed = poolClosed;
    }
    return $result;
  }
  RejectReason._() : super();
  factory RejectReason.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RejectReason.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, RejectReason_Reason> _RejectReason_ReasonByTag = {
    1 : RejectReason_Reason.moduleNotWf,
    2 : RejectReason_Reason.moduleHashAlreadyExists,
    3 : RejectReason_Reason.invalidAccountReference,
    4 : RejectReason_Reason.invalidInitMethod,
    5 : RejectReason_Reason.invalidReceiveMethod,
    6 : RejectReason_Reason.invalidModuleReference,
    7 : RejectReason_Reason.invalidContractAddress,
    8 : RejectReason_Reason.runtimeFailure,
    9 : RejectReason_Reason.amountTooLarge,
    10 : RejectReason_Reason.serializationFailure,
    11 : RejectReason_Reason.outOfEnergy,
    12 : RejectReason_Reason.rejectedInit,
    13 : RejectReason_Reason.rejectedReceive,
    14 : RejectReason_Reason.invalidProof,
    15 : RejectReason_Reason.alreadyABaker,
    16 : RejectReason_Reason.notABaker,
    17 : RejectReason_Reason.insufficientBalanceForBakerStake,
    18 : RejectReason_Reason.stakeUnderMinimumThresholdForBaking,
    19 : RejectReason_Reason.bakerInCooldown,
    20 : RejectReason_Reason.duplicateAggregationKey,
    21 : RejectReason_Reason.nonExistentCredentialId,
    22 : RejectReason_Reason.keyIndexAlreadyInUse,
    23 : RejectReason_Reason.invalidAccountThreshold,
    24 : RejectReason_Reason.invalidCredentialKeySignThreshold,
    25 : RejectReason_Reason.invalidEncryptedAmountTransferProof,
    26 : RejectReason_Reason.invalidTransferToPublicProof,
    27 : RejectReason_Reason.encryptedAmountSelfTransfer,
    28 : RejectReason_Reason.invalidIndexOnEncryptedTransfer,
    29 : RejectReason_Reason.zeroScheduledAmount,
    30 : RejectReason_Reason.nonIncreasingSchedule,
    31 : RejectReason_Reason.firstScheduledReleaseExpired,
    32 : RejectReason_Reason.scheduledSelfTransfer,
    33 : RejectReason_Reason.invalidCredentials,
    34 : RejectReason_Reason.duplicateCredIds,
    35 : RejectReason_Reason.nonExistentCredIds,
    36 : RejectReason_Reason.removeFirstCredential,
    37 : RejectReason_Reason.credentialHolderDidNotSign,
    38 : RejectReason_Reason.notAllowedMultipleCredentials,
    39 : RejectReason_Reason.notAllowedToReceiveEncrypted,
    40 : RejectReason_Reason.notAllowedToHandleEncrypted,
    41 : RejectReason_Reason.missingBakerAddParameters,
    42 : RejectReason_Reason.finalizationRewardCommissionNotInRange,
    43 : RejectReason_Reason.bakingRewardCommissionNotInRange,
    44 : RejectReason_Reason.transactionFeeCommissionNotInRange,
    45 : RejectReason_Reason.alreadyADelegator,
    46 : RejectReason_Reason.insufficientBalanceForDelegationStake,
    47 : RejectReason_Reason.missingDelegationAddParameters,
    48 : RejectReason_Reason.insufficientDelegationStake,
    49 : RejectReason_Reason.delegatorInCooldown,
    50 : RejectReason_Reason.notADelegator,
    51 : RejectReason_Reason.delegationTargetNotABaker,
    52 : RejectReason_Reason.stakeOverMaximumThresholdForPool,
    53 : RejectReason_Reason.poolWouldBecomeOverDelegated,
    54 : RejectReason_Reason.poolClosed,
    0 : RejectReason_Reason.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RejectReason', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54])
    ..aOM<Empty>(1, _omitFieldNames ? '' : 'moduleNotWf', subBuilder: Empty.create)
    ..aOM<ModuleRef>(2, _omitFieldNames ? '' : 'moduleHashAlreadyExists', subBuilder: ModuleRef.create)
    ..aOM<AccountAddress>(3, _omitFieldNames ? '' : 'invalidAccountReference', subBuilder: AccountAddress.create)
    ..aOM<RejectReason_InvalidInitMethod>(4, _omitFieldNames ? '' : 'invalidInitMethod', subBuilder: RejectReason_InvalidInitMethod.create)
    ..aOM<RejectReason_InvalidReceiveMethod>(5, _omitFieldNames ? '' : 'invalidReceiveMethod', subBuilder: RejectReason_InvalidReceiveMethod.create)
    ..aOM<ModuleRef>(6, _omitFieldNames ? '' : 'invalidModuleReference', subBuilder: ModuleRef.create)
    ..aOM<ContractAddress>(7, _omitFieldNames ? '' : 'invalidContractAddress', subBuilder: ContractAddress.create)
    ..aOM<Empty>(8, _omitFieldNames ? '' : 'runtimeFailure', subBuilder: Empty.create)
    ..aOM<RejectReason_AmountTooLarge>(9, _omitFieldNames ? '' : 'amountTooLarge', subBuilder: RejectReason_AmountTooLarge.create)
    ..aOM<Empty>(10, _omitFieldNames ? '' : 'serializationFailure', subBuilder: Empty.create)
    ..aOM<Empty>(11, _omitFieldNames ? '' : 'outOfEnergy', subBuilder: Empty.create)
    ..aOM<RejectReason_RejectedInit>(12, _omitFieldNames ? '' : 'rejectedInit', subBuilder: RejectReason_RejectedInit.create)
    ..aOM<RejectReason_RejectedReceive>(13, _omitFieldNames ? '' : 'rejectedReceive', subBuilder: RejectReason_RejectedReceive.create)
    ..aOM<Empty>(14, _omitFieldNames ? '' : 'invalidProof', subBuilder: Empty.create)
    ..aOM<BakerId>(15, _omitFieldNames ? '' : 'alreadyABaker', subBuilder: BakerId.create)
    ..aOM<AccountAddress>(16, _omitFieldNames ? '' : 'notABaker', subBuilder: AccountAddress.create)
    ..aOM<Empty>(17, _omitFieldNames ? '' : 'insufficientBalanceForBakerStake', subBuilder: Empty.create)
    ..aOM<Empty>(18, _omitFieldNames ? '' : 'stakeUnderMinimumThresholdForBaking', subBuilder: Empty.create)
    ..aOM<Empty>(19, _omitFieldNames ? '' : 'bakerInCooldown', subBuilder: Empty.create)
    ..aOM<BakerAggregationVerifyKey>(20, _omitFieldNames ? '' : 'duplicateAggregationKey', subBuilder: BakerAggregationVerifyKey.create)
    ..aOM<Empty>(21, _omitFieldNames ? '' : 'nonExistentCredentialId', subBuilder: Empty.create)
    ..aOM<Empty>(22, _omitFieldNames ? '' : 'keyIndexAlreadyInUse', subBuilder: Empty.create)
    ..aOM<Empty>(23, _omitFieldNames ? '' : 'invalidAccountThreshold', subBuilder: Empty.create)
    ..aOM<Empty>(24, _omitFieldNames ? '' : 'invalidCredentialKeySignThreshold', subBuilder: Empty.create)
    ..aOM<Empty>(25, _omitFieldNames ? '' : 'invalidEncryptedAmountTransferProof', subBuilder: Empty.create)
    ..aOM<Empty>(26, _omitFieldNames ? '' : 'invalidTransferToPublicProof', subBuilder: Empty.create)
    ..aOM<AccountAddress>(27, _omitFieldNames ? '' : 'encryptedAmountSelfTransfer', subBuilder: AccountAddress.create)
    ..aOM<Empty>(28, _omitFieldNames ? '' : 'invalidIndexOnEncryptedTransfer', subBuilder: Empty.create)
    ..aOM<Empty>(29, _omitFieldNames ? '' : 'zeroScheduledAmount', protoName: 'zero_scheduledAmount', subBuilder: Empty.create)
    ..aOM<Empty>(30, _omitFieldNames ? '' : 'nonIncreasingSchedule', subBuilder: Empty.create)
    ..aOM<Empty>(31, _omitFieldNames ? '' : 'firstScheduledReleaseExpired', subBuilder: Empty.create)
    ..aOM<AccountAddress>(32, _omitFieldNames ? '' : 'scheduledSelfTransfer', subBuilder: AccountAddress.create)
    ..aOM<Empty>(33, _omitFieldNames ? '' : 'invalidCredentials', subBuilder: Empty.create)
    ..aOM<RejectReason_DuplicateCredIds>(34, _omitFieldNames ? '' : 'duplicateCredIds', subBuilder: RejectReason_DuplicateCredIds.create)
    ..aOM<RejectReason_NonExistentCredIds>(35, _omitFieldNames ? '' : 'nonExistentCredIds', subBuilder: RejectReason_NonExistentCredIds.create)
    ..aOM<Empty>(36, _omitFieldNames ? '' : 'removeFirstCredential', subBuilder: Empty.create)
    ..aOM<Empty>(37, _omitFieldNames ? '' : 'credentialHolderDidNotSign', subBuilder: Empty.create)
    ..aOM<Empty>(38, _omitFieldNames ? '' : 'notAllowedMultipleCredentials', subBuilder: Empty.create)
    ..aOM<Empty>(39, _omitFieldNames ? '' : 'notAllowedToReceiveEncrypted', subBuilder: Empty.create)
    ..aOM<Empty>(40, _omitFieldNames ? '' : 'notAllowedToHandleEncrypted', subBuilder: Empty.create)
    ..aOM<Empty>(41, _omitFieldNames ? '' : 'missingBakerAddParameters', subBuilder: Empty.create)
    ..aOM<Empty>(42, _omitFieldNames ? '' : 'finalizationRewardCommissionNotInRange', subBuilder: Empty.create)
    ..aOM<Empty>(43, _omitFieldNames ? '' : 'bakingRewardCommissionNotInRange', subBuilder: Empty.create)
    ..aOM<Empty>(44, _omitFieldNames ? '' : 'transactionFeeCommissionNotInRange', subBuilder: Empty.create)
    ..aOM<Empty>(45, _omitFieldNames ? '' : 'alreadyADelegator', subBuilder: Empty.create)
    ..aOM<Empty>(46, _omitFieldNames ? '' : 'insufficientBalanceForDelegationStake', subBuilder: Empty.create)
    ..aOM<Empty>(47, _omitFieldNames ? '' : 'missingDelegationAddParameters', subBuilder: Empty.create)
    ..aOM<Empty>(48, _omitFieldNames ? '' : 'insufficientDelegationStake', subBuilder: Empty.create)
    ..aOM<Empty>(49, _omitFieldNames ? '' : 'delegatorInCooldown', subBuilder: Empty.create)
    ..aOM<AccountAddress>(50, _omitFieldNames ? '' : 'notADelegator', subBuilder: AccountAddress.create)
    ..aOM<BakerId>(51, _omitFieldNames ? '' : 'delegationTargetNotABaker', subBuilder: BakerId.create)
    ..aOM<Empty>(52, _omitFieldNames ? '' : 'stakeOverMaximumThresholdForPool', subBuilder: Empty.create)
    ..aOM<Empty>(53, _omitFieldNames ? '' : 'poolWouldBecomeOverDelegated', subBuilder: Empty.create)
    ..aOM<Empty>(54, _omitFieldNames ? '' : 'poolClosed', subBuilder: Empty.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RejectReason clone() => RejectReason()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RejectReason copyWith(void Function(RejectReason) updates) => super.copyWith((message) => updates(message as RejectReason)) as RejectReason;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RejectReason create() => RejectReason._();
  RejectReason createEmptyInstance() => create();
  static $pb.PbList<RejectReason> createRepeated() => $pb.PbList<RejectReason>();
  @$core.pragma('dart2js:noInline')
  static RejectReason getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RejectReason>(create);
  static RejectReason? _defaultInstance;

  RejectReason_Reason whichReason() => _RejectReason_ReasonByTag[$_whichOneof(0)]!;
  void clearReason() => clearField($_whichOneof(0));

  /// Raised while validating a Wasm module that is not well formed.
  @$pb.TagNumber(1)
  Empty get moduleNotWf => $_getN(0);
  @$pb.TagNumber(1)
  set moduleNotWf(Empty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasModuleNotWf() => $_has(0);
  @$pb.TagNumber(1)
  void clearModuleNotWf() => clearField(1);
  @$pb.TagNumber(1)
  Empty ensureModuleNotWf() => $_ensure(0);

  /// The smart contract module hash already exists.
  @$pb.TagNumber(2)
  ModuleRef get moduleHashAlreadyExists => $_getN(1);
  @$pb.TagNumber(2)
  set moduleHashAlreadyExists(ModuleRef v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasModuleHashAlreadyExists() => $_has(1);
  @$pb.TagNumber(2)
  void clearModuleHashAlreadyExists() => clearField(2);
  @$pb.TagNumber(2)
  ModuleRef ensureModuleHashAlreadyExists() => $_ensure(1);

  /// Account does not exist.
  @$pb.TagNumber(3)
  AccountAddress get invalidAccountReference => $_getN(2);
  @$pb.TagNumber(3)
  set invalidAccountReference(AccountAddress v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInvalidAccountReference() => $_has(2);
  @$pb.TagNumber(3)
  void clearInvalidAccountReference() => clearField(3);
  @$pb.TagNumber(3)
  AccountAddress ensureInvalidAccountReference() => $_ensure(2);

  /// Reference to a non-existing contract init method.
  @$pb.TagNumber(4)
  RejectReason_InvalidInitMethod get invalidInitMethod => $_getN(3);
  @$pb.TagNumber(4)
  set invalidInitMethod(RejectReason_InvalidInitMethod v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasInvalidInitMethod() => $_has(3);
  @$pb.TagNumber(4)
  void clearInvalidInitMethod() => clearField(4);
  @$pb.TagNumber(4)
  RejectReason_InvalidInitMethod ensureInvalidInitMethod() => $_ensure(3);

  /// Reference to a non-existing contract receive method.
  @$pb.TagNumber(5)
  RejectReason_InvalidReceiveMethod get invalidReceiveMethod => $_getN(4);
  @$pb.TagNumber(5)
  set invalidReceiveMethod(RejectReason_InvalidReceiveMethod v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasInvalidReceiveMethod() => $_has(4);
  @$pb.TagNumber(5)
  void clearInvalidReceiveMethod() => clearField(5);
  @$pb.TagNumber(5)
  RejectReason_InvalidReceiveMethod ensureInvalidReceiveMethod() => $_ensure(4);

  /// Reference to a non-existing smart contract module.
  @$pb.TagNumber(6)
  ModuleRef get invalidModuleReference => $_getN(5);
  @$pb.TagNumber(6)
  set invalidModuleReference(ModuleRef v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasInvalidModuleReference() => $_has(5);
  @$pb.TagNumber(6)
  void clearInvalidModuleReference() => clearField(6);
  @$pb.TagNumber(6)
  ModuleRef ensureInvalidModuleReference() => $_ensure(5);

  /// Contract instance does not exist.
  @$pb.TagNumber(7)
  ContractAddress get invalidContractAddress => $_getN(6);
  @$pb.TagNumber(7)
  set invalidContractAddress(ContractAddress v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasInvalidContractAddress() => $_has(6);
  @$pb.TagNumber(7)
  void clearInvalidContractAddress() => clearField(7);
  @$pb.TagNumber(7)
  ContractAddress ensureInvalidContractAddress() => $_ensure(6);

  /// Runtime exception occurred when running either the init or receive
  /// method.
  @$pb.TagNumber(8)
  Empty get runtimeFailure => $_getN(7);
  @$pb.TagNumber(8)
  set runtimeFailure(Empty v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasRuntimeFailure() => $_has(7);
  @$pb.TagNumber(8)
  void clearRuntimeFailure() => clearField(8);
  @$pb.TagNumber(8)
  Empty ensureRuntimeFailure() => $_ensure(7);

  /// When one wishes to transfer an amount from A to B but there
  /// are not enough funds on account/contract A to make this
  /// possible. The data are the from address and the amount to transfer.
  @$pb.TagNumber(9)
  RejectReason_AmountTooLarge get amountTooLarge => $_getN(8);
  @$pb.TagNumber(9)
  set amountTooLarge(RejectReason_AmountTooLarge v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasAmountTooLarge() => $_has(8);
  @$pb.TagNumber(9)
  void clearAmountTooLarge() => clearField(9);
  @$pb.TagNumber(9)
  RejectReason_AmountTooLarge ensureAmountTooLarge() => $_ensure(8);

  /// Serialization of the body failed.
  @$pb.TagNumber(10)
  Empty get serializationFailure => $_getN(9);
  @$pb.TagNumber(10)
  set serializationFailure(Empty v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasSerializationFailure() => $_has(9);
  @$pb.TagNumber(10)
  void clearSerializationFailure() => clearField(10);
  @$pb.TagNumber(10)
  Empty ensureSerializationFailure() => $_ensure(9);

  /// We ran of out energy to process this transaction.
  @$pb.TagNumber(11)
  Empty get outOfEnergy => $_getN(10);
  @$pb.TagNumber(11)
  set outOfEnergy(Empty v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasOutOfEnergy() => $_has(10);
  @$pb.TagNumber(11)
  void clearOutOfEnergy() => clearField(11);
  @$pb.TagNumber(11)
  Empty ensureOutOfEnergy() => $_ensure(10);

  /// Rejected due to contract logic in init function of a contract.
  @$pb.TagNumber(12)
  RejectReason_RejectedInit get rejectedInit => $_getN(11);
  @$pb.TagNumber(12)
  set rejectedInit(RejectReason_RejectedInit v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasRejectedInit() => $_has(11);
  @$pb.TagNumber(12)
  void clearRejectedInit() => clearField(12);
  @$pb.TagNumber(12)
  RejectReason_RejectedInit ensureRejectedInit() => $_ensure(11);

  /// Rejected due to contract logic in receive function of a contract.
  @$pb.TagNumber(13)
  RejectReason_RejectedReceive get rejectedReceive => $_getN(12);
  @$pb.TagNumber(13)
  set rejectedReceive(RejectReason_RejectedReceive v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasRejectedReceive() => $_has(12);
  @$pb.TagNumber(13)
  void clearRejectedReceive() => clearField(13);
  @$pb.TagNumber(13)
  RejectReason_RejectedReceive ensureRejectedReceive() => $_ensure(12);

  /// Proof that the baker owns relevant private keys is not valid.
  @$pb.TagNumber(14)
  Empty get invalidProof => $_getN(13);
  @$pb.TagNumber(14)
  set invalidProof(Empty v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasInvalidProof() => $_has(13);
  @$pb.TagNumber(14)
  void clearInvalidProof() => clearField(14);
  @$pb.TagNumber(14)
  Empty ensureInvalidProof() => $_ensure(13);

  /// Tried to add baker for an account that already has a baker.
  @$pb.TagNumber(15)
  BakerId get alreadyABaker => $_getN(14);
  @$pb.TagNumber(15)
  set alreadyABaker(BakerId v) { setField(15, v); }
  @$pb.TagNumber(15)
  $core.bool hasAlreadyABaker() => $_has(14);
  @$pb.TagNumber(15)
  void clearAlreadyABaker() => clearField(15);
  @$pb.TagNumber(15)
  BakerId ensureAlreadyABaker() => $_ensure(14);

  /// Tried to remove a baker for an account that has no baker.
  @$pb.TagNumber(16)
  AccountAddress get notABaker => $_getN(15);
  @$pb.TagNumber(16)
  set notABaker(AccountAddress v) { setField(16, v); }
  @$pb.TagNumber(16)
  $core.bool hasNotABaker() => $_has(15);
  @$pb.TagNumber(16)
  void clearNotABaker() => clearField(16);
  @$pb.TagNumber(16)
  AccountAddress ensureNotABaker() => $_ensure(15);

  /// The amount on the account was insufficient to cover the proposed stake.
  @$pb.TagNumber(17)
  Empty get insufficientBalanceForBakerStake => $_getN(16);
  @$pb.TagNumber(17)
  set insufficientBalanceForBakerStake(Empty v) { setField(17, v); }
  @$pb.TagNumber(17)
  $core.bool hasInsufficientBalanceForBakerStake() => $_has(16);
  @$pb.TagNumber(17)
  void clearInsufficientBalanceForBakerStake() => clearField(17);
  @$pb.TagNumber(17)
  Empty ensureInsufficientBalanceForBakerStake() => $_ensure(16);

  /// The amount provided is under the threshold required for becoming a baker.
  @$pb.TagNumber(18)
  Empty get stakeUnderMinimumThresholdForBaking => $_getN(17);
  @$pb.TagNumber(18)
  set stakeUnderMinimumThresholdForBaking(Empty v) { setField(18, v); }
  @$pb.TagNumber(18)
  $core.bool hasStakeUnderMinimumThresholdForBaking() => $_has(17);
  @$pb.TagNumber(18)
  void clearStakeUnderMinimumThresholdForBaking() => clearField(18);
  @$pb.TagNumber(18)
  Empty ensureStakeUnderMinimumThresholdForBaking() => $_ensure(17);

  /// The change could not be made because the baker is in cooldown for
  /// another change.
  @$pb.TagNumber(19)
  Empty get bakerInCooldown => $_getN(18);
  @$pb.TagNumber(19)
  set bakerInCooldown(Empty v) { setField(19, v); }
  @$pb.TagNumber(19)
  $core.bool hasBakerInCooldown() => $_has(18);
  @$pb.TagNumber(19)
  void clearBakerInCooldown() => clearField(19);
  @$pb.TagNumber(19)
  Empty ensureBakerInCooldown() => $_ensure(18);

  /// A baker with the given aggregation key already exists.
  @$pb.TagNumber(20)
  BakerAggregationVerifyKey get duplicateAggregationKey => $_getN(19);
  @$pb.TagNumber(20)
  set duplicateAggregationKey(BakerAggregationVerifyKey v) { setField(20, v); }
  @$pb.TagNumber(20)
  $core.bool hasDuplicateAggregationKey() => $_has(19);
  @$pb.TagNumber(20)
  void clearDuplicateAggregationKey() => clearField(20);
  @$pb.TagNumber(20)
  BakerAggregationVerifyKey ensureDuplicateAggregationKey() => $_ensure(19);

  /// Encountered credential ID that does not exist.
  @$pb.TagNumber(21)
  Empty get nonExistentCredentialId => $_getN(20);
  @$pb.TagNumber(21)
  set nonExistentCredentialId(Empty v) { setField(21, v); }
  @$pb.TagNumber(21)
  $core.bool hasNonExistentCredentialId() => $_has(20);
  @$pb.TagNumber(21)
  void clearNonExistentCredentialId() => clearField(21);
  @$pb.TagNumber(21)
  Empty ensureNonExistentCredentialId() => $_ensure(20);

  /// Attempted to add an account key to a key index already in use.
  @$pb.TagNumber(22)
  Empty get keyIndexAlreadyInUse => $_getN(21);
  @$pb.TagNumber(22)
  set keyIndexAlreadyInUse(Empty v) { setField(22, v); }
  @$pb.TagNumber(22)
  $core.bool hasKeyIndexAlreadyInUse() => $_has(21);
  @$pb.TagNumber(22)
  void clearKeyIndexAlreadyInUse() => clearField(22);
  @$pb.TagNumber(22)
  Empty ensureKeyIndexAlreadyInUse() => $_ensure(21);

  /// When the account threshold is updated, it must not exceed the amount of
  /// existing keys.
  @$pb.TagNumber(23)
  Empty get invalidAccountThreshold => $_getN(22);
  @$pb.TagNumber(23)
  set invalidAccountThreshold(Empty v) { setField(23, v); }
  @$pb.TagNumber(23)
  $core.bool hasInvalidAccountThreshold() => $_has(22);
  @$pb.TagNumber(23)
  void clearInvalidAccountThreshold() => clearField(23);
  @$pb.TagNumber(23)
  Empty ensureInvalidAccountThreshold() => $_ensure(22);

  /// When the credential key threshold is updated, it must not exceed the
  /// amount of existing keys.
  @$pb.TagNumber(24)
  Empty get invalidCredentialKeySignThreshold => $_getN(23);
  @$pb.TagNumber(24)
  set invalidCredentialKeySignThreshold(Empty v) { setField(24, v); }
  @$pb.TagNumber(24)
  $core.bool hasInvalidCredentialKeySignThreshold() => $_has(23);
  @$pb.TagNumber(24)
  void clearInvalidCredentialKeySignThreshold() => clearField(24);
  @$pb.TagNumber(24)
  Empty ensureInvalidCredentialKeySignThreshold() => $_ensure(23);

  /// Proof for an encrypted amount transfer did not validate.
  @$pb.TagNumber(25)
  Empty get invalidEncryptedAmountTransferProof => $_getN(24);
  @$pb.TagNumber(25)
  set invalidEncryptedAmountTransferProof(Empty v) { setField(25, v); }
  @$pb.TagNumber(25)
  $core.bool hasInvalidEncryptedAmountTransferProof() => $_has(24);
  @$pb.TagNumber(25)
  void clearInvalidEncryptedAmountTransferProof() => clearField(25);
  @$pb.TagNumber(25)
  Empty ensureInvalidEncryptedAmountTransferProof() => $_ensure(24);

  /// Proof for a secret to public transfer did not validate.
  @$pb.TagNumber(26)
  Empty get invalidTransferToPublicProof => $_getN(25);
  @$pb.TagNumber(26)
  set invalidTransferToPublicProof(Empty v) { setField(26, v); }
  @$pb.TagNumber(26)
  $core.bool hasInvalidTransferToPublicProof() => $_has(25);
  @$pb.TagNumber(26)
  void clearInvalidTransferToPublicProof() => clearField(26);
  @$pb.TagNumber(26)
  Empty ensureInvalidTransferToPublicProof() => $_ensure(25);

  /// Account tried to transfer an encrypted amount to itself, that's not
  /// allowed.
  @$pb.TagNumber(27)
  AccountAddress get encryptedAmountSelfTransfer => $_getN(26);
  @$pb.TagNumber(27)
  set encryptedAmountSelfTransfer(AccountAddress v) { setField(27, v); }
  @$pb.TagNumber(27)
  $core.bool hasEncryptedAmountSelfTransfer() => $_has(26);
  @$pb.TagNumber(27)
  void clearEncryptedAmountSelfTransfer() => clearField(27);
  @$pb.TagNumber(27)
  AccountAddress ensureEncryptedAmountSelfTransfer() => $_ensure(26);

  /// The provided index is below the start index or above `startIndex +
  /// length incomingAmounts`.
  @$pb.TagNumber(28)
  Empty get invalidIndexOnEncryptedTransfer => $_getN(27);
  @$pb.TagNumber(28)
  set invalidIndexOnEncryptedTransfer(Empty v) { setField(28, v); }
  @$pb.TagNumber(28)
  $core.bool hasInvalidIndexOnEncryptedTransfer() => $_has(27);
  @$pb.TagNumber(28)
  void clearInvalidIndexOnEncryptedTransfer() => clearField(28);
  @$pb.TagNumber(28)
  Empty ensureInvalidIndexOnEncryptedTransfer() => $_ensure(27);

  /// The transfer with schedule is going to send 0 tokens.
  @$pb.TagNumber(29)
  Empty get zeroScheduledAmount => $_getN(28);
  @$pb.TagNumber(29)
  set zeroScheduledAmount(Empty v) { setField(29, v); }
  @$pb.TagNumber(29)
  $core.bool hasZeroScheduledAmount() => $_has(28);
  @$pb.TagNumber(29)
  void clearZeroScheduledAmount() => clearField(29);
  @$pb.TagNumber(29)
  Empty ensureZeroScheduledAmount() => $_ensure(28);

  /// The transfer with schedule has a non strictly increasing schedule.
  @$pb.TagNumber(30)
  Empty get nonIncreasingSchedule => $_getN(29);
  @$pb.TagNumber(30)
  set nonIncreasingSchedule(Empty v) { setField(30, v); }
  @$pb.TagNumber(30)
  $core.bool hasNonIncreasingSchedule() => $_has(29);
  @$pb.TagNumber(30)
  void clearNonIncreasingSchedule() => clearField(30);
  @$pb.TagNumber(30)
  Empty ensureNonIncreasingSchedule() => $_ensure(29);

  /// The first scheduled release in a transfer with schedule has already
  /// expired.
  @$pb.TagNumber(31)
  Empty get firstScheduledReleaseExpired => $_getN(30);
  @$pb.TagNumber(31)
  set firstScheduledReleaseExpired(Empty v) { setField(31, v); }
  @$pb.TagNumber(31)
  $core.bool hasFirstScheduledReleaseExpired() => $_has(30);
  @$pb.TagNumber(31)
  void clearFirstScheduledReleaseExpired() => clearField(31);
  @$pb.TagNumber(31)
  Empty ensureFirstScheduledReleaseExpired() => $_ensure(30);

  /// Account tried to transfer with schedule to itself, that's not allowed.
  @$pb.TagNumber(32)
  AccountAddress get scheduledSelfTransfer => $_getN(31);
  @$pb.TagNumber(32)
  set scheduledSelfTransfer(AccountAddress v) { setField(32, v); }
  @$pb.TagNumber(32)
  $core.bool hasScheduledSelfTransfer() => $_has(31);
  @$pb.TagNumber(32)
  void clearScheduledSelfTransfer() => clearField(32);
  @$pb.TagNumber(32)
  AccountAddress ensureScheduledSelfTransfer() => $_ensure(31);

  /// At least one of the credentials was either malformed or its proof was
  /// incorrect.
  @$pb.TagNumber(33)
  Empty get invalidCredentials => $_getN(32);
  @$pb.TagNumber(33)
  set invalidCredentials(Empty v) { setField(33, v); }
  @$pb.TagNumber(33)
  $core.bool hasInvalidCredentials() => $_has(32);
  @$pb.TagNumber(33)
  void clearInvalidCredentials() => clearField(33);
  @$pb.TagNumber(33)
  Empty ensureInvalidCredentials() => $_ensure(32);

  /// Some of the credential IDs already exist or are duplicated in the
  /// transaction.
  @$pb.TagNumber(34)
  RejectReason_DuplicateCredIds get duplicateCredIds => $_getN(33);
  @$pb.TagNumber(34)
  set duplicateCredIds(RejectReason_DuplicateCredIds v) { setField(34, v); }
  @$pb.TagNumber(34)
  $core.bool hasDuplicateCredIds() => $_has(33);
  @$pb.TagNumber(34)
  void clearDuplicateCredIds() => clearField(34);
  @$pb.TagNumber(34)
  RejectReason_DuplicateCredIds ensureDuplicateCredIds() => $_ensure(33);

  /// A credential id that was to be removed is not part of the account.
  @$pb.TagNumber(35)
  RejectReason_NonExistentCredIds get nonExistentCredIds => $_getN(34);
  @$pb.TagNumber(35)
  set nonExistentCredIds(RejectReason_NonExistentCredIds v) { setField(35, v); }
  @$pb.TagNumber(35)
  $core.bool hasNonExistentCredIds() => $_has(34);
  @$pb.TagNumber(35)
  void clearNonExistentCredIds() => clearField(35);
  @$pb.TagNumber(35)
  RejectReason_NonExistentCredIds ensureNonExistentCredIds() => $_ensure(34);

  /// Attemp to remove the first credential.
  @$pb.TagNumber(36)
  Empty get removeFirstCredential => $_getN(35);
  @$pb.TagNumber(36)
  set removeFirstCredential(Empty v) { setField(36, v); }
  @$pb.TagNumber(36)
  $core.bool hasRemoveFirstCredential() => $_has(35);
  @$pb.TagNumber(36)
  void clearRemoveFirstCredential() => clearField(36);
  @$pb.TagNumber(36)
  Empty ensureRemoveFirstCredential() => $_ensure(35);

  /// The credential holder of the keys to be updated did not sign the
  /// transaction.
  @$pb.TagNumber(37)
  Empty get credentialHolderDidNotSign => $_getN(36);
  @$pb.TagNumber(37)
  set credentialHolderDidNotSign(Empty v) { setField(37, v); }
  @$pb.TagNumber(37)
  $core.bool hasCredentialHolderDidNotSign() => $_has(36);
  @$pb.TagNumber(37)
  void clearCredentialHolderDidNotSign() => clearField(37);
  @$pb.TagNumber(37)
  Empty ensureCredentialHolderDidNotSign() => $_ensure(36);

  /// Account is not allowed to have multiple credentials because it contains
  /// a non-zero encrypted transfer.
  @$pb.TagNumber(38)
  Empty get notAllowedMultipleCredentials => $_getN(37);
  @$pb.TagNumber(38)
  set notAllowedMultipleCredentials(Empty v) { setField(38, v); }
  @$pb.TagNumber(38)
  $core.bool hasNotAllowedMultipleCredentials() => $_has(37);
  @$pb.TagNumber(38)
  void clearNotAllowedMultipleCredentials() => clearField(38);
  @$pb.TagNumber(38)
  Empty ensureNotAllowedMultipleCredentials() => $_ensure(37);

  /// The account is not allowed to receive encrypted transfers because it has
  /// multiple credentials.
  @$pb.TagNumber(39)
  Empty get notAllowedToReceiveEncrypted => $_getN(38);
  @$pb.TagNumber(39)
  set notAllowedToReceiveEncrypted(Empty v) { setField(39, v); }
  @$pb.TagNumber(39)
  $core.bool hasNotAllowedToReceiveEncrypted() => $_has(38);
  @$pb.TagNumber(39)
  void clearNotAllowedToReceiveEncrypted() => clearField(39);
  @$pb.TagNumber(39)
  Empty ensureNotAllowedToReceiveEncrypted() => $_ensure(38);

  /// The account is not allowed to send encrypted transfers (or transfer
  /// from/to public to/from encrypted).
  @$pb.TagNumber(40)
  Empty get notAllowedToHandleEncrypted => $_getN(39);
  @$pb.TagNumber(40)
  set notAllowedToHandleEncrypted(Empty v) { setField(40, v); }
  @$pb.TagNumber(40)
  $core.bool hasNotAllowedToHandleEncrypted() => $_has(39);
  @$pb.TagNumber(40)
  void clearNotAllowedToHandleEncrypted() => clearField(40);
  @$pb.TagNumber(40)
  Empty ensureNotAllowedToHandleEncrypted() => $_ensure(39);

  /// A configure baker transaction is missing one or more arguments in order
  /// to add a baker.
  @$pb.TagNumber(41)
  Empty get missingBakerAddParameters => $_getN(40);
  @$pb.TagNumber(41)
  set missingBakerAddParameters(Empty v) { setField(41, v); }
  @$pb.TagNumber(41)
  $core.bool hasMissingBakerAddParameters() => $_has(40);
  @$pb.TagNumber(41)
  void clearMissingBakerAddParameters() => clearField(41);
  @$pb.TagNumber(41)
  Empty ensureMissingBakerAddParameters() => $_ensure(40);

  /// Finalization reward commission is not in the valid range for a baker.
  @$pb.TagNumber(42)
  Empty get finalizationRewardCommissionNotInRange => $_getN(41);
  @$pb.TagNumber(42)
  set finalizationRewardCommissionNotInRange(Empty v) { setField(42, v); }
  @$pb.TagNumber(42)
  $core.bool hasFinalizationRewardCommissionNotInRange() => $_has(41);
  @$pb.TagNumber(42)
  void clearFinalizationRewardCommissionNotInRange() => clearField(42);
  @$pb.TagNumber(42)
  Empty ensureFinalizationRewardCommissionNotInRange() => $_ensure(41);

  /// Baking reward commission is not in the valid range for a baker.
  @$pb.TagNumber(43)
  Empty get bakingRewardCommissionNotInRange => $_getN(42);
  @$pb.TagNumber(43)
  set bakingRewardCommissionNotInRange(Empty v) { setField(43, v); }
  @$pb.TagNumber(43)
  $core.bool hasBakingRewardCommissionNotInRange() => $_has(42);
  @$pb.TagNumber(43)
  void clearBakingRewardCommissionNotInRange() => clearField(43);
  @$pb.TagNumber(43)
  Empty ensureBakingRewardCommissionNotInRange() => $_ensure(42);

  /// Transaction fee commission is not in the valid range for a baker.
  @$pb.TagNumber(44)
  Empty get transactionFeeCommissionNotInRange => $_getN(43);
  @$pb.TagNumber(44)
  set transactionFeeCommissionNotInRange(Empty v) { setField(44, v); }
  @$pb.TagNumber(44)
  $core.bool hasTransactionFeeCommissionNotInRange() => $_has(43);
  @$pb.TagNumber(44)
  void clearTransactionFeeCommissionNotInRange() => clearField(44);
  @$pb.TagNumber(44)
  Empty ensureTransactionFeeCommissionNotInRange() => $_ensure(43);

  /// Tried to add baker for an account that already has a delegator.
  @$pb.TagNumber(45)
  Empty get alreadyADelegator => $_getN(44);
  @$pb.TagNumber(45)
  set alreadyADelegator(Empty v) { setField(45, v); }
  @$pb.TagNumber(45)
  $core.bool hasAlreadyADelegator() => $_has(44);
  @$pb.TagNumber(45)
  void clearAlreadyADelegator() => clearField(45);
  @$pb.TagNumber(45)
  Empty ensureAlreadyADelegator() => $_ensure(44);

  /// The amount on the account was insufficient to cover the proposed stake.
  @$pb.TagNumber(46)
  Empty get insufficientBalanceForDelegationStake => $_getN(45);
  @$pb.TagNumber(46)
  set insufficientBalanceForDelegationStake(Empty v) { setField(46, v); }
  @$pb.TagNumber(46)
  $core.bool hasInsufficientBalanceForDelegationStake() => $_has(45);
  @$pb.TagNumber(46)
  void clearInsufficientBalanceForDelegationStake() => clearField(46);
  @$pb.TagNumber(46)
  Empty ensureInsufficientBalanceForDelegationStake() => $_ensure(45);

  /// A configure delegation transaction is missing one or more arguments in
  /// order to add a delegator.
  @$pb.TagNumber(47)
  Empty get missingDelegationAddParameters => $_getN(46);
  @$pb.TagNumber(47)
  set missingDelegationAddParameters(Empty v) { setField(47, v); }
  @$pb.TagNumber(47)
  $core.bool hasMissingDelegationAddParameters() => $_has(46);
  @$pb.TagNumber(47)
  void clearMissingDelegationAddParameters() => clearField(47);
  @$pb.TagNumber(47)
  Empty ensureMissingDelegationAddParameters() => $_ensure(46);

  /// Delegation stake when adding a delegator was 0.
  @$pb.TagNumber(48)
  Empty get insufficientDelegationStake => $_getN(47);
  @$pb.TagNumber(48)
  set insufficientDelegationStake(Empty v) { setField(48, v); }
  @$pb.TagNumber(48)
  $core.bool hasInsufficientDelegationStake() => $_has(47);
  @$pb.TagNumber(48)
  void clearInsufficientDelegationStake() => clearField(48);
  @$pb.TagNumber(48)
  Empty ensureInsufficientDelegationStake() => $_ensure(47);

  /// Account is not a delegation account.
  @$pb.TagNumber(49)
  Empty get delegatorInCooldown => $_getN(48);
  @$pb.TagNumber(49)
  set delegatorInCooldown(Empty v) { setField(49, v); }
  @$pb.TagNumber(49)
  $core.bool hasDelegatorInCooldown() => $_has(48);
  @$pb.TagNumber(49)
  void clearDelegatorInCooldown() => clearField(49);
  @$pb.TagNumber(49)
  Empty ensureDelegatorInCooldown() => $_ensure(48);

  /// Account is not a delegation account.
  @$pb.TagNumber(50)
  AccountAddress get notADelegator => $_getN(49);
  @$pb.TagNumber(50)
  set notADelegator(AccountAddress v) { setField(50, v); }
  @$pb.TagNumber(50)
  $core.bool hasNotADelegator() => $_has(49);
  @$pb.TagNumber(50)
  void clearNotADelegator() => clearField(50);
  @$pb.TagNumber(50)
  AccountAddress ensureNotADelegator() => $_ensure(49);

  /// Delegation target is not a baker
  @$pb.TagNumber(51)
  BakerId get delegationTargetNotABaker => $_getN(50);
  @$pb.TagNumber(51)
  set delegationTargetNotABaker(BakerId v) { setField(51, v); }
  @$pb.TagNumber(51)
  $core.bool hasDelegationTargetNotABaker() => $_has(50);
  @$pb.TagNumber(51)
  void clearDelegationTargetNotABaker() => clearField(51);
  @$pb.TagNumber(51)
  BakerId ensureDelegationTargetNotABaker() => $_ensure(50);

  /// The amount would result in pool capital higher than the maximum
  /// threshold.
  @$pb.TagNumber(52)
  Empty get stakeOverMaximumThresholdForPool => $_getN(51);
  @$pb.TagNumber(52)
  set stakeOverMaximumThresholdForPool(Empty v) { setField(52, v); }
  @$pb.TagNumber(52)
  $core.bool hasStakeOverMaximumThresholdForPool() => $_has(51);
  @$pb.TagNumber(52)
  void clearStakeOverMaximumThresholdForPool() => clearField(52);
  @$pb.TagNumber(52)
  Empty ensureStakeOverMaximumThresholdForPool() => $_ensure(51);

  /// The amount would result in pool with a too high fraction of delegated
  /// capital.
  @$pb.TagNumber(53)
  Empty get poolWouldBecomeOverDelegated => $_getN(52);
  @$pb.TagNumber(53)
  set poolWouldBecomeOverDelegated(Empty v) { setField(53, v); }
  @$pb.TagNumber(53)
  $core.bool hasPoolWouldBecomeOverDelegated() => $_has(52);
  @$pb.TagNumber(53)
  void clearPoolWouldBecomeOverDelegated() => clearField(53);
  @$pb.TagNumber(53)
  Empty ensurePoolWouldBecomeOverDelegated() => $_ensure(52);

  /// The pool is not open to delegators.
  @$pb.TagNumber(54)
  Empty get poolClosed => $_getN(53);
  @$pb.TagNumber(54)
  set poolClosed(Empty v) { setField(54, v); }
  @$pb.TagNumber(54)
  $core.bool hasPoolClosed() => $_has(53);
  @$pb.TagNumber(54)
  void clearPoolClosed() => clearField(54);
  @$pb.TagNumber(54)
  Empty ensurePoolClosed() => $_ensure(53);
}

/// Data generated as part of initializing a single contract instance.
class ContractInitializedEvent extends $pb.GeneratedMessage {
  factory ContractInitializedEvent({
    ContractVersion? contractVersion,
    ModuleRef? originRef,
    ContractAddress? address,
    Amount? amount,
    InitName? initName,
    $core.Iterable<ContractEvent>? events,
  }) {
    final $result = create();
    if (contractVersion != null) {
      $result.contractVersion = contractVersion;
    }
    if (originRef != null) {
      $result.originRef = originRef;
    }
    if (address != null) {
      $result.address = address;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (initName != null) {
      $result.initName = initName;
    }
    if (events != null) {
      $result.events.addAll(events);
    }
    return $result;
  }
  ContractInitializedEvent._() : super();
  factory ContractInitializedEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractInitializedEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractInitializedEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..e<ContractVersion>(1, _omitFieldNames ? '' : 'contractVersion', $pb.PbFieldType.OE, defaultOrMaker: ContractVersion.V0, valueOf: ContractVersion.valueOf, enumValues: ContractVersion.values)
    ..aOM<ModuleRef>(2, _omitFieldNames ? '' : 'originRef', subBuilder: ModuleRef.create)
    ..aOM<ContractAddress>(3, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<InitName>(5, _omitFieldNames ? '' : 'initName', subBuilder: InitName.create)
    ..pc<ContractEvent>(6, _omitFieldNames ? '' : 'events', $pb.PbFieldType.PM, subBuilder: ContractEvent.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractInitializedEvent clone() => ContractInitializedEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractInitializedEvent copyWith(void Function(ContractInitializedEvent) updates) => super.copyWith((message) => updates(message as ContractInitializedEvent)) as ContractInitializedEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractInitializedEvent create() => ContractInitializedEvent._();
  ContractInitializedEvent createEmptyInstance() => create();
  static $pb.PbList<ContractInitializedEvent> createRepeated() => $pb.PbList<ContractInitializedEvent>();
  @$core.pragma('dart2js:noInline')
  static ContractInitializedEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractInitializedEvent>(create);
  static ContractInitializedEvent? _defaultInstance;

  /// Contract version.
  @$pb.TagNumber(1)
  ContractVersion get contractVersion => $_getN(0);
  @$pb.TagNumber(1)
  set contractVersion(ContractVersion v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasContractVersion() => $_has(0);
  @$pb.TagNumber(1)
  void clearContractVersion() => clearField(1);

  /// Module with the source code of the contract.
  @$pb.TagNumber(2)
  ModuleRef get originRef => $_getN(1);
  @$pb.TagNumber(2)
  set originRef(ModuleRef v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOriginRef() => $_has(1);
  @$pb.TagNumber(2)
  void clearOriginRef() => clearField(2);
  @$pb.TagNumber(2)
  ModuleRef ensureOriginRef() => $_ensure(1);

  /// The newly assigned address of the contract.
  @$pb.TagNumber(3)
  ContractAddress get address => $_getN(2);
  @$pb.TagNumber(3)
  set address(ContractAddress v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAddress() => $_has(2);
  @$pb.TagNumber(3)
  void clearAddress() => clearField(3);
  @$pb.TagNumber(3)
  ContractAddress ensureAddress() => $_ensure(2);

  /// The amount the instance was initialized with.
  @$pb.TagNumber(4)
  Amount get amount => $_getN(3);
  @$pb.TagNumber(4)
  set amount(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasAmount() => $_has(3);
  @$pb.TagNumber(4)
  void clearAmount() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureAmount() => $_ensure(3);

  /// The name of the contract.
  @$pb.TagNumber(5)
  InitName get initName => $_getN(4);
  @$pb.TagNumber(5)
  set initName(InitName v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasInitName() => $_has(4);
  @$pb.TagNumber(5)
  void clearInitName() => clearField(5);
  @$pb.TagNumber(5)
  InitName ensureInitName() => $_ensure(4);

  /// Any contract events that might have been genereated by the contract initialization.
  @$pb.TagNumber(6)
  $core.List<ContractEvent> get events => $_getList(5);
}

/// An event generated by a smart contract.
class ContractEvent extends $pb.GeneratedMessage {
  factory ContractEvent({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ContractEvent._() : super();
  factory ContractEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractEvent clone() => ContractEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractEvent copyWith(void Function(ContractEvent) updates) => super.copyWith((message) => updates(message as ContractEvent)) as ContractEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractEvent create() => ContractEvent._();
  ContractEvent createEmptyInstance() => create();
  static $pb.PbList<ContractEvent> createRepeated() => $pb.PbList<ContractEvent>();
  @$core.pragma('dart2js:noInline')
  static ContractEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractEvent>(create);
  static ContractEvent? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Data generated as part of updating a single contract instance.
/// In general a single Update transaction will
/// generate one or more of these events, together with possibly some transfers.
class InstanceUpdatedEvent extends $pb.GeneratedMessage {
  factory InstanceUpdatedEvent({
    ContractVersion? contractVersion,
    ContractAddress? address,
    Address? instigator,
    Amount? amount,
    Parameter? parameter,
    ReceiveName? receiveName,
    $core.Iterable<ContractEvent>? events,
  }) {
    final $result = create();
    if (contractVersion != null) {
      $result.contractVersion = contractVersion;
    }
    if (address != null) {
      $result.address = address;
    }
    if (instigator != null) {
      $result.instigator = instigator;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (parameter != null) {
      $result.parameter = parameter;
    }
    if (receiveName != null) {
      $result.receiveName = receiveName;
    }
    if (events != null) {
      $result.events.addAll(events);
    }
    return $result;
  }
  InstanceUpdatedEvent._() : super();
  factory InstanceUpdatedEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InstanceUpdatedEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InstanceUpdatedEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..e<ContractVersion>(1, _omitFieldNames ? '' : 'contractVersion', $pb.PbFieldType.OE, defaultOrMaker: ContractVersion.V0, valueOf: ContractVersion.valueOf, enumValues: ContractVersion.values)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..aOM<Address>(3, _omitFieldNames ? '' : 'instigator', subBuilder: Address.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<Parameter>(5, _omitFieldNames ? '' : 'parameter', subBuilder: Parameter.create)
    ..aOM<ReceiveName>(6, _omitFieldNames ? '' : 'receiveName', subBuilder: ReceiveName.create)
    ..pc<ContractEvent>(7, _omitFieldNames ? '' : 'events', $pb.PbFieldType.PM, subBuilder: ContractEvent.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InstanceUpdatedEvent clone() => InstanceUpdatedEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InstanceUpdatedEvent copyWith(void Function(InstanceUpdatedEvent) updates) => super.copyWith((message) => updates(message as InstanceUpdatedEvent)) as InstanceUpdatedEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InstanceUpdatedEvent create() => InstanceUpdatedEvent._();
  InstanceUpdatedEvent createEmptyInstance() => create();
  static $pb.PbList<InstanceUpdatedEvent> createRepeated() => $pb.PbList<InstanceUpdatedEvent>();
  @$core.pragma('dart2js:noInline')
  static InstanceUpdatedEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InstanceUpdatedEvent>(create);
  static InstanceUpdatedEvent? _defaultInstance;

  /// Contract version.
  @$pb.TagNumber(1)
  ContractVersion get contractVersion => $_getN(0);
  @$pb.TagNumber(1)
  set contractVersion(ContractVersion v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasContractVersion() => $_has(0);
  @$pb.TagNumber(1)
  void clearContractVersion() => clearField(1);

  /// Address of the affected instance.
  @$pb.TagNumber(2)
  ContractAddress get address => $_getN(1);
  @$pb.TagNumber(2)
  set address(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearAddress() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureAddress() => $_ensure(1);

  /// The origin of the message to the smart contract. This can be
  /// either an account or a smart contract.
  @$pb.TagNumber(3)
  Address get instigator => $_getN(2);
  @$pb.TagNumber(3)
  set instigator(Address v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInstigator() => $_has(2);
  @$pb.TagNumber(3)
  void clearInstigator() => clearField(3);
  @$pb.TagNumber(3)
  Address ensureInstigator() => $_ensure(2);

  /// The amount the method was invoked with.
  @$pb.TagNumber(4)
  Amount get amount => $_getN(3);
  @$pb.TagNumber(4)
  set amount(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasAmount() => $_has(3);
  @$pb.TagNumber(4)
  void clearAmount() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureAmount() => $_ensure(3);

  /// The parameter passed to the method.
  @$pb.TagNumber(5)
  Parameter get parameter => $_getN(4);
  @$pb.TagNumber(5)
  set parameter(Parameter v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasParameter() => $_has(4);
  @$pb.TagNumber(5)
  void clearParameter() => clearField(5);
  @$pb.TagNumber(5)
  Parameter ensureParameter() => $_ensure(4);

  /// The name of the method that was executed.
  @$pb.TagNumber(6)
  ReceiveName get receiveName => $_getN(5);
  @$pb.TagNumber(6)
  set receiveName(ReceiveName v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasReceiveName() => $_has(5);
  @$pb.TagNumber(6)
  void clearReceiveName() => clearField(6);
  @$pb.TagNumber(6)
  ReceiveName ensureReceiveName() => $_ensure(5);

  /// Any contract events that might have been generated by the contract execution.
  @$pb.TagNumber(7)
  $core.List<ContractEvent> get events => $_getList(6);
}

/// A contract transferred an amount to an account.
class ContractTraceElement_Transferred extends $pb.GeneratedMessage {
  factory ContractTraceElement_Transferred({
    ContractAddress? sender,
    Amount? amount,
    AccountAddress? receiver,
  }) {
    final $result = create();
    if (sender != null) {
      $result.sender = sender;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (receiver != null) {
      $result.receiver = receiver;
    }
    return $result;
  }
  ContractTraceElement_Transferred._() : super();
  factory ContractTraceElement_Transferred.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractTraceElement_Transferred.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractTraceElement.Transferred', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ContractAddress>(1, _omitFieldNames ? '' : 'sender', subBuilder: ContractAddress.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<AccountAddress>(3, _omitFieldNames ? '' : 'receiver', subBuilder: AccountAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Transferred clone() => ContractTraceElement_Transferred()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Transferred copyWith(void Function(ContractTraceElement_Transferred) updates) => super.copyWith((message) => updates(message as ContractTraceElement_Transferred)) as ContractTraceElement_Transferred;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Transferred create() => ContractTraceElement_Transferred._();
  ContractTraceElement_Transferred createEmptyInstance() => create();
  static $pb.PbList<ContractTraceElement_Transferred> createRepeated() => $pb.PbList<ContractTraceElement_Transferred>();
  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Transferred getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractTraceElement_Transferred>(create);
  static ContractTraceElement_Transferred? _defaultInstance;

  /// Sender contract.
  @$pb.TagNumber(1)
  ContractAddress get sender => $_getN(0);
  @$pb.TagNumber(1)
  set sender(ContractAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSender() => $_has(0);
  @$pb.TagNumber(1)
  void clearSender() => clearField(1);
  @$pb.TagNumber(1)
  ContractAddress ensureSender() => $_ensure(0);

  /// Amount transferred.
  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);

  /// Receiver account.
  @$pb.TagNumber(3)
  AccountAddress get receiver => $_getN(2);
  @$pb.TagNumber(3)
  set receiver(AccountAddress v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasReceiver() => $_has(2);
  @$pb.TagNumber(3)
  void clearReceiver() => clearField(3);
  @$pb.TagNumber(3)
  AccountAddress ensureReceiver() => $_ensure(2);
}

/// A contract was interrupted.
/// This occurs when a contract invokes another contract or makes a transfer to an account.
class ContractTraceElement_Interrupted extends $pb.GeneratedMessage {
  factory ContractTraceElement_Interrupted({
    ContractAddress? address,
    $core.Iterable<ContractEvent>? events,
  }) {
    final $result = create();
    if (address != null) {
      $result.address = address;
    }
    if (events != null) {
      $result.events.addAll(events);
    }
    return $result;
  }
  ContractTraceElement_Interrupted._() : super();
  factory ContractTraceElement_Interrupted.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractTraceElement_Interrupted.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractTraceElement.Interrupted', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ContractAddress>(1, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..pc<ContractEvent>(2, _omitFieldNames ? '' : 'events', $pb.PbFieldType.PM, subBuilder: ContractEvent.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Interrupted clone() => ContractTraceElement_Interrupted()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Interrupted copyWith(void Function(ContractTraceElement_Interrupted) updates) => super.copyWith((message) => updates(message as ContractTraceElement_Interrupted)) as ContractTraceElement_Interrupted;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Interrupted create() => ContractTraceElement_Interrupted._();
  ContractTraceElement_Interrupted createEmptyInstance() => create();
  static $pb.PbList<ContractTraceElement_Interrupted> createRepeated() => $pb.PbList<ContractTraceElement_Interrupted>();
  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Interrupted getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractTraceElement_Interrupted>(create);
  static ContractTraceElement_Interrupted? _defaultInstance;

  /// The contract interrupted.
  @$pb.TagNumber(1)
  ContractAddress get address => $_getN(0);
  @$pb.TagNumber(1)
  set address(ContractAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAddress() => $_has(0);
  @$pb.TagNumber(1)
  void clearAddress() => clearField(1);
  @$pb.TagNumber(1)
  ContractAddress ensureAddress() => $_ensure(0);

  /// The events generated up until the interruption.
  @$pb.TagNumber(2)
  $core.List<ContractEvent> get events => $_getList(1);
}

/// A previously interrupted contract was resumed.
class ContractTraceElement_Resumed extends $pb.GeneratedMessage {
  factory ContractTraceElement_Resumed({
    ContractAddress? address,
    $core.bool? success,
  }) {
    final $result = create();
    if (address != null) {
      $result.address = address;
    }
    if (success != null) {
      $result.success = success;
    }
    return $result;
  }
  ContractTraceElement_Resumed._() : super();
  factory ContractTraceElement_Resumed.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractTraceElement_Resumed.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractTraceElement.Resumed', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ContractAddress>(1, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..aOB(2, _omitFieldNames ? '' : 'success')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Resumed clone() => ContractTraceElement_Resumed()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Resumed copyWith(void Function(ContractTraceElement_Resumed) updates) => super.copyWith((message) => updates(message as ContractTraceElement_Resumed)) as ContractTraceElement_Resumed;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Resumed create() => ContractTraceElement_Resumed._();
  ContractTraceElement_Resumed createEmptyInstance() => create();
  static $pb.PbList<ContractTraceElement_Resumed> createRepeated() => $pb.PbList<ContractTraceElement_Resumed>();
  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Resumed getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractTraceElement_Resumed>(create);
  static ContractTraceElement_Resumed? _defaultInstance;

  /// The contract resumed.
  @$pb.TagNumber(1)
  ContractAddress get address => $_getN(0);
  @$pb.TagNumber(1)
  set address(ContractAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAddress() => $_has(0);
  @$pb.TagNumber(1)
  void clearAddress() => clearField(1);
  @$pb.TagNumber(1)
  ContractAddress ensureAddress() => $_ensure(0);

  /// Whether the action that caused the interruption (invoke contract or make transfer) was successful or not.
  @$pb.TagNumber(2)
  $core.bool get success => $_getBF(1);
  @$pb.TagNumber(2)
  set success($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasSuccess() => $_has(1);
  @$pb.TagNumber(2)
  void clearSuccess() => clearField(2);
}

/// A previously interrupted contract was resumed.
class ContractTraceElement_Upgraded extends $pb.GeneratedMessage {
  factory ContractTraceElement_Upgraded({
    ContractAddress? address,
    ModuleRef? from,
    ModuleRef? to,
  }) {
    final $result = create();
    if (address != null) {
      $result.address = address;
    }
    if (from != null) {
      $result.from = from;
    }
    if (to != null) {
      $result.to = to;
    }
    return $result;
  }
  ContractTraceElement_Upgraded._() : super();
  factory ContractTraceElement_Upgraded.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractTraceElement_Upgraded.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractTraceElement.Upgraded', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ContractAddress>(1, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..aOM<ModuleRef>(2, _omitFieldNames ? '' : 'from', subBuilder: ModuleRef.create)
    ..aOM<ModuleRef>(3, _omitFieldNames ? '' : 'to', subBuilder: ModuleRef.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Upgraded clone() => ContractTraceElement_Upgraded()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractTraceElement_Upgraded copyWith(void Function(ContractTraceElement_Upgraded) updates) => super.copyWith((message) => updates(message as ContractTraceElement_Upgraded)) as ContractTraceElement_Upgraded;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Upgraded create() => ContractTraceElement_Upgraded._();
  ContractTraceElement_Upgraded createEmptyInstance() => create();
  static $pb.PbList<ContractTraceElement_Upgraded> createRepeated() => $pb.PbList<ContractTraceElement_Upgraded>();
  @$core.pragma('dart2js:noInline')
  static ContractTraceElement_Upgraded getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractTraceElement_Upgraded>(create);
  static ContractTraceElement_Upgraded? _defaultInstance;

  /// The that was upgraded.
  @$pb.TagNumber(1)
  ContractAddress get address => $_getN(0);
  @$pb.TagNumber(1)
  set address(ContractAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAddress() => $_has(0);
  @$pb.TagNumber(1)
  void clearAddress() => clearField(1);
  @$pb.TagNumber(1)
  ContractAddress ensureAddress() => $_ensure(0);

  /// The module from which the contract was upgraded.
  @$pb.TagNumber(2)
  ModuleRef get from => $_getN(1);
  @$pb.TagNumber(2)
  set from(ModuleRef v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasFrom() => $_has(1);
  @$pb.TagNumber(2)
  void clearFrom() => clearField(2);
  @$pb.TagNumber(2)
  ModuleRef ensureFrom() => $_ensure(1);

  /// The module to which it was upgraded.
  @$pb.TagNumber(3)
  ModuleRef get to => $_getN(2);
  @$pb.TagNumber(3)
  set to(ModuleRef v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasTo() => $_has(2);
  @$pb.TagNumber(3)
  void clearTo() => clearField(3);
  @$pb.TagNumber(3)
  ModuleRef ensureTo() => $_ensure(2);
}

enum ContractTraceElement_Element {
  updated, 
  transferred, 
  interrupted, 
  resumed, 
  upgraded, 
  notSet
}

/// Effects produced by successful smart contract invocations.
/// A single invocation will produce a sequence of these effects.
class ContractTraceElement extends $pb.GeneratedMessage {
  factory ContractTraceElement({
    InstanceUpdatedEvent? updated,
    ContractTraceElement_Transferred? transferred,
    ContractTraceElement_Interrupted? interrupted,
    ContractTraceElement_Resumed? resumed,
    ContractTraceElement_Upgraded? upgraded,
  }) {
    final $result = create();
    if (updated != null) {
      $result.updated = updated;
    }
    if (transferred != null) {
      $result.transferred = transferred;
    }
    if (interrupted != null) {
      $result.interrupted = interrupted;
    }
    if (resumed != null) {
      $result.resumed = resumed;
    }
    if (upgraded != null) {
      $result.upgraded = upgraded;
    }
    return $result;
  }
  ContractTraceElement._() : super();
  factory ContractTraceElement.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ContractTraceElement.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, ContractTraceElement_Element> _ContractTraceElement_ElementByTag = {
    1 : ContractTraceElement_Element.updated,
    2 : ContractTraceElement_Element.transferred,
    3 : ContractTraceElement_Element.interrupted,
    4 : ContractTraceElement_Element.resumed,
    5 : ContractTraceElement_Element.upgraded,
    0 : ContractTraceElement_Element.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ContractTraceElement', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5])
    ..aOM<InstanceUpdatedEvent>(1, _omitFieldNames ? '' : 'updated', subBuilder: InstanceUpdatedEvent.create)
    ..aOM<ContractTraceElement_Transferred>(2, _omitFieldNames ? '' : 'transferred', subBuilder: ContractTraceElement_Transferred.create)
    ..aOM<ContractTraceElement_Interrupted>(3, _omitFieldNames ? '' : 'interrupted', subBuilder: ContractTraceElement_Interrupted.create)
    ..aOM<ContractTraceElement_Resumed>(4, _omitFieldNames ? '' : 'resumed', subBuilder: ContractTraceElement_Resumed.create)
    ..aOM<ContractTraceElement_Upgraded>(5, _omitFieldNames ? '' : 'upgraded', subBuilder: ContractTraceElement_Upgraded.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ContractTraceElement clone() => ContractTraceElement()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ContractTraceElement copyWith(void Function(ContractTraceElement) updates) => super.copyWith((message) => updates(message as ContractTraceElement)) as ContractTraceElement;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ContractTraceElement create() => ContractTraceElement._();
  ContractTraceElement createEmptyInstance() => create();
  static $pb.PbList<ContractTraceElement> createRepeated() => $pb.PbList<ContractTraceElement>();
  @$core.pragma('dart2js:noInline')
  static ContractTraceElement getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ContractTraceElement>(create);
  static ContractTraceElement? _defaultInstance;

  ContractTraceElement_Element whichElement() => _ContractTraceElement_ElementByTag[$_whichOneof(0)]!;
  void clearElement() => clearField($_whichOneof(0));

  /// A contract instance was updated.
  @$pb.TagNumber(1)
  InstanceUpdatedEvent get updated => $_getN(0);
  @$pb.TagNumber(1)
  set updated(InstanceUpdatedEvent v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasUpdated() => $_has(0);
  @$pb.TagNumber(1)
  void clearUpdated() => clearField(1);
  @$pb.TagNumber(1)
  InstanceUpdatedEvent ensureUpdated() => $_ensure(0);

  /// A contract transferred an amount to an account.
  @$pb.TagNumber(2)
  ContractTraceElement_Transferred get transferred => $_getN(1);
  @$pb.TagNumber(2)
  set transferred(ContractTraceElement_Transferred v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTransferred() => $_has(1);
  @$pb.TagNumber(2)
  void clearTransferred() => clearField(2);
  @$pb.TagNumber(2)
  ContractTraceElement_Transferred ensureTransferred() => $_ensure(1);

  /// A contract was interrupted.
  /// This occurs when a contract invokes another contract or makes a transfer to an account.
  @$pb.TagNumber(3)
  ContractTraceElement_Interrupted get interrupted => $_getN(2);
  @$pb.TagNumber(3)
  set interrupted(ContractTraceElement_Interrupted v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInterrupted() => $_has(2);
  @$pb.TagNumber(3)
  void clearInterrupted() => clearField(3);
  @$pb.TagNumber(3)
  ContractTraceElement_Interrupted ensureInterrupted() => $_ensure(2);

  /// A previously interrupted contract was resumed.
  @$pb.TagNumber(4)
  ContractTraceElement_Resumed get resumed => $_getN(3);
  @$pb.TagNumber(4)
  set resumed(ContractTraceElement_Resumed v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasResumed() => $_has(3);
  @$pb.TagNumber(4)
  void clearResumed() => clearField(4);
  @$pb.TagNumber(4)
  ContractTraceElement_Resumed ensureResumed() => $_ensure(3);

  /// A contract was upgraded.
  @$pb.TagNumber(5)
  ContractTraceElement_Upgraded get upgraded => $_getN(4);
  @$pb.TagNumber(5)
  set upgraded(ContractTraceElement_Upgraded v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasUpgraded() => $_has(4);
  @$pb.TagNumber(5)
  void clearUpgraded() => clearField(5);
  @$pb.TagNumber(5)
  ContractTraceElement_Upgraded ensureUpgraded() => $_ensure(4);
}

/// Result of a successful change of baker keys.
class BakerKeysEvent extends $pb.GeneratedMessage {
  factory BakerKeysEvent({
    BakerId? bakerId,
    AccountAddress? account,
    BakerSignatureVerifyKey? signKey,
    BakerElectionVerifyKey? electionKey,
    BakerAggregationVerifyKey? aggregationKey,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (account != null) {
      $result.account = account;
    }
    if (signKey != null) {
      $result.signKey = signKey;
    }
    if (electionKey != null) {
      $result.electionKey = electionKey;
    }
    if (aggregationKey != null) {
      $result.aggregationKey = aggregationKey;
    }
    return $result;
  }
  BakerKeysEvent._() : super();
  factory BakerKeysEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerKeysEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerKeysEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<BakerSignatureVerifyKey>(3, _omitFieldNames ? '' : 'signKey', subBuilder: BakerSignatureVerifyKey.create)
    ..aOM<BakerElectionVerifyKey>(4, _omitFieldNames ? '' : 'electionKey', subBuilder: BakerElectionVerifyKey.create)
    ..aOM<BakerAggregationVerifyKey>(5, _omitFieldNames ? '' : 'aggregationKey', subBuilder: BakerAggregationVerifyKey.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerKeysEvent clone() => BakerKeysEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerKeysEvent copyWith(void Function(BakerKeysEvent) updates) => super.copyWith((message) => updates(message as BakerKeysEvent)) as BakerKeysEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerKeysEvent create() => BakerKeysEvent._();
  BakerKeysEvent createEmptyInstance() => create();
  static $pb.PbList<BakerKeysEvent> createRepeated() => $pb.PbList<BakerKeysEvent>();
  @$core.pragma('dart2js:noInline')
  static BakerKeysEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerKeysEvent>(create);
  static BakerKeysEvent? _defaultInstance;

  /// ID of the baker whose keys were changed.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// Account address of the baker.
  @$pb.TagNumber(2)
  AccountAddress get account => $_getN(1);
  @$pb.TagNumber(2)
  set account(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAccount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAccount() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureAccount() => $_ensure(1);

  /// The new public key for verifying block signatures.
  @$pb.TagNumber(3)
  BakerSignatureVerifyKey get signKey => $_getN(2);
  @$pb.TagNumber(3)
  set signKey(BakerSignatureVerifyKey v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasSignKey() => $_has(2);
  @$pb.TagNumber(3)
  void clearSignKey() => clearField(3);
  @$pb.TagNumber(3)
  BakerSignatureVerifyKey ensureSignKey() => $_ensure(2);

  /// The new public key for verifying whether the baker won the block
  /// lottery.
  @$pb.TagNumber(4)
  BakerElectionVerifyKey get electionKey => $_getN(3);
  @$pb.TagNumber(4)
  set electionKey(BakerElectionVerifyKey v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasElectionKey() => $_has(3);
  @$pb.TagNumber(4)
  void clearElectionKey() => clearField(4);
  @$pb.TagNumber(4)
  BakerElectionVerifyKey ensureElectionKey() => $_ensure(3);

  /// The new public key for verifying finalization records.
  @$pb.TagNumber(5)
  BakerAggregationVerifyKey get aggregationKey => $_getN(4);
  @$pb.TagNumber(5)
  set aggregationKey(BakerAggregationVerifyKey v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasAggregationKey() => $_has(4);
  @$pb.TagNumber(5)
  void clearAggregationKey() => clearField(5);
  @$pb.TagNumber(5)
  BakerAggregationVerifyKey ensureAggregationKey() => $_ensure(4);
}

/// A memo which can be included as part of a transfer. Max size is 256 bytes.
class Memo extends $pb.GeneratedMessage {
  factory Memo({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Memo._() : super();
  factory Memo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Memo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Memo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Memo clone() => Memo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Memo copyWith(void Function(Memo) updates) => super.copyWith((message) => updates(message as Memo)) as Memo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Memo create() => Memo._();
  Memo createEmptyInstance() => create();
  static $pb.PbList<Memo> createRepeated() => $pb.PbList<Memo>();
  @$core.pragma('dart2js:noInline')
  static Memo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Memo>(create);
  static Memo? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

class BakerStakeUpdatedData extends $pb.GeneratedMessage {
  factory BakerStakeUpdatedData({
    BakerId? bakerId,
    Amount? newStake,
    $core.bool? increased,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (newStake != null) {
      $result.newStake = newStake;
    }
    if (increased != null) {
      $result.increased = increased;
    }
    return $result;
  }
  BakerStakeUpdatedData._() : super();
  factory BakerStakeUpdatedData.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerStakeUpdatedData.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerStakeUpdatedData', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'newStake', subBuilder: Amount.create)
    ..aOB(3, _omitFieldNames ? '' : 'increased')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerStakeUpdatedData clone() => BakerStakeUpdatedData()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerStakeUpdatedData copyWith(void Function(BakerStakeUpdatedData) updates) => super.copyWith((message) => updates(message as BakerStakeUpdatedData)) as BakerStakeUpdatedData;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerStakeUpdatedData create() => BakerStakeUpdatedData._();
  BakerStakeUpdatedData createEmptyInstance() => create();
  static $pb.PbList<BakerStakeUpdatedData> createRepeated() => $pb.PbList<BakerStakeUpdatedData>();
  @$core.pragma('dart2js:noInline')
  static BakerStakeUpdatedData getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerStakeUpdatedData>(create);
  static BakerStakeUpdatedData? _defaultInstance;

  /// Affected baker.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// New stake.
  @$pb.TagNumber(2)
  Amount get newStake => $_getN(1);
  @$pb.TagNumber(2)
  set newStake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureNewStake() => $_ensure(1);

  /// A boolean which indicates whether it increased
  /// (`true`) or decreased (`false`).
  @$pb.TagNumber(3)
  $core.bool get increased => $_getBF(2);
  @$pb.TagNumber(3)
  set increased($core.bool v) { $_setBool(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasIncreased() => $_has(2);
  @$pb.TagNumber(3)
  void clearIncreased() => clearField(3);
}

/// Event generated when one or more encrypted amounts are consumed from the account.
class EncryptedAmountRemovedEvent extends $pb.GeneratedMessage {
  factory EncryptedAmountRemovedEvent({
    AccountAddress? account,
    EncryptedAmount? newAmount,
    EncryptedAmount? inputAmount,
    $fixnum.Int64? upToIndex,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (newAmount != null) {
      $result.newAmount = newAmount;
    }
    if (inputAmount != null) {
      $result.inputAmount = inputAmount;
    }
    if (upToIndex != null) {
      $result.upToIndex = upToIndex;
    }
    return $result;
  }
  EncryptedAmountRemovedEvent._() : super();
  factory EncryptedAmountRemovedEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EncryptedAmountRemovedEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EncryptedAmountRemovedEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<EncryptedAmount>(2, _omitFieldNames ? '' : 'newAmount', subBuilder: EncryptedAmount.create)
    ..aOM<EncryptedAmount>(3, _omitFieldNames ? '' : 'inputAmount', subBuilder: EncryptedAmount.create)
    ..a<$fixnum.Int64>(4, _omitFieldNames ? '' : 'upToIndex', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EncryptedAmountRemovedEvent clone() => EncryptedAmountRemovedEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EncryptedAmountRemovedEvent copyWith(void Function(EncryptedAmountRemovedEvent) updates) => super.copyWith((message) => updates(message as EncryptedAmountRemovedEvent)) as EncryptedAmountRemovedEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EncryptedAmountRemovedEvent create() => EncryptedAmountRemovedEvent._();
  EncryptedAmountRemovedEvent createEmptyInstance() => create();
  static $pb.PbList<EncryptedAmountRemovedEvent> createRepeated() => $pb.PbList<EncryptedAmountRemovedEvent>();
  @$core.pragma('dart2js:noInline')
  static EncryptedAmountRemovedEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EncryptedAmountRemovedEvent>(create);
  static EncryptedAmountRemovedEvent? _defaultInstance;

  /// The affected account.
  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  /// The new self encrypted amount on the affected account.
  @$pb.TagNumber(2)
  EncryptedAmount get newAmount => $_getN(1);
  @$pb.TagNumber(2)
  set newAmount(EncryptedAmount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewAmount() => clearField(2);
  @$pb.TagNumber(2)
  EncryptedAmount ensureNewAmount() => $_ensure(1);

  /// The input encrypted amount that was removed.
  @$pb.TagNumber(3)
  EncryptedAmount get inputAmount => $_getN(2);
  @$pb.TagNumber(3)
  set inputAmount(EncryptedAmount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInputAmount() => $_has(2);
  @$pb.TagNumber(3)
  void clearInputAmount() => clearField(3);
  @$pb.TagNumber(3)
  EncryptedAmount ensureInputAmount() => $_ensure(2);

  /// The index indicating which amounts were used.
  @$pb.TagNumber(4)
  $fixnum.Int64 get upToIndex => $_getI64(3);
  @$pb.TagNumber(4)
  set upToIndex($fixnum.Int64 v) { $_setInt64(3, v); }
  @$pb.TagNumber(4)
  $core.bool hasUpToIndex() => $_has(3);
  @$pb.TagNumber(4)
  void clearUpToIndex() => clearField(4);
}

/// Event generated when an account receives a new encrypted amount.
class NewEncryptedAmountEvent extends $pb.GeneratedMessage {
  factory NewEncryptedAmountEvent({
    AccountAddress? receiver,
    $fixnum.Int64? newIndex,
    EncryptedAmount? encryptedAmount,
  }) {
    final $result = create();
    if (receiver != null) {
      $result.receiver = receiver;
    }
    if (newIndex != null) {
      $result.newIndex = newIndex;
    }
    if (encryptedAmount != null) {
      $result.encryptedAmount = encryptedAmount;
    }
    return $result;
  }
  NewEncryptedAmountEvent._() : super();
  factory NewEncryptedAmountEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NewEncryptedAmountEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NewEncryptedAmountEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'receiver', subBuilder: AccountAddress.create)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'newIndex', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..aOM<EncryptedAmount>(3, _omitFieldNames ? '' : 'encryptedAmount', subBuilder: EncryptedAmount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NewEncryptedAmountEvent clone() => NewEncryptedAmountEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NewEncryptedAmountEvent copyWith(void Function(NewEncryptedAmountEvent) updates) => super.copyWith((message) => updates(message as NewEncryptedAmountEvent)) as NewEncryptedAmountEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NewEncryptedAmountEvent create() => NewEncryptedAmountEvent._();
  NewEncryptedAmountEvent createEmptyInstance() => create();
  static $pb.PbList<NewEncryptedAmountEvent> createRepeated() => $pb.PbList<NewEncryptedAmountEvent>();
  @$core.pragma('dart2js:noInline')
  static NewEncryptedAmountEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NewEncryptedAmountEvent>(create);
  static NewEncryptedAmountEvent? _defaultInstance;

  /// The account onto which the amount was added.
  @$pb.TagNumber(1)
  AccountAddress get receiver => $_getN(0);
  @$pb.TagNumber(1)
  set receiver(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasReceiver() => $_has(0);
  @$pb.TagNumber(1)
  void clearReceiver() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureReceiver() => $_ensure(0);

  /// The index the amount was assigned.
  @$pb.TagNumber(2)
  $fixnum.Int64 get newIndex => $_getI64(1);
  @$pb.TagNumber(2)
  set newIndex($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewIndex() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewIndex() => clearField(2);

  /// The encrypted amount that was added.
  @$pb.TagNumber(3)
  EncryptedAmount get encryptedAmount => $_getN(2);
  @$pb.TagNumber(3)
  set encryptedAmount(EncryptedAmount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEncryptedAmount() => $_has(2);
  @$pb.TagNumber(3)
  void clearEncryptedAmount() => clearField(3);
  @$pb.TagNumber(3)
  EncryptedAmount ensureEncryptedAmount() => $_ensure(2);
}

class EncryptedSelfAmountAddedEvent extends $pb.GeneratedMessage {
  factory EncryptedSelfAmountAddedEvent({
    AccountAddress? account,
    EncryptedAmount? newAmount,
    Amount? amount,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (newAmount != null) {
      $result.newAmount = newAmount;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    return $result;
  }
  EncryptedSelfAmountAddedEvent._() : super();
  factory EncryptedSelfAmountAddedEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EncryptedSelfAmountAddedEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EncryptedSelfAmountAddedEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<EncryptedAmount>(2, _omitFieldNames ? '' : 'newAmount', subBuilder: EncryptedAmount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EncryptedSelfAmountAddedEvent clone() => EncryptedSelfAmountAddedEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EncryptedSelfAmountAddedEvent copyWith(void Function(EncryptedSelfAmountAddedEvent) updates) => super.copyWith((message) => updates(message as EncryptedSelfAmountAddedEvent)) as EncryptedSelfAmountAddedEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EncryptedSelfAmountAddedEvent create() => EncryptedSelfAmountAddedEvent._();
  EncryptedSelfAmountAddedEvent createEmptyInstance() => create();
  static $pb.PbList<EncryptedSelfAmountAddedEvent> createRepeated() => $pb.PbList<EncryptedSelfAmountAddedEvent>();
  @$core.pragma('dart2js:noInline')
  static EncryptedSelfAmountAddedEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EncryptedSelfAmountAddedEvent>(create);
  static EncryptedSelfAmountAddedEvent? _defaultInstance;

  /// The affected account.
  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  /// The new self encrypted amount of the account.
  @$pb.TagNumber(2)
  EncryptedAmount get newAmount => $_getN(1);
  @$pb.TagNumber(2)
  set newAmount(EncryptedAmount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewAmount() => clearField(2);
  @$pb.TagNumber(2)
  EncryptedAmount ensureNewAmount() => $_ensure(1);

  /// The amount that was transferred from public to encrypted balance.
  @$pb.TagNumber(3)
  Amount get amount => $_getN(2);
  @$pb.TagNumber(3)
  set amount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAmount() => $_has(2);
  @$pb.TagNumber(3)
  void clearAmount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureAmount() => $_ensure(2);
}

/// Data registered on the chain with a register data transaction.
class RegisteredData extends $pb.GeneratedMessage {
  factory RegisteredData({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  RegisteredData._() : super();
  factory RegisteredData.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RegisteredData.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RegisteredData', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RegisteredData clone() => RegisteredData()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RegisteredData copyWith(void Function(RegisteredData) updates) => super.copyWith((message) => updates(message as RegisteredData)) as RegisteredData;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RegisteredData create() => RegisteredData._();
  RegisteredData createEmptyInstance() => create();
  static $pb.PbList<RegisteredData> createRepeated() => $pb.PbList<RegisteredData>();
  @$core.pragma('dart2js:noInline')
  static RegisteredData getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RegisteredData>(create);
  static RegisteredData? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A baker was added.
class BakerEvent_BakerAdded extends $pb.GeneratedMessage {
  factory BakerEvent_BakerAdded({
    BakerKeysEvent? keysEvent,
    Amount? stake,
    $core.bool? restakeEarnings,
  }) {
    final $result = create();
    if (keysEvent != null) {
      $result.keysEvent = keysEvent;
    }
    if (stake != null) {
      $result.stake = stake;
    }
    if (restakeEarnings != null) {
      $result.restakeEarnings = restakeEarnings;
    }
    return $result;
  }
  BakerEvent_BakerAdded._() : super();
  factory BakerEvent_BakerAdded.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerAdded.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerAdded', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerKeysEvent>(1, _omitFieldNames ? '' : 'keysEvent', subBuilder: BakerKeysEvent.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'stake', subBuilder: Amount.create)
    ..aOB(3, _omitFieldNames ? '' : 'restakeEarnings')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerAdded clone() => BakerEvent_BakerAdded()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerAdded copyWith(void Function(BakerEvent_BakerAdded) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerAdded)) as BakerEvent_BakerAdded;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerAdded create() => BakerEvent_BakerAdded._();
  BakerEvent_BakerAdded createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerAdded> createRepeated() => $pb.PbList<BakerEvent_BakerAdded>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerAdded getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerAdded>(create);
  static BakerEvent_BakerAdded? _defaultInstance;

  /// The keys with which the baker registered.
  @$pb.TagNumber(1)
  BakerKeysEvent get keysEvent => $_getN(0);
  @$pb.TagNumber(1)
  set keysEvent(BakerKeysEvent v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasKeysEvent() => $_has(0);
  @$pb.TagNumber(1)
  void clearKeysEvent() => clearField(1);
  @$pb.TagNumber(1)
  BakerKeysEvent ensureKeysEvent() => $_ensure(0);

  /// The amount the account staked to become a baker. This amount is
  /// locked.
  @$pb.TagNumber(2)
  Amount get stake => $_getN(1);
  @$pb.TagNumber(2)
  set stake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureStake() => $_ensure(1);

  /// Whether the baker will automatically add earnings to their stake or
  /// not.
  @$pb.TagNumber(3)
  $core.bool get restakeEarnings => $_getBF(2);
  @$pb.TagNumber(3)
  set restakeEarnings($core.bool v) { $_setBool(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasRestakeEarnings() => $_has(2);
  @$pb.TagNumber(3)
  void clearRestakeEarnings() => clearField(3);
}

/// Baker stake increased.
class BakerEvent_BakerStakeIncreased extends $pb.GeneratedMessage {
  factory BakerEvent_BakerStakeIncreased({
    BakerId? bakerId,
    Amount? newStake,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (newStake != null) {
      $result.newStake = newStake;
    }
    return $result;
  }
  BakerEvent_BakerStakeIncreased._() : super();
  factory BakerEvent_BakerStakeIncreased.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerStakeIncreased.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerStakeIncreased', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'newStake', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerStakeIncreased clone() => BakerEvent_BakerStakeIncreased()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerStakeIncreased copyWith(void Function(BakerEvent_BakerStakeIncreased) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerStakeIncreased)) as BakerEvent_BakerStakeIncreased;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerStakeIncreased create() => BakerEvent_BakerStakeIncreased._();
  BakerEvent_BakerStakeIncreased createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerStakeIncreased> createRepeated() => $pb.PbList<BakerEvent_BakerStakeIncreased>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerStakeIncreased getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerStakeIncreased>(create);
  static BakerEvent_BakerStakeIncreased? _defaultInstance;

  /// Baker's id.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The new stake.
  @$pb.TagNumber(2)
  Amount get newStake => $_getN(1);
  @$pb.TagNumber(2)
  set newStake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureNewStake() => $_ensure(1);
}

class BakerEvent_BakerStakeDecreased extends $pb.GeneratedMessage {
  factory BakerEvent_BakerStakeDecreased({
    BakerId? bakerId,
    Amount? newStake,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (newStake != null) {
      $result.newStake = newStake;
    }
    return $result;
  }
  BakerEvent_BakerStakeDecreased._() : super();
  factory BakerEvent_BakerStakeDecreased.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerStakeDecreased.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerStakeDecreased', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'newStake', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerStakeDecreased clone() => BakerEvent_BakerStakeDecreased()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerStakeDecreased copyWith(void Function(BakerEvent_BakerStakeDecreased) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerStakeDecreased)) as BakerEvent_BakerStakeDecreased;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerStakeDecreased create() => BakerEvent_BakerStakeDecreased._();
  BakerEvent_BakerStakeDecreased createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerStakeDecreased> createRepeated() => $pb.PbList<BakerEvent_BakerStakeDecreased>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerStakeDecreased getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerStakeDecreased>(create);
  static BakerEvent_BakerStakeDecreased? _defaultInstance;

  /// Baker's id.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The new stake.
  @$pb.TagNumber(2)
  Amount get newStake => $_getN(1);
  @$pb.TagNumber(2)
  set newStake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureNewStake() => $_ensure(1);
}

class BakerEvent_BakerRestakeEarningsUpdated extends $pb.GeneratedMessage {
  factory BakerEvent_BakerRestakeEarningsUpdated({
    BakerId? bakerId,
    $core.bool? restakeEarnings,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (restakeEarnings != null) {
      $result.restakeEarnings = restakeEarnings;
    }
    return $result;
  }
  BakerEvent_BakerRestakeEarningsUpdated._() : super();
  factory BakerEvent_BakerRestakeEarningsUpdated.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerRestakeEarningsUpdated.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerRestakeEarningsUpdated', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOB(2, _omitFieldNames ? '' : 'restakeEarnings')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerRestakeEarningsUpdated clone() => BakerEvent_BakerRestakeEarningsUpdated()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerRestakeEarningsUpdated copyWith(void Function(BakerEvent_BakerRestakeEarningsUpdated) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerRestakeEarningsUpdated)) as BakerEvent_BakerRestakeEarningsUpdated;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerRestakeEarningsUpdated create() => BakerEvent_BakerRestakeEarningsUpdated._();
  BakerEvent_BakerRestakeEarningsUpdated createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerRestakeEarningsUpdated> createRepeated() => $pb.PbList<BakerEvent_BakerRestakeEarningsUpdated>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerRestakeEarningsUpdated getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerRestakeEarningsUpdated>(create);
  static BakerEvent_BakerRestakeEarningsUpdated? _defaultInstance;

  /// Baker's id.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The new value of the flag.
  @$pb.TagNumber(2)
  $core.bool get restakeEarnings => $_getBF(1);
  @$pb.TagNumber(2)
  set restakeEarnings($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasRestakeEarnings() => $_has(1);
  @$pb.TagNumber(2)
  void clearRestakeEarnings() => clearField(2);
}

/// Updated open status for a baker pool.
class BakerEvent_BakerSetOpenStatus extends $pb.GeneratedMessage {
  factory BakerEvent_BakerSetOpenStatus({
    BakerId? bakerId,
    OpenStatus? openStatus,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (openStatus != null) {
      $result.openStatus = openStatus;
    }
    return $result;
  }
  BakerEvent_BakerSetOpenStatus._() : super();
  factory BakerEvent_BakerSetOpenStatus.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerSetOpenStatus.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerSetOpenStatus', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..e<OpenStatus>(2, _omitFieldNames ? '' : 'openStatus', $pb.PbFieldType.OE, defaultOrMaker: OpenStatus.OPEN_STATUS_OPEN_FOR_ALL, valueOf: OpenStatus.valueOf, enumValues: OpenStatus.values)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetOpenStatus clone() => BakerEvent_BakerSetOpenStatus()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetOpenStatus copyWith(void Function(BakerEvent_BakerSetOpenStatus) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerSetOpenStatus)) as BakerEvent_BakerSetOpenStatus;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetOpenStatus create() => BakerEvent_BakerSetOpenStatus._();
  BakerEvent_BakerSetOpenStatus createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerSetOpenStatus> createRepeated() => $pb.PbList<BakerEvent_BakerSetOpenStatus>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetOpenStatus getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerSetOpenStatus>(create);
  static BakerEvent_BakerSetOpenStatus? _defaultInstance;

  /// Baker's id.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The new open status.
  @$pb.TagNumber(2)
  OpenStatus get openStatus => $_getN(1);
  @$pb.TagNumber(2)
  set openStatus(OpenStatus v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOpenStatus() => $_has(1);
  @$pb.TagNumber(2)
  void clearOpenStatus() => clearField(2);
}

/// Updated metadata url for a baker pool.
class BakerEvent_BakerSetMetadataUrl extends $pb.GeneratedMessage {
  factory BakerEvent_BakerSetMetadataUrl({
    BakerId? bakerId,
    $core.String? url,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (url != null) {
      $result.url = url;
    }
    return $result;
  }
  BakerEvent_BakerSetMetadataUrl._() : super();
  factory BakerEvent_BakerSetMetadataUrl.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerSetMetadataUrl.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerSetMetadataUrl', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOS(2, _omitFieldNames ? '' : 'url')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetMetadataUrl clone() => BakerEvent_BakerSetMetadataUrl()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetMetadataUrl copyWith(void Function(BakerEvent_BakerSetMetadataUrl) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerSetMetadataUrl)) as BakerEvent_BakerSetMetadataUrl;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetMetadataUrl create() => BakerEvent_BakerSetMetadataUrl._();
  BakerEvent_BakerSetMetadataUrl createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerSetMetadataUrl> createRepeated() => $pb.PbList<BakerEvent_BakerSetMetadataUrl>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetMetadataUrl getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerSetMetadataUrl>(create);
  static BakerEvent_BakerSetMetadataUrl? _defaultInstance;

  /// Baker's id.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The URL.
  @$pb.TagNumber(2)
  $core.String get url => $_getSZ(1);
  @$pb.TagNumber(2)
  set url($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasUrl() => $_has(1);
  @$pb.TagNumber(2)
  void clearUrl() => clearField(2);
}

/// Updated transaction fee commission for a baker pool.
class BakerEvent_BakerSetTransactionFeeCommission extends $pb.GeneratedMessage {
  factory BakerEvent_BakerSetTransactionFeeCommission({
    BakerId? bakerId,
    AmountFraction? transactionFeeCommission,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (transactionFeeCommission != null) {
      $result.transactionFeeCommission = transactionFeeCommission;
    }
    return $result;
  }
  BakerEvent_BakerSetTransactionFeeCommission._() : super();
  factory BakerEvent_BakerSetTransactionFeeCommission.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerSetTransactionFeeCommission.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerSetTransactionFeeCommission', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'transactionFeeCommission', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetTransactionFeeCommission clone() => BakerEvent_BakerSetTransactionFeeCommission()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetTransactionFeeCommission copyWith(void Function(BakerEvent_BakerSetTransactionFeeCommission) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerSetTransactionFeeCommission)) as BakerEvent_BakerSetTransactionFeeCommission;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetTransactionFeeCommission create() => BakerEvent_BakerSetTransactionFeeCommission._();
  BakerEvent_BakerSetTransactionFeeCommission createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerSetTransactionFeeCommission> createRepeated() => $pb.PbList<BakerEvent_BakerSetTransactionFeeCommission>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetTransactionFeeCommission getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerSetTransactionFeeCommission>(create);
  static BakerEvent_BakerSetTransactionFeeCommission? _defaultInstance;

  /// Baker's id.
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The transaction fee commission.
  @$pb.TagNumber(2)
  AmountFraction get transactionFeeCommission => $_getN(1);
  @$pb.TagNumber(2)
  set transactionFeeCommission(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTransactionFeeCommission() => $_has(1);
  @$pb.TagNumber(2)
  void clearTransactionFeeCommission() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureTransactionFeeCommission() => $_ensure(1);
}

/// Updated baking reward commission for baker pool
class BakerEvent_BakerSetBakingRewardCommission extends $pb.GeneratedMessage {
  factory BakerEvent_BakerSetBakingRewardCommission({
    BakerId? bakerId,
    AmountFraction? bakingRewardCommission,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (bakingRewardCommission != null) {
      $result.bakingRewardCommission = bakingRewardCommission;
    }
    return $result;
  }
  BakerEvent_BakerSetBakingRewardCommission._() : super();
  factory BakerEvent_BakerSetBakingRewardCommission.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerSetBakingRewardCommission.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerSetBakingRewardCommission', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'bakingRewardCommission', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetBakingRewardCommission clone() => BakerEvent_BakerSetBakingRewardCommission()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetBakingRewardCommission copyWith(void Function(BakerEvent_BakerSetBakingRewardCommission) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerSetBakingRewardCommission)) as BakerEvent_BakerSetBakingRewardCommission;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetBakingRewardCommission create() => BakerEvent_BakerSetBakingRewardCommission._();
  BakerEvent_BakerSetBakingRewardCommission createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerSetBakingRewardCommission> createRepeated() => $pb.PbList<BakerEvent_BakerSetBakingRewardCommission>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetBakingRewardCommission getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerSetBakingRewardCommission>(create);
  static BakerEvent_BakerSetBakingRewardCommission? _defaultInstance;

  /// Baker's id
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The baking reward commission
  @$pb.TagNumber(2)
  AmountFraction get bakingRewardCommission => $_getN(1);
  @$pb.TagNumber(2)
  set bakingRewardCommission(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBakingRewardCommission() => $_has(1);
  @$pb.TagNumber(2)
  void clearBakingRewardCommission() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureBakingRewardCommission() => $_ensure(1);
}

/// Updated finalization reward commission for baker pool
class BakerEvent_BakerSetFinalizationRewardCommission extends $pb.GeneratedMessage {
  factory BakerEvent_BakerSetFinalizationRewardCommission({
    BakerId? bakerId,
    AmountFraction? finalizationRewardCommission,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (finalizationRewardCommission != null) {
      $result.finalizationRewardCommission = finalizationRewardCommission;
    }
    return $result;
  }
  BakerEvent_BakerSetFinalizationRewardCommission._() : super();
  factory BakerEvent_BakerSetFinalizationRewardCommission.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent_BakerSetFinalizationRewardCommission.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent.BakerSetFinalizationRewardCommission', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'finalizationRewardCommission', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetFinalizationRewardCommission clone() => BakerEvent_BakerSetFinalizationRewardCommission()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent_BakerSetFinalizationRewardCommission copyWith(void Function(BakerEvent_BakerSetFinalizationRewardCommission) updates) => super.copyWith((message) => updates(message as BakerEvent_BakerSetFinalizationRewardCommission)) as BakerEvent_BakerSetFinalizationRewardCommission;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetFinalizationRewardCommission create() => BakerEvent_BakerSetFinalizationRewardCommission._();
  BakerEvent_BakerSetFinalizationRewardCommission createEmptyInstance() => create();
  static $pb.PbList<BakerEvent_BakerSetFinalizationRewardCommission> createRepeated() => $pb.PbList<BakerEvent_BakerSetFinalizationRewardCommission>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent_BakerSetFinalizationRewardCommission getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent_BakerSetFinalizationRewardCommission>(create);
  static BakerEvent_BakerSetFinalizationRewardCommission? _defaultInstance;

  /// Baker's id
  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The finalization reward commission
  @$pb.TagNumber(2)
  AmountFraction get finalizationRewardCommission => $_getN(1);
  @$pb.TagNumber(2)
  set finalizationRewardCommission(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasFinalizationRewardCommission() => $_has(1);
  @$pb.TagNumber(2)
  void clearFinalizationRewardCommission() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureFinalizationRewardCommission() => $_ensure(1);
}

enum BakerEvent_Event {
  bakerAdded, 
  bakerRemoved, 
  bakerStakeIncreased, 
  bakerStakeDecreased, 
  bakerRestakeEarningsUpdated, 
  bakerKeysUpdated, 
  bakerSetOpenStatus, 
  bakerSetMetadataUrl, 
  bakerSetTransactionFeeCommission, 
  bakerSetBakingRewardCommission, 
  bakerSetFinalizationRewardCommission, 
  notSet
}

/// Events that may result from the ConfigureBaker transaction.
class BakerEvent extends $pb.GeneratedMessage {
  factory BakerEvent({
    BakerEvent_BakerAdded? bakerAdded,
    BakerId? bakerRemoved,
    BakerEvent_BakerStakeIncreased? bakerStakeIncreased,
    BakerEvent_BakerStakeDecreased? bakerStakeDecreased,
    BakerEvent_BakerRestakeEarningsUpdated? bakerRestakeEarningsUpdated,
    BakerKeysEvent? bakerKeysUpdated,
    BakerEvent_BakerSetOpenStatus? bakerSetOpenStatus,
    BakerEvent_BakerSetMetadataUrl? bakerSetMetadataUrl,
    BakerEvent_BakerSetTransactionFeeCommission? bakerSetTransactionFeeCommission,
    BakerEvent_BakerSetBakingRewardCommission? bakerSetBakingRewardCommission,
    BakerEvent_BakerSetFinalizationRewardCommission? bakerSetFinalizationRewardCommission,
  }) {
    final $result = create();
    if (bakerAdded != null) {
      $result.bakerAdded = bakerAdded;
    }
    if (bakerRemoved != null) {
      $result.bakerRemoved = bakerRemoved;
    }
    if (bakerStakeIncreased != null) {
      $result.bakerStakeIncreased = bakerStakeIncreased;
    }
    if (bakerStakeDecreased != null) {
      $result.bakerStakeDecreased = bakerStakeDecreased;
    }
    if (bakerRestakeEarningsUpdated != null) {
      $result.bakerRestakeEarningsUpdated = bakerRestakeEarningsUpdated;
    }
    if (bakerKeysUpdated != null) {
      $result.bakerKeysUpdated = bakerKeysUpdated;
    }
    if (bakerSetOpenStatus != null) {
      $result.bakerSetOpenStatus = bakerSetOpenStatus;
    }
    if (bakerSetMetadataUrl != null) {
      $result.bakerSetMetadataUrl = bakerSetMetadataUrl;
    }
    if (bakerSetTransactionFeeCommission != null) {
      $result.bakerSetTransactionFeeCommission = bakerSetTransactionFeeCommission;
    }
    if (bakerSetBakingRewardCommission != null) {
      $result.bakerSetBakingRewardCommission = bakerSetBakingRewardCommission;
    }
    if (bakerSetFinalizationRewardCommission != null) {
      $result.bakerSetFinalizationRewardCommission = bakerSetFinalizationRewardCommission;
    }
    return $result;
  }
  BakerEvent._() : super();
  factory BakerEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BakerEvent_Event> _BakerEvent_EventByTag = {
    1 : BakerEvent_Event.bakerAdded,
    2 : BakerEvent_Event.bakerRemoved,
    3 : BakerEvent_Event.bakerStakeIncreased,
    4 : BakerEvent_Event.bakerStakeDecreased,
    5 : BakerEvent_Event.bakerRestakeEarningsUpdated,
    6 : BakerEvent_Event.bakerKeysUpdated,
    7 : BakerEvent_Event.bakerSetOpenStatus,
    8 : BakerEvent_Event.bakerSetMetadataUrl,
    9 : BakerEvent_Event.bakerSetTransactionFeeCommission,
    10 : BakerEvent_Event.bakerSetBakingRewardCommission,
    11 : BakerEvent_Event.bakerSetFinalizationRewardCommission,
    0 : BakerEvent_Event.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    ..aOM<BakerEvent_BakerAdded>(1, _omitFieldNames ? '' : 'bakerAdded', subBuilder: BakerEvent_BakerAdded.create)
    ..aOM<BakerId>(2, _omitFieldNames ? '' : 'bakerRemoved', subBuilder: BakerId.create)
    ..aOM<BakerEvent_BakerStakeIncreased>(3, _omitFieldNames ? '' : 'bakerStakeIncreased', subBuilder: BakerEvent_BakerStakeIncreased.create)
    ..aOM<BakerEvent_BakerStakeDecreased>(4, _omitFieldNames ? '' : 'bakerStakeDecreased', subBuilder: BakerEvent_BakerStakeDecreased.create)
    ..aOM<BakerEvent_BakerRestakeEarningsUpdated>(5, _omitFieldNames ? '' : 'bakerRestakeEarningsUpdated', subBuilder: BakerEvent_BakerRestakeEarningsUpdated.create)
    ..aOM<BakerKeysEvent>(6, _omitFieldNames ? '' : 'bakerKeysUpdated', subBuilder: BakerKeysEvent.create)
    ..aOM<BakerEvent_BakerSetOpenStatus>(7, _omitFieldNames ? '' : 'bakerSetOpenStatus', subBuilder: BakerEvent_BakerSetOpenStatus.create)
    ..aOM<BakerEvent_BakerSetMetadataUrl>(8, _omitFieldNames ? '' : 'bakerSetMetadataUrl', subBuilder: BakerEvent_BakerSetMetadataUrl.create)
    ..aOM<BakerEvent_BakerSetTransactionFeeCommission>(9, _omitFieldNames ? '' : 'bakerSetTransactionFeeCommission', subBuilder: BakerEvent_BakerSetTransactionFeeCommission.create)
    ..aOM<BakerEvent_BakerSetBakingRewardCommission>(10, _omitFieldNames ? '' : 'bakerSetBakingRewardCommission', subBuilder: BakerEvent_BakerSetBakingRewardCommission.create)
    ..aOM<BakerEvent_BakerSetFinalizationRewardCommission>(11, _omitFieldNames ? '' : 'bakerSetFinalizationRewardCommission', subBuilder: BakerEvent_BakerSetFinalizationRewardCommission.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerEvent clone() => BakerEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerEvent copyWith(void Function(BakerEvent) updates) => super.copyWith((message) => updates(message as BakerEvent)) as BakerEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerEvent create() => BakerEvent._();
  BakerEvent createEmptyInstance() => create();
  static $pb.PbList<BakerEvent> createRepeated() => $pb.PbList<BakerEvent>();
  @$core.pragma('dart2js:noInline')
  static BakerEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerEvent>(create);
  static BakerEvent? _defaultInstance;

  BakerEvent_Event whichEvent() => _BakerEvent_EventByTag[$_whichOneof(0)]!;
  void clearEvent() => clearField($_whichOneof(0));

  /// A baker was added.
  @$pb.TagNumber(1)
  BakerEvent_BakerAdded get bakerAdded => $_getN(0);
  @$pb.TagNumber(1)
  set bakerAdded(BakerEvent_BakerAdded v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerAdded() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerAdded() => clearField(1);
  @$pb.TagNumber(1)
  BakerEvent_BakerAdded ensureBakerAdded() => $_ensure(0);

  /// A baker was removed.
  @$pb.TagNumber(2)
  BakerId get bakerRemoved => $_getN(1);
  @$pb.TagNumber(2)
  set bakerRemoved(BakerId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBakerRemoved() => $_has(1);
  @$pb.TagNumber(2)
  void clearBakerRemoved() => clearField(2);
  @$pb.TagNumber(2)
  BakerId ensureBakerRemoved() => $_ensure(1);

  /// The baker's stake was increased.
  @$pb.TagNumber(3)
  BakerEvent_BakerStakeIncreased get bakerStakeIncreased => $_getN(2);
  @$pb.TagNumber(3)
  set bakerStakeIncreased(BakerEvent_BakerStakeIncreased v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasBakerStakeIncreased() => $_has(2);
  @$pb.TagNumber(3)
  void clearBakerStakeIncreased() => clearField(3);
  @$pb.TagNumber(3)
  BakerEvent_BakerStakeIncreased ensureBakerStakeIncreased() => $_ensure(2);

  /// The baker's stake was decreased.
  @$pb.TagNumber(4)
  BakerEvent_BakerStakeDecreased get bakerStakeDecreased => $_getN(3);
  @$pb.TagNumber(4)
  set bakerStakeDecreased(BakerEvent_BakerStakeDecreased v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasBakerStakeDecreased() => $_has(3);
  @$pb.TagNumber(4)
  void clearBakerStakeDecreased() => clearField(4);
  @$pb.TagNumber(4)
  BakerEvent_BakerStakeDecreased ensureBakerStakeDecreased() => $_ensure(3);

  /// The baker's setting for restaking earnings was updated.
  @$pb.TagNumber(5)
  BakerEvent_BakerRestakeEarningsUpdated get bakerRestakeEarningsUpdated => $_getN(4);
  @$pb.TagNumber(5)
  set bakerRestakeEarningsUpdated(BakerEvent_BakerRestakeEarningsUpdated v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasBakerRestakeEarningsUpdated() => $_has(4);
  @$pb.TagNumber(5)
  void clearBakerRestakeEarningsUpdated() => clearField(5);
  @$pb.TagNumber(5)
  BakerEvent_BakerRestakeEarningsUpdated ensureBakerRestakeEarningsUpdated() => $_ensure(4);

  /// Baker keys were updated.
  @$pb.TagNumber(6)
  BakerKeysEvent get bakerKeysUpdated => $_getN(5);
  @$pb.TagNumber(6)
  set bakerKeysUpdated(BakerKeysEvent v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasBakerKeysUpdated() => $_has(5);
  @$pb.TagNumber(6)
  void clearBakerKeysUpdated() => clearField(6);
  @$pb.TagNumber(6)
  BakerKeysEvent ensureBakerKeysUpdated() => $_ensure(5);

  /// The baker's open status was updated.
  @$pb.TagNumber(7)
  BakerEvent_BakerSetOpenStatus get bakerSetOpenStatus => $_getN(6);
  @$pb.TagNumber(7)
  set bakerSetOpenStatus(BakerEvent_BakerSetOpenStatus v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasBakerSetOpenStatus() => $_has(6);
  @$pb.TagNumber(7)
  void clearBakerSetOpenStatus() => clearField(7);
  @$pb.TagNumber(7)
  BakerEvent_BakerSetOpenStatus ensureBakerSetOpenStatus() => $_ensure(6);

  /// The baker's metadata URL was updated.
  @$pb.TagNumber(8)
  BakerEvent_BakerSetMetadataUrl get bakerSetMetadataUrl => $_getN(7);
  @$pb.TagNumber(8)
  set bakerSetMetadataUrl(BakerEvent_BakerSetMetadataUrl v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasBakerSetMetadataUrl() => $_has(7);
  @$pb.TagNumber(8)
  void clearBakerSetMetadataUrl() => clearField(8);
  @$pb.TagNumber(8)
  BakerEvent_BakerSetMetadataUrl ensureBakerSetMetadataUrl() => $_ensure(7);

  /// The baker's transaction fee commission was updated.
  @$pb.TagNumber(9)
  BakerEvent_BakerSetTransactionFeeCommission get bakerSetTransactionFeeCommission => $_getN(8);
  @$pb.TagNumber(9)
  set bakerSetTransactionFeeCommission(BakerEvent_BakerSetTransactionFeeCommission v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasBakerSetTransactionFeeCommission() => $_has(8);
  @$pb.TagNumber(9)
  void clearBakerSetTransactionFeeCommission() => clearField(9);
  @$pb.TagNumber(9)
  BakerEvent_BakerSetTransactionFeeCommission ensureBakerSetTransactionFeeCommission() => $_ensure(8);

  /// The baker's baking reward commission was updated.
  @$pb.TagNumber(10)
  BakerEvent_BakerSetBakingRewardCommission get bakerSetBakingRewardCommission => $_getN(9);
  @$pb.TagNumber(10)
  set bakerSetBakingRewardCommission(BakerEvent_BakerSetBakingRewardCommission v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasBakerSetBakingRewardCommission() => $_has(9);
  @$pb.TagNumber(10)
  void clearBakerSetBakingRewardCommission() => clearField(10);
  @$pb.TagNumber(10)
  BakerEvent_BakerSetBakingRewardCommission ensureBakerSetBakingRewardCommission() => $_ensure(9);

  /// The baker's finalization reward commission was updated.
  @$pb.TagNumber(11)
  BakerEvent_BakerSetFinalizationRewardCommission get bakerSetFinalizationRewardCommission => $_getN(10);
  @$pb.TagNumber(11)
  set bakerSetFinalizationRewardCommission(BakerEvent_BakerSetFinalizationRewardCommission v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasBakerSetFinalizationRewardCommission() => $_has(10);
  @$pb.TagNumber(11)
  void clearBakerSetFinalizationRewardCommission() => clearField(11);
  @$pb.TagNumber(11)
  BakerEvent_BakerSetFinalizationRewardCommission ensureBakerSetFinalizationRewardCommission() => $_ensure(10);
}

/// The identifier for a delegator.
class DelegatorId extends $pb.GeneratedMessage {
  factory DelegatorId({
    AccountIndex? id,
  }) {
    final $result = create();
    if (id != null) {
      $result.id = id;
    }
    return $result;
  }
  DelegatorId._() : super();
  factory DelegatorId.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegatorId.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegatorId', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountIndex>(1, _omitFieldNames ? '' : 'id', subBuilder: AccountIndex.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegatorId clone() => DelegatorId()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegatorId copyWith(void Function(DelegatorId) updates) => super.copyWith((message) => updates(message as DelegatorId)) as DelegatorId;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegatorId create() => DelegatorId._();
  DelegatorId createEmptyInstance() => create();
  static $pb.PbList<DelegatorId> createRepeated() => $pb.PbList<DelegatorId>();
  @$core.pragma('dart2js:noInline')
  static DelegatorId getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegatorId>(create);
  static DelegatorId? _defaultInstance;

  @$pb.TagNumber(1)
  AccountIndex get id => $_getN(0);
  @$pb.TagNumber(1)
  set id(AccountIndex v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasId() => $_has(0);
  @$pb.TagNumber(1)
  void clearId() => clearField(1);
  @$pb.TagNumber(1)
  AccountIndex ensureId() => $_ensure(0);
}

class DelegationEvent_DelegationStakeIncreased extends $pb.GeneratedMessage {
  factory DelegationEvent_DelegationStakeIncreased({
    DelegatorId? delegatorId,
    Amount? newStake,
  }) {
    final $result = create();
    if (delegatorId != null) {
      $result.delegatorId = delegatorId;
    }
    if (newStake != null) {
      $result.newStake = newStake;
    }
    return $result;
  }
  DelegationEvent_DelegationStakeIncreased._() : super();
  factory DelegationEvent_DelegationStakeIncreased.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegationEvent_DelegationStakeIncreased.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegationEvent.DelegationStakeIncreased', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<DelegatorId>(1, _omitFieldNames ? '' : 'delegatorId', subBuilder: DelegatorId.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'newStake', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationStakeIncreased clone() => DelegationEvent_DelegationStakeIncreased()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationStakeIncreased copyWith(void Function(DelegationEvent_DelegationStakeIncreased) updates) => super.copyWith((message) => updates(message as DelegationEvent_DelegationStakeIncreased)) as DelegationEvent_DelegationStakeIncreased;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationStakeIncreased create() => DelegationEvent_DelegationStakeIncreased._();
  DelegationEvent_DelegationStakeIncreased createEmptyInstance() => create();
  static $pb.PbList<DelegationEvent_DelegationStakeIncreased> createRepeated() => $pb.PbList<DelegationEvent_DelegationStakeIncreased>();
  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationStakeIncreased getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegationEvent_DelegationStakeIncreased>(create);
  static DelegationEvent_DelegationStakeIncreased? _defaultInstance;

  /// Delegator's id
  @$pb.TagNumber(1)
  DelegatorId get delegatorId => $_getN(0);
  @$pb.TagNumber(1)
  set delegatorId(DelegatorId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDelegatorId() => $_has(0);
  @$pb.TagNumber(1)
  void clearDelegatorId() => clearField(1);
  @$pb.TagNumber(1)
  DelegatorId ensureDelegatorId() => $_ensure(0);

  /// New stake
  @$pb.TagNumber(2)
  Amount get newStake => $_getN(1);
  @$pb.TagNumber(2)
  set newStake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureNewStake() => $_ensure(1);
}

class DelegationEvent_DelegationStakeDecreased extends $pb.GeneratedMessage {
  factory DelegationEvent_DelegationStakeDecreased({
    DelegatorId? delegatorId,
    Amount? newStake,
  }) {
    final $result = create();
    if (delegatorId != null) {
      $result.delegatorId = delegatorId;
    }
    if (newStake != null) {
      $result.newStake = newStake;
    }
    return $result;
  }
  DelegationEvent_DelegationStakeDecreased._() : super();
  factory DelegationEvent_DelegationStakeDecreased.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegationEvent_DelegationStakeDecreased.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegationEvent.DelegationStakeDecreased', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<DelegatorId>(1, _omitFieldNames ? '' : 'delegatorId', subBuilder: DelegatorId.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'newStake', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationStakeDecreased clone() => DelegationEvent_DelegationStakeDecreased()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationStakeDecreased copyWith(void Function(DelegationEvent_DelegationStakeDecreased) updates) => super.copyWith((message) => updates(message as DelegationEvent_DelegationStakeDecreased)) as DelegationEvent_DelegationStakeDecreased;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationStakeDecreased create() => DelegationEvent_DelegationStakeDecreased._();
  DelegationEvent_DelegationStakeDecreased createEmptyInstance() => create();
  static $pb.PbList<DelegationEvent_DelegationStakeDecreased> createRepeated() => $pb.PbList<DelegationEvent_DelegationStakeDecreased>();
  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationStakeDecreased getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegationEvent_DelegationStakeDecreased>(create);
  static DelegationEvent_DelegationStakeDecreased? _defaultInstance;

  /// Delegator's id
  @$pb.TagNumber(1)
  DelegatorId get delegatorId => $_getN(0);
  @$pb.TagNumber(1)
  set delegatorId(DelegatorId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDelegatorId() => $_has(0);
  @$pb.TagNumber(1)
  void clearDelegatorId() => clearField(1);
  @$pb.TagNumber(1)
  DelegatorId ensureDelegatorId() => $_ensure(0);

  /// New stake
  @$pb.TagNumber(2)
  Amount get newStake => $_getN(1);
  @$pb.TagNumber(2)
  set newStake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasNewStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearNewStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureNewStake() => $_ensure(1);
}

class DelegationEvent_DelegationSetRestakeEarnings extends $pb.GeneratedMessage {
  factory DelegationEvent_DelegationSetRestakeEarnings({
    DelegatorId? delegatorId,
    $core.bool? restakeEarnings,
  }) {
    final $result = create();
    if (delegatorId != null) {
      $result.delegatorId = delegatorId;
    }
    if (restakeEarnings != null) {
      $result.restakeEarnings = restakeEarnings;
    }
    return $result;
  }
  DelegationEvent_DelegationSetRestakeEarnings._() : super();
  factory DelegationEvent_DelegationSetRestakeEarnings.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegationEvent_DelegationSetRestakeEarnings.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegationEvent.DelegationSetRestakeEarnings', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<DelegatorId>(1, _omitFieldNames ? '' : 'delegatorId', subBuilder: DelegatorId.create)
    ..aOB(2, _omitFieldNames ? '' : 'restakeEarnings')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationSetRestakeEarnings clone() => DelegationEvent_DelegationSetRestakeEarnings()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationSetRestakeEarnings copyWith(void Function(DelegationEvent_DelegationSetRestakeEarnings) updates) => super.copyWith((message) => updates(message as DelegationEvent_DelegationSetRestakeEarnings)) as DelegationEvent_DelegationSetRestakeEarnings;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationSetRestakeEarnings create() => DelegationEvent_DelegationSetRestakeEarnings._();
  DelegationEvent_DelegationSetRestakeEarnings createEmptyInstance() => create();
  static $pb.PbList<DelegationEvent_DelegationSetRestakeEarnings> createRepeated() => $pb.PbList<DelegationEvent_DelegationSetRestakeEarnings>();
  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationSetRestakeEarnings getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegationEvent_DelegationSetRestakeEarnings>(create);
  static DelegationEvent_DelegationSetRestakeEarnings? _defaultInstance;

  /// Delegator's id
  @$pb.TagNumber(1)
  DelegatorId get delegatorId => $_getN(0);
  @$pb.TagNumber(1)
  set delegatorId(DelegatorId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDelegatorId() => $_has(0);
  @$pb.TagNumber(1)
  void clearDelegatorId() => clearField(1);
  @$pb.TagNumber(1)
  DelegatorId ensureDelegatorId() => $_ensure(0);

  /// Whether earnings will be restaked
  @$pb.TagNumber(2)
  $core.bool get restakeEarnings => $_getBF(1);
  @$pb.TagNumber(2)
  set restakeEarnings($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasRestakeEarnings() => $_has(1);
  @$pb.TagNumber(2)
  void clearRestakeEarnings() => clearField(2);
}

class DelegationEvent_DelegationSetDelegationTarget extends $pb.GeneratedMessage {
  factory DelegationEvent_DelegationSetDelegationTarget({
    DelegatorId? delegatorId,
    DelegationTarget? delegationTarget,
  }) {
    final $result = create();
    if (delegatorId != null) {
      $result.delegatorId = delegatorId;
    }
    if (delegationTarget != null) {
      $result.delegationTarget = delegationTarget;
    }
    return $result;
  }
  DelegationEvent_DelegationSetDelegationTarget._() : super();
  factory DelegationEvent_DelegationSetDelegationTarget.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegationEvent_DelegationSetDelegationTarget.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegationEvent.DelegationSetDelegationTarget', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<DelegatorId>(1, _omitFieldNames ? '' : 'delegatorId', subBuilder: DelegatorId.create)
    ..aOM<DelegationTarget>(2, _omitFieldNames ? '' : 'delegationTarget', subBuilder: DelegationTarget.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationSetDelegationTarget clone() => DelegationEvent_DelegationSetDelegationTarget()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegationEvent_DelegationSetDelegationTarget copyWith(void Function(DelegationEvent_DelegationSetDelegationTarget) updates) => super.copyWith((message) => updates(message as DelegationEvent_DelegationSetDelegationTarget)) as DelegationEvent_DelegationSetDelegationTarget;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationSetDelegationTarget create() => DelegationEvent_DelegationSetDelegationTarget._();
  DelegationEvent_DelegationSetDelegationTarget createEmptyInstance() => create();
  static $pb.PbList<DelegationEvent_DelegationSetDelegationTarget> createRepeated() => $pb.PbList<DelegationEvent_DelegationSetDelegationTarget>();
  @$core.pragma('dart2js:noInline')
  static DelegationEvent_DelegationSetDelegationTarget getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegationEvent_DelegationSetDelegationTarget>(create);
  static DelegationEvent_DelegationSetDelegationTarget? _defaultInstance;

  /// Delegator's id
  @$pb.TagNumber(1)
  DelegatorId get delegatorId => $_getN(0);
  @$pb.TagNumber(1)
  set delegatorId(DelegatorId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDelegatorId() => $_has(0);
  @$pb.TagNumber(1)
  void clearDelegatorId() => clearField(1);
  @$pb.TagNumber(1)
  DelegatorId ensureDelegatorId() => $_ensure(0);

  /// New delegation target
  @$pb.TagNumber(2)
  DelegationTarget get delegationTarget => $_getN(1);
  @$pb.TagNumber(2)
  set delegationTarget(DelegationTarget v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDelegationTarget() => $_has(1);
  @$pb.TagNumber(2)
  void clearDelegationTarget() => clearField(2);
  @$pb.TagNumber(2)
  DelegationTarget ensureDelegationTarget() => $_ensure(1);
}

enum DelegationEvent_Event {
  delegationStakeIncreased, 
  delegationStakeDecreased, 
  delegationSetRestakeEarnings, 
  delegationSetDelegationTarget, 
  delegationAdded, 
  delegationRemoved, 
  notSet
}

class DelegationEvent extends $pb.GeneratedMessage {
  factory DelegationEvent({
    DelegationEvent_DelegationStakeIncreased? delegationStakeIncreased,
    DelegationEvent_DelegationStakeDecreased? delegationStakeDecreased,
    DelegationEvent_DelegationSetRestakeEarnings? delegationSetRestakeEarnings,
    DelegationEvent_DelegationSetDelegationTarget? delegationSetDelegationTarget,
    DelegatorId? delegationAdded,
    DelegatorId? delegationRemoved,
  }) {
    final $result = create();
    if (delegationStakeIncreased != null) {
      $result.delegationStakeIncreased = delegationStakeIncreased;
    }
    if (delegationStakeDecreased != null) {
      $result.delegationStakeDecreased = delegationStakeDecreased;
    }
    if (delegationSetRestakeEarnings != null) {
      $result.delegationSetRestakeEarnings = delegationSetRestakeEarnings;
    }
    if (delegationSetDelegationTarget != null) {
      $result.delegationSetDelegationTarget = delegationSetDelegationTarget;
    }
    if (delegationAdded != null) {
      $result.delegationAdded = delegationAdded;
    }
    if (delegationRemoved != null) {
      $result.delegationRemoved = delegationRemoved;
    }
    return $result;
  }
  DelegationEvent._() : super();
  factory DelegationEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegationEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DelegationEvent_Event> _DelegationEvent_EventByTag = {
    1 : DelegationEvent_Event.delegationStakeIncreased,
    2 : DelegationEvent_Event.delegationStakeDecreased,
    3 : DelegationEvent_Event.delegationSetRestakeEarnings,
    4 : DelegationEvent_Event.delegationSetDelegationTarget,
    5 : DelegationEvent_Event.delegationAdded,
    6 : DelegationEvent_Event.delegationRemoved,
    0 : DelegationEvent_Event.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegationEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6])
    ..aOM<DelegationEvent_DelegationStakeIncreased>(1, _omitFieldNames ? '' : 'delegationStakeIncreased', subBuilder: DelegationEvent_DelegationStakeIncreased.create)
    ..aOM<DelegationEvent_DelegationStakeDecreased>(2, _omitFieldNames ? '' : 'delegationStakeDecreased', subBuilder: DelegationEvent_DelegationStakeDecreased.create)
    ..aOM<DelegationEvent_DelegationSetRestakeEarnings>(3, _omitFieldNames ? '' : 'delegationSetRestakeEarnings', subBuilder: DelegationEvent_DelegationSetRestakeEarnings.create)
    ..aOM<DelegationEvent_DelegationSetDelegationTarget>(4, _omitFieldNames ? '' : 'delegationSetDelegationTarget', subBuilder: DelegationEvent_DelegationSetDelegationTarget.create)
    ..aOM<DelegatorId>(5, _omitFieldNames ? '' : 'delegationAdded', subBuilder: DelegatorId.create)
    ..aOM<DelegatorId>(6, _omitFieldNames ? '' : 'delegationRemoved', subBuilder: DelegatorId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegationEvent clone() => DelegationEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegationEvent copyWith(void Function(DelegationEvent) updates) => super.copyWith((message) => updates(message as DelegationEvent)) as DelegationEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegationEvent create() => DelegationEvent._();
  DelegationEvent createEmptyInstance() => create();
  static $pb.PbList<DelegationEvent> createRepeated() => $pb.PbList<DelegationEvent>();
  @$core.pragma('dart2js:noInline')
  static DelegationEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegationEvent>(create);
  static DelegationEvent? _defaultInstance;

  DelegationEvent_Event whichEvent() => _DelegationEvent_EventByTag[$_whichOneof(0)]!;
  void clearEvent() => clearField($_whichOneof(0));

  /// The delegator's stake increased.
  @$pb.TagNumber(1)
  DelegationEvent_DelegationStakeIncreased get delegationStakeIncreased => $_getN(0);
  @$pb.TagNumber(1)
  set delegationStakeIncreased(DelegationEvent_DelegationStakeIncreased v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDelegationStakeIncreased() => $_has(0);
  @$pb.TagNumber(1)
  void clearDelegationStakeIncreased() => clearField(1);
  @$pb.TagNumber(1)
  DelegationEvent_DelegationStakeIncreased ensureDelegationStakeIncreased() => $_ensure(0);

  /// The delegator's stake decreased.
  @$pb.TagNumber(2)
  DelegationEvent_DelegationStakeDecreased get delegationStakeDecreased => $_getN(1);
  @$pb.TagNumber(2)
  set delegationStakeDecreased(DelegationEvent_DelegationStakeDecreased v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDelegationStakeDecreased() => $_has(1);
  @$pb.TagNumber(2)
  void clearDelegationStakeDecreased() => clearField(2);
  @$pb.TagNumber(2)
  DelegationEvent_DelegationStakeDecreased ensureDelegationStakeDecreased() => $_ensure(1);

  /// The delegator's restaking setting was updated.
  @$pb.TagNumber(3)
  DelegationEvent_DelegationSetRestakeEarnings get delegationSetRestakeEarnings => $_getN(2);
  @$pb.TagNumber(3)
  set delegationSetRestakeEarnings(DelegationEvent_DelegationSetRestakeEarnings v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasDelegationSetRestakeEarnings() => $_has(2);
  @$pb.TagNumber(3)
  void clearDelegationSetRestakeEarnings() => clearField(3);
  @$pb.TagNumber(3)
  DelegationEvent_DelegationSetRestakeEarnings ensureDelegationSetRestakeEarnings() => $_ensure(2);

  /// The delegator's delegation target was updated.
  @$pb.TagNumber(4)
  DelegationEvent_DelegationSetDelegationTarget get delegationSetDelegationTarget => $_getN(3);
  @$pb.TagNumber(4)
  set delegationSetDelegationTarget(DelegationEvent_DelegationSetDelegationTarget v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasDelegationSetDelegationTarget() => $_has(3);
  @$pb.TagNumber(4)
  void clearDelegationSetDelegationTarget() => clearField(4);
  @$pb.TagNumber(4)
  DelegationEvent_DelegationSetDelegationTarget ensureDelegationSetDelegationTarget() => $_ensure(3);

  /// A delegator was added.
  @$pb.TagNumber(5)
  DelegatorId get delegationAdded => $_getN(4);
  @$pb.TagNumber(5)
  set delegationAdded(DelegatorId v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasDelegationAdded() => $_has(4);
  @$pb.TagNumber(5)
  void clearDelegationAdded() => clearField(5);
  @$pb.TagNumber(5)
  DelegatorId ensureDelegationAdded() => $_ensure(4);

  /// A delegator was removed.
  @$pb.TagNumber(6)
  DelegatorId get delegationRemoved => $_getN(5);
  @$pb.TagNumber(6)
  set delegationRemoved(DelegatorId v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasDelegationRemoved() => $_has(5);
  @$pb.TagNumber(6)
  void clearDelegationRemoved() => clearField(6);
  @$pb.TagNumber(6)
  DelegatorId ensureDelegationRemoved() => $_ensure(5);
}

/// No effects other than payment from this transaction.
/// The rejection reason indicates why the transaction failed.
class AccountTransactionEffects_None extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_None({
    TransactionType? transactionType,
    RejectReason? rejectReason,
  }) {
    final $result = create();
    if (transactionType != null) {
      $result.transactionType = transactionType;
    }
    if (rejectReason != null) {
      $result.rejectReason = rejectReason;
    }
    return $result;
  }
  AccountTransactionEffects_None._() : super();
  factory AccountTransactionEffects_None.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_None.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.None', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..e<TransactionType>(1, _omitFieldNames ? '' : 'transactionType', $pb.PbFieldType.OE, defaultOrMaker: TransactionType.DEPLOY_MODULE, valueOf: TransactionType.valueOf, enumValues: TransactionType.values)
    ..aOM<RejectReason>(2, _omitFieldNames ? '' : 'rejectReason', subBuilder: RejectReason.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_None clone() => AccountTransactionEffects_None()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_None copyWith(void Function(AccountTransactionEffects_None) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_None)) as AccountTransactionEffects_None;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_None create() => AccountTransactionEffects_None._();
  AccountTransactionEffects_None createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_None> createRepeated() => $pb.PbList<AccountTransactionEffects_None>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_None getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_None>(create);
  static AccountTransactionEffects_None? _defaultInstance;

  /// Transaction type of a failed transaction, if known.
  /// In case of serialization failure this will not be set.
  @$pb.TagNumber(1)
  TransactionType get transactionType => $_getN(0);
  @$pb.TagNumber(1)
  set transactionType(TransactionType v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTransactionType() => $_has(0);
  @$pb.TagNumber(1)
  void clearTransactionType() => clearField(1);

  /// Reason for rejection of the transaction.
  @$pb.TagNumber(2)
  RejectReason get rejectReason => $_getN(1);
  @$pb.TagNumber(2)
  set rejectReason(RejectReason v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRejectReason() => $_has(1);
  @$pb.TagNumber(2)
  void clearRejectReason() => clearField(2);
  @$pb.TagNumber(2)
  RejectReason ensureRejectReason() => $_ensure(1);
}

/// A contract update transaction was issued and produced the given trace.
/// This is the result of Update transaction.
class AccountTransactionEffects_ContractUpdateIssued extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_ContractUpdateIssued({
    $core.Iterable<ContractTraceElement>? effects,
  }) {
    final $result = create();
    if (effects != null) {
      $result.effects.addAll(effects);
    }
    return $result;
  }
  AccountTransactionEffects_ContractUpdateIssued._() : super();
  factory AccountTransactionEffects_ContractUpdateIssued.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_ContractUpdateIssued.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.ContractUpdateIssued', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<ContractTraceElement>(1, _omitFieldNames ? '' : 'effects', $pb.PbFieldType.PM, subBuilder: ContractTraceElement.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_ContractUpdateIssued clone() => AccountTransactionEffects_ContractUpdateIssued()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_ContractUpdateIssued copyWith(void Function(AccountTransactionEffects_ContractUpdateIssued) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_ContractUpdateIssued)) as AccountTransactionEffects_ContractUpdateIssued;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_ContractUpdateIssued create() => AccountTransactionEffects_ContractUpdateIssued._();
  AccountTransactionEffects_ContractUpdateIssued createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_ContractUpdateIssued> createRepeated() => $pb.PbList<AccountTransactionEffects_ContractUpdateIssued>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_ContractUpdateIssued getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_ContractUpdateIssued>(create);
  static AccountTransactionEffects_ContractUpdateIssued? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<ContractTraceElement> get effects => $_getList(0);
}

/// A simple account to account transfer occurred. This is the result of a
/// successful Transfer transaction.
class AccountTransactionEffects_AccountTransfer extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_AccountTransfer({
    Amount? amount,
    AccountAddress? receiver,
    Memo? memo,
  }) {
    final $result = create();
    if (amount != null) {
      $result.amount = amount;
    }
    if (receiver != null) {
      $result.receiver = receiver;
    }
    if (memo != null) {
      $result.memo = memo;
    }
    return $result;
  }
  AccountTransactionEffects_AccountTransfer._() : super();
  factory AccountTransactionEffects_AccountTransfer.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_AccountTransfer.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.AccountTransfer', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'receiver', subBuilder: AccountAddress.create)
    ..aOM<Memo>(3, _omitFieldNames ? '' : 'memo', subBuilder: Memo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_AccountTransfer clone() => AccountTransactionEffects_AccountTransfer()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_AccountTransfer copyWith(void Function(AccountTransactionEffects_AccountTransfer) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_AccountTransfer)) as AccountTransactionEffects_AccountTransfer;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_AccountTransfer create() => AccountTransactionEffects_AccountTransfer._();
  AccountTransactionEffects_AccountTransfer createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_AccountTransfer> createRepeated() => $pb.PbList<AccountTransactionEffects_AccountTransfer>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_AccountTransfer getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_AccountTransfer>(create);
  static AccountTransactionEffects_AccountTransfer? _defaultInstance;

  /// Amount that was transferred.
  @$pb.TagNumber(1)
  Amount get amount => $_getN(0);
  @$pb.TagNumber(1)
  set amount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureAmount() => $_ensure(0);

  /// Receiver account.
  @$pb.TagNumber(2)
  AccountAddress get receiver => $_getN(1);
  @$pb.TagNumber(2)
  set receiver(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasReceiver() => $_has(1);
  @$pb.TagNumber(2)
  void clearReceiver() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureReceiver() => $_ensure(1);

  /// Memo.
  @$pb.TagNumber(3)
  Memo get memo => $_getN(2);
  @$pb.TagNumber(3)
  set memo(Memo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMemo() => $_has(2);
  @$pb.TagNumber(3)
  void clearMemo() => clearField(3);
  @$pb.TagNumber(3)
  Memo ensureMemo() => $_ensure(2);
}

/// An account was deregistered as a baker. This is the result of a
/// successful UpdateBakerStake transaction.
class AccountTransactionEffects_BakerStakeUpdated extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_BakerStakeUpdated({
    BakerStakeUpdatedData? update,
  }) {
    final $result = create();
    if (update != null) {
      $result.update = update;
    }
    return $result;
  }
  AccountTransactionEffects_BakerStakeUpdated._() : super();
  factory AccountTransactionEffects_BakerStakeUpdated.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_BakerStakeUpdated.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.BakerStakeUpdated', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerStakeUpdatedData>(1, _omitFieldNames ? '' : 'update', subBuilder: BakerStakeUpdatedData.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_BakerStakeUpdated clone() => AccountTransactionEffects_BakerStakeUpdated()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_BakerStakeUpdated copyWith(void Function(AccountTransactionEffects_BakerStakeUpdated) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_BakerStakeUpdated)) as AccountTransactionEffects_BakerStakeUpdated;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_BakerStakeUpdated create() => AccountTransactionEffects_BakerStakeUpdated._();
  AccountTransactionEffects_BakerStakeUpdated createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_BakerStakeUpdated> createRepeated() => $pb.PbList<AccountTransactionEffects_BakerStakeUpdated>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_BakerStakeUpdated getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_BakerStakeUpdated>(create);
  static AccountTransactionEffects_BakerStakeUpdated? _defaultInstance;

  /// If the stake was updated (that is, it changed and did not stay the
  /// same) then this is present, otherwise it is not present.
  @$pb.TagNumber(1)
  BakerStakeUpdatedData get update => $_getN(0);
  @$pb.TagNumber(1)
  set update(BakerStakeUpdatedData v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasUpdate() => $_has(0);
  @$pb.TagNumber(1)
  void clearUpdate() => clearField(1);
  @$pb.TagNumber(1)
  BakerStakeUpdatedData ensureUpdate() => $_ensure(0);
}

/// An encrypted amount was transferred. This is the result of a successful
/// EncryptedAmountTransfer transaction.
class AccountTransactionEffects_EncryptedAmountTransferred extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_EncryptedAmountTransferred({
    EncryptedAmountRemovedEvent? removed,
    NewEncryptedAmountEvent? added,
    Memo? memo,
  }) {
    final $result = create();
    if (removed != null) {
      $result.removed = removed;
    }
    if (added != null) {
      $result.added = added;
    }
    if (memo != null) {
      $result.memo = memo;
    }
    return $result;
  }
  AccountTransactionEffects_EncryptedAmountTransferred._() : super();
  factory AccountTransactionEffects_EncryptedAmountTransferred.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_EncryptedAmountTransferred.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.EncryptedAmountTransferred', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<EncryptedAmountRemovedEvent>(1, _omitFieldNames ? '' : 'removed', subBuilder: EncryptedAmountRemovedEvent.create)
    ..aOM<NewEncryptedAmountEvent>(2, _omitFieldNames ? '' : 'added', subBuilder: NewEncryptedAmountEvent.create)
    ..aOM<Memo>(3, _omitFieldNames ? '' : 'memo', subBuilder: Memo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_EncryptedAmountTransferred clone() => AccountTransactionEffects_EncryptedAmountTransferred()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_EncryptedAmountTransferred copyWith(void Function(AccountTransactionEffects_EncryptedAmountTransferred) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_EncryptedAmountTransferred)) as AccountTransactionEffects_EncryptedAmountTransferred;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_EncryptedAmountTransferred create() => AccountTransactionEffects_EncryptedAmountTransferred._();
  AccountTransactionEffects_EncryptedAmountTransferred createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_EncryptedAmountTransferred> createRepeated() => $pb.PbList<AccountTransactionEffects_EncryptedAmountTransferred>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_EncryptedAmountTransferred getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_EncryptedAmountTransferred>(create);
  static AccountTransactionEffects_EncryptedAmountTransferred? _defaultInstance;

  @$pb.TagNumber(1)
  EncryptedAmountRemovedEvent get removed => $_getN(0);
  @$pb.TagNumber(1)
  set removed(EncryptedAmountRemovedEvent v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRemoved() => $_has(0);
  @$pb.TagNumber(1)
  void clearRemoved() => clearField(1);
  @$pb.TagNumber(1)
  EncryptedAmountRemovedEvent ensureRemoved() => $_ensure(0);

  @$pb.TagNumber(2)
  NewEncryptedAmountEvent get added => $_getN(1);
  @$pb.TagNumber(2)
  set added(NewEncryptedAmountEvent v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAdded() => $_has(1);
  @$pb.TagNumber(2)
  void clearAdded() => clearField(2);
  @$pb.TagNumber(2)
  NewEncryptedAmountEvent ensureAdded() => $_ensure(1);

  @$pb.TagNumber(3)
  Memo get memo => $_getN(2);
  @$pb.TagNumber(3)
  set memo(Memo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMemo() => $_has(2);
  @$pb.TagNumber(3)
  void clearMemo() => clearField(3);
  @$pb.TagNumber(3)
  Memo ensureMemo() => $_ensure(2);
}

/// An account transferred part of its encrypted balance to its public
/// balance. This is the result of a successful TransferToPublic transaction.
class AccountTransactionEffects_TransferredToPublic extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_TransferredToPublic({
    EncryptedAmountRemovedEvent? removed,
    Amount? amount,
  }) {
    final $result = create();
    if (removed != null) {
      $result.removed = removed;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    return $result;
  }
  AccountTransactionEffects_TransferredToPublic._() : super();
  factory AccountTransactionEffects_TransferredToPublic.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_TransferredToPublic.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.TransferredToPublic', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<EncryptedAmountRemovedEvent>(1, _omitFieldNames ? '' : 'removed', subBuilder: EncryptedAmountRemovedEvent.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_TransferredToPublic clone() => AccountTransactionEffects_TransferredToPublic()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_TransferredToPublic copyWith(void Function(AccountTransactionEffects_TransferredToPublic) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_TransferredToPublic)) as AccountTransactionEffects_TransferredToPublic;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_TransferredToPublic create() => AccountTransactionEffects_TransferredToPublic._();
  AccountTransactionEffects_TransferredToPublic createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_TransferredToPublic> createRepeated() => $pb.PbList<AccountTransactionEffects_TransferredToPublic>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_TransferredToPublic getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_TransferredToPublic>(create);
  static AccountTransactionEffects_TransferredToPublic? _defaultInstance;

  @$pb.TagNumber(1)
  EncryptedAmountRemovedEvent get removed => $_getN(0);
  @$pb.TagNumber(1)
  set removed(EncryptedAmountRemovedEvent v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRemoved() => $_has(0);
  @$pb.TagNumber(1)
  void clearRemoved() => clearField(1);
  @$pb.TagNumber(1)
  EncryptedAmountRemovedEvent ensureRemoved() => $_ensure(0);

  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);
}

/// A transfer with schedule was performed. This is the result of a
/// successful TransferWithSchedule transaction.
class AccountTransactionEffects_TransferredWithSchedule extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_TransferredWithSchedule({
    AccountAddress? receiver,
    $core.Iterable<NewRelease>? amount,
    Memo? memo,
  }) {
    final $result = create();
    if (receiver != null) {
      $result.receiver = receiver;
    }
    if (amount != null) {
      $result.amount.addAll(amount);
    }
    if (memo != null) {
      $result.memo = memo;
    }
    return $result;
  }
  AccountTransactionEffects_TransferredWithSchedule._() : super();
  factory AccountTransactionEffects_TransferredWithSchedule.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_TransferredWithSchedule.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.TransferredWithSchedule', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'receiver', subBuilder: AccountAddress.create)
    ..pc<NewRelease>(2, _omitFieldNames ? '' : 'amount', $pb.PbFieldType.PM, subBuilder: NewRelease.create)
    ..aOM<Memo>(3, _omitFieldNames ? '' : 'memo', subBuilder: Memo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_TransferredWithSchedule clone() => AccountTransactionEffects_TransferredWithSchedule()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_TransferredWithSchedule copyWith(void Function(AccountTransactionEffects_TransferredWithSchedule) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_TransferredWithSchedule)) as AccountTransactionEffects_TransferredWithSchedule;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_TransferredWithSchedule create() => AccountTransactionEffects_TransferredWithSchedule._();
  AccountTransactionEffects_TransferredWithSchedule createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_TransferredWithSchedule> createRepeated() => $pb.PbList<AccountTransactionEffects_TransferredWithSchedule>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_TransferredWithSchedule getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_TransferredWithSchedule>(create);
  static AccountTransactionEffects_TransferredWithSchedule? _defaultInstance;

  /// Receiver account.
  @$pb.TagNumber(1)
  AccountAddress get receiver => $_getN(0);
  @$pb.TagNumber(1)
  set receiver(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasReceiver() => $_has(0);
  @$pb.TagNumber(1)
  void clearReceiver() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureReceiver() => $_ensure(0);

  /// The list of releases. Ordered by increasing timestamp.
  @$pb.TagNumber(2)
  $core.List<NewRelease> get amount => $_getList(1);

  /// Optional memo.
  @$pb.TagNumber(3)
  Memo get memo => $_getN(2);
  @$pb.TagNumber(3)
  set memo(Memo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMemo() => $_has(2);
  @$pb.TagNumber(3)
  void clearMemo() => clearField(3);
  @$pb.TagNumber(3)
  Memo ensureMemo() => $_ensure(2);
}

/// Account's credentials were updated. This is the result of a
/// successful UpdateCredentials transaction.
class AccountTransactionEffects_CredentialsUpdated extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_CredentialsUpdated({
    $core.Iterable<CredentialRegistrationId>? newCredIds,
    $core.Iterable<CredentialRegistrationId>? removedCredIds,
    AccountThreshold? newThreshold,
  }) {
    final $result = create();
    if (newCredIds != null) {
      $result.newCredIds.addAll(newCredIds);
    }
    if (removedCredIds != null) {
      $result.removedCredIds.addAll(removedCredIds);
    }
    if (newThreshold != null) {
      $result.newThreshold = newThreshold;
    }
    return $result;
  }
  AccountTransactionEffects_CredentialsUpdated._() : super();
  factory AccountTransactionEffects_CredentialsUpdated.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_CredentialsUpdated.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.CredentialsUpdated', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<CredentialRegistrationId>(1, _omitFieldNames ? '' : 'newCredIds', $pb.PbFieldType.PM, subBuilder: CredentialRegistrationId.create)
    ..pc<CredentialRegistrationId>(2, _omitFieldNames ? '' : 'removedCredIds', $pb.PbFieldType.PM, subBuilder: CredentialRegistrationId.create)
    ..aOM<AccountThreshold>(3, _omitFieldNames ? '' : 'newThreshold', subBuilder: AccountThreshold.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_CredentialsUpdated clone() => AccountTransactionEffects_CredentialsUpdated()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_CredentialsUpdated copyWith(void Function(AccountTransactionEffects_CredentialsUpdated) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_CredentialsUpdated)) as AccountTransactionEffects_CredentialsUpdated;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_CredentialsUpdated create() => AccountTransactionEffects_CredentialsUpdated._();
  AccountTransactionEffects_CredentialsUpdated createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_CredentialsUpdated> createRepeated() => $pb.PbList<AccountTransactionEffects_CredentialsUpdated>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_CredentialsUpdated getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_CredentialsUpdated>(create);
  static AccountTransactionEffects_CredentialsUpdated? _defaultInstance;

  /// The credential ids that were added.
  @$pb.TagNumber(1)
  $core.List<CredentialRegistrationId> get newCredIds => $_getList(0);

  /// The credentials that were removed.
  @$pb.TagNumber(2)
  $core.List<CredentialRegistrationId> get removedCredIds => $_getList(1);

  /// The (possibly) updated account threshold.
  @$pb.TagNumber(3)
  AccountThreshold get newThreshold => $_getN(2);
  @$pb.TagNumber(3)
  set newThreshold(AccountThreshold v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasNewThreshold() => $_has(2);
  @$pb.TagNumber(3)
  void clearNewThreshold() => clearField(3);
  @$pb.TagNumber(3)
  AccountThreshold ensureNewThreshold() => $_ensure(2);
}

/// A baker was configured. The details of what happened are contained in
/// the list of BakerEvents.
class AccountTransactionEffects_BakerConfigured extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_BakerConfigured({
    $core.Iterable<BakerEvent>? events,
  }) {
    final $result = create();
    if (events != null) {
      $result.events.addAll(events);
    }
    return $result;
  }
  AccountTransactionEffects_BakerConfigured._() : super();
  factory AccountTransactionEffects_BakerConfigured.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_BakerConfigured.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.BakerConfigured', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<BakerEvent>(1, _omitFieldNames ? '' : 'events', $pb.PbFieldType.PM, subBuilder: BakerEvent.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_BakerConfigured clone() => AccountTransactionEffects_BakerConfigured()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_BakerConfigured copyWith(void Function(AccountTransactionEffects_BakerConfigured) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_BakerConfigured)) as AccountTransactionEffects_BakerConfigured;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_BakerConfigured create() => AccountTransactionEffects_BakerConfigured._();
  AccountTransactionEffects_BakerConfigured createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_BakerConfigured> createRepeated() => $pb.PbList<AccountTransactionEffects_BakerConfigured>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_BakerConfigured getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_BakerConfigured>(create);
  static AccountTransactionEffects_BakerConfigured? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<BakerEvent> get events => $_getList(0);
}

/// An account configured delegation. The details of what happened are
/// contained in the list of DelegationEvents.
class AccountTransactionEffects_DelegationConfigured extends $pb.GeneratedMessage {
  factory AccountTransactionEffects_DelegationConfigured({
    $core.Iterable<DelegationEvent>? events,
  }) {
    final $result = create();
    if (events != null) {
      $result.events.addAll(events);
    }
    return $result;
  }
  AccountTransactionEffects_DelegationConfigured._() : super();
  factory AccountTransactionEffects_DelegationConfigured.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects_DelegationConfigured.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects.DelegationConfigured', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<DelegationEvent>(1, _omitFieldNames ? '' : 'events', $pb.PbFieldType.PM, subBuilder: DelegationEvent.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_DelegationConfigured clone() => AccountTransactionEffects_DelegationConfigured()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects_DelegationConfigured copyWith(void Function(AccountTransactionEffects_DelegationConfigured) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects_DelegationConfigured)) as AccountTransactionEffects_DelegationConfigured;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_DelegationConfigured create() => AccountTransactionEffects_DelegationConfigured._();
  AccountTransactionEffects_DelegationConfigured createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects_DelegationConfigured> createRepeated() => $pb.PbList<AccountTransactionEffects_DelegationConfigured>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects_DelegationConfigured getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects_DelegationConfigured>(create);
  static AccountTransactionEffects_DelegationConfigured? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<DelegationEvent> get events => $_getList(0);
}

enum AccountTransactionEffects_Effect {
  none, 
  moduleDeployed, 
  contractInitialized, 
  contractUpdateIssued, 
  accountTransfer, 
  bakerAdded, 
  bakerRemoved, 
  bakerStakeUpdated, 
  bakerRestakeEarningsUpdated, 
  bakerKeysUpdated, 
  encryptedAmountTransferred, 
  transferredToEncrypted, 
  transferredToPublic, 
  transferredWithSchedule, 
  credentialKeysUpdated, 
  credentialsUpdated, 
  dataRegistered, 
  bakerConfigured, 
  delegationConfigured, 
  notSet
}

/// Effects of an account transaction. All variants except `None`
/// correspond to a unique transaction that was successful.
class AccountTransactionEffects extends $pb.GeneratedMessage {
  factory AccountTransactionEffects({
    AccountTransactionEffects_None? none,
    ModuleRef? moduleDeployed,
    ContractInitializedEvent? contractInitialized,
    AccountTransactionEffects_ContractUpdateIssued? contractUpdateIssued,
    AccountTransactionEffects_AccountTransfer? accountTransfer,
    BakerEvent_BakerAdded? bakerAdded,
    BakerId? bakerRemoved,
    AccountTransactionEffects_BakerStakeUpdated? bakerStakeUpdated,
    BakerEvent_BakerRestakeEarningsUpdated? bakerRestakeEarningsUpdated,
    BakerKeysEvent? bakerKeysUpdated,
    AccountTransactionEffects_EncryptedAmountTransferred? encryptedAmountTransferred,
    EncryptedSelfAmountAddedEvent? transferredToEncrypted,
    AccountTransactionEffects_TransferredToPublic? transferredToPublic,
    AccountTransactionEffects_TransferredWithSchedule? transferredWithSchedule,
    CredentialRegistrationId? credentialKeysUpdated,
    AccountTransactionEffects_CredentialsUpdated? credentialsUpdated,
    RegisteredData? dataRegistered,
    AccountTransactionEffects_BakerConfigured? bakerConfigured,
    AccountTransactionEffects_DelegationConfigured? delegationConfigured,
  }) {
    final $result = create();
    if (none != null) {
      $result.none = none;
    }
    if (moduleDeployed != null) {
      $result.moduleDeployed = moduleDeployed;
    }
    if (contractInitialized != null) {
      $result.contractInitialized = contractInitialized;
    }
    if (contractUpdateIssued != null) {
      $result.contractUpdateIssued = contractUpdateIssued;
    }
    if (accountTransfer != null) {
      $result.accountTransfer = accountTransfer;
    }
    if (bakerAdded != null) {
      $result.bakerAdded = bakerAdded;
    }
    if (bakerRemoved != null) {
      $result.bakerRemoved = bakerRemoved;
    }
    if (bakerStakeUpdated != null) {
      $result.bakerStakeUpdated = bakerStakeUpdated;
    }
    if (bakerRestakeEarningsUpdated != null) {
      $result.bakerRestakeEarningsUpdated = bakerRestakeEarningsUpdated;
    }
    if (bakerKeysUpdated != null) {
      $result.bakerKeysUpdated = bakerKeysUpdated;
    }
    if (encryptedAmountTransferred != null) {
      $result.encryptedAmountTransferred = encryptedAmountTransferred;
    }
    if (transferredToEncrypted != null) {
      $result.transferredToEncrypted = transferredToEncrypted;
    }
    if (transferredToPublic != null) {
      $result.transferredToPublic = transferredToPublic;
    }
    if (transferredWithSchedule != null) {
      $result.transferredWithSchedule = transferredWithSchedule;
    }
    if (credentialKeysUpdated != null) {
      $result.credentialKeysUpdated = credentialKeysUpdated;
    }
    if (credentialsUpdated != null) {
      $result.credentialsUpdated = credentialsUpdated;
    }
    if (dataRegistered != null) {
      $result.dataRegistered = dataRegistered;
    }
    if (bakerConfigured != null) {
      $result.bakerConfigured = bakerConfigured;
    }
    if (delegationConfigured != null) {
      $result.delegationConfigured = delegationConfigured;
    }
    return $result;
  }
  AccountTransactionEffects._() : super();
  factory AccountTransactionEffects.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionEffects.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, AccountTransactionEffects_Effect> _AccountTransactionEffects_EffectByTag = {
    1 : AccountTransactionEffects_Effect.none,
    2 : AccountTransactionEffects_Effect.moduleDeployed,
    3 : AccountTransactionEffects_Effect.contractInitialized,
    4 : AccountTransactionEffects_Effect.contractUpdateIssued,
    5 : AccountTransactionEffects_Effect.accountTransfer,
    6 : AccountTransactionEffects_Effect.bakerAdded,
    7 : AccountTransactionEffects_Effect.bakerRemoved,
    8 : AccountTransactionEffects_Effect.bakerStakeUpdated,
    9 : AccountTransactionEffects_Effect.bakerRestakeEarningsUpdated,
    10 : AccountTransactionEffects_Effect.bakerKeysUpdated,
    11 : AccountTransactionEffects_Effect.encryptedAmountTransferred,
    12 : AccountTransactionEffects_Effect.transferredToEncrypted,
    13 : AccountTransactionEffects_Effect.transferredToPublic,
    14 : AccountTransactionEffects_Effect.transferredWithSchedule,
    15 : AccountTransactionEffects_Effect.credentialKeysUpdated,
    16 : AccountTransactionEffects_Effect.credentialsUpdated,
    17 : AccountTransactionEffects_Effect.dataRegistered,
    18 : AccountTransactionEffects_Effect.bakerConfigured,
    19 : AccountTransactionEffects_Effect.delegationConfigured,
    0 : AccountTransactionEffects_Effect.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionEffects', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
    ..aOM<AccountTransactionEffects_None>(1, _omitFieldNames ? '' : 'none', subBuilder: AccountTransactionEffects_None.create)
    ..aOM<ModuleRef>(2, _omitFieldNames ? '' : 'moduleDeployed', subBuilder: ModuleRef.create)
    ..aOM<ContractInitializedEvent>(3, _omitFieldNames ? '' : 'contractInitialized', subBuilder: ContractInitializedEvent.create)
    ..aOM<AccountTransactionEffects_ContractUpdateIssued>(4, _omitFieldNames ? '' : 'contractUpdateIssued', subBuilder: AccountTransactionEffects_ContractUpdateIssued.create)
    ..aOM<AccountTransactionEffects_AccountTransfer>(5, _omitFieldNames ? '' : 'accountTransfer', subBuilder: AccountTransactionEffects_AccountTransfer.create)
    ..aOM<BakerEvent_BakerAdded>(6, _omitFieldNames ? '' : 'bakerAdded', subBuilder: BakerEvent_BakerAdded.create)
    ..aOM<BakerId>(7, _omitFieldNames ? '' : 'bakerRemoved', subBuilder: BakerId.create)
    ..aOM<AccountTransactionEffects_BakerStakeUpdated>(8, _omitFieldNames ? '' : 'bakerStakeUpdated', subBuilder: AccountTransactionEffects_BakerStakeUpdated.create)
    ..aOM<BakerEvent_BakerRestakeEarningsUpdated>(9, _omitFieldNames ? '' : 'bakerRestakeEarningsUpdated', subBuilder: BakerEvent_BakerRestakeEarningsUpdated.create)
    ..aOM<BakerKeysEvent>(10, _omitFieldNames ? '' : 'bakerKeysUpdated', subBuilder: BakerKeysEvent.create)
    ..aOM<AccountTransactionEffects_EncryptedAmountTransferred>(11, _omitFieldNames ? '' : 'encryptedAmountTransferred', subBuilder: AccountTransactionEffects_EncryptedAmountTransferred.create)
    ..aOM<EncryptedSelfAmountAddedEvent>(12, _omitFieldNames ? '' : 'transferredToEncrypted', subBuilder: EncryptedSelfAmountAddedEvent.create)
    ..aOM<AccountTransactionEffects_TransferredToPublic>(13, _omitFieldNames ? '' : 'transferredToPublic', subBuilder: AccountTransactionEffects_TransferredToPublic.create)
    ..aOM<AccountTransactionEffects_TransferredWithSchedule>(14, _omitFieldNames ? '' : 'transferredWithSchedule', subBuilder: AccountTransactionEffects_TransferredWithSchedule.create)
    ..aOM<CredentialRegistrationId>(15, _omitFieldNames ? '' : 'credentialKeysUpdated', subBuilder: CredentialRegistrationId.create)
    ..aOM<AccountTransactionEffects_CredentialsUpdated>(16, _omitFieldNames ? '' : 'credentialsUpdated', subBuilder: AccountTransactionEffects_CredentialsUpdated.create)
    ..aOM<RegisteredData>(17, _omitFieldNames ? '' : 'dataRegistered', subBuilder: RegisteredData.create)
    ..aOM<AccountTransactionEffects_BakerConfigured>(18, _omitFieldNames ? '' : 'bakerConfigured', subBuilder: AccountTransactionEffects_BakerConfigured.create)
    ..aOM<AccountTransactionEffects_DelegationConfigured>(19, _omitFieldNames ? '' : 'delegationConfigured', subBuilder: AccountTransactionEffects_DelegationConfigured.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects clone() => AccountTransactionEffects()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionEffects copyWith(void Function(AccountTransactionEffects) updates) => super.copyWith((message) => updates(message as AccountTransactionEffects)) as AccountTransactionEffects;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects create() => AccountTransactionEffects._();
  AccountTransactionEffects createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionEffects> createRepeated() => $pb.PbList<AccountTransactionEffects>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionEffects getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionEffects>(create);
  static AccountTransactionEffects? _defaultInstance;

  AccountTransactionEffects_Effect whichEffect() => _AccountTransactionEffects_EffectByTag[$_whichOneof(0)]!;
  void clearEffect() => clearField($_whichOneof(0));

  /// No effects other than payment from this transaction.
  /// The rejection reason indicates why the transaction failed.
  @$pb.TagNumber(1)
  AccountTransactionEffects_None get none => $_getN(0);
  @$pb.TagNumber(1)
  set none(AccountTransactionEffects_None v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasNone() => $_has(0);
  @$pb.TagNumber(1)
  void clearNone() => clearField(1);
  @$pb.TagNumber(1)
  AccountTransactionEffects_None ensureNone() => $_ensure(0);

  /// A smart contract module with the attached reference was deployed.
  @$pb.TagNumber(2)
  ModuleRef get moduleDeployed => $_getN(1);
  @$pb.TagNumber(2)
  set moduleDeployed(ModuleRef v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasModuleDeployed() => $_has(1);
  @$pb.TagNumber(2)
  void clearModuleDeployed() => clearField(2);
  @$pb.TagNumber(2)
  ModuleRef ensureModuleDeployed() => $_ensure(1);

  /// A smart contract was initialized.
  @$pb.TagNumber(3)
  ContractInitializedEvent get contractInitialized => $_getN(2);
  @$pb.TagNumber(3)
  set contractInitialized(ContractInitializedEvent v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasContractInitialized() => $_has(2);
  @$pb.TagNumber(3)
  void clearContractInitialized() => clearField(3);
  @$pb.TagNumber(3)
  ContractInitializedEvent ensureContractInitialized() => $_ensure(2);

  /// A smart contract instance updated was issued.
  @$pb.TagNumber(4)
  AccountTransactionEffects_ContractUpdateIssued get contractUpdateIssued => $_getN(3);
  @$pb.TagNumber(4)
  set contractUpdateIssued(AccountTransactionEffects_ContractUpdateIssued v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasContractUpdateIssued() => $_has(3);
  @$pb.TagNumber(4)
  void clearContractUpdateIssued() => clearField(4);
  @$pb.TagNumber(4)
  AccountTransactionEffects_ContractUpdateIssued ensureContractUpdateIssued() => $_ensure(3);

  /// A simple account to account transfer occurred.
  @$pb.TagNumber(5)
  AccountTransactionEffects_AccountTransfer get accountTransfer => $_getN(4);
  @$pb.TagNumber(5)
  set accountTransfer(AccountTransactionEffects_AccountTransfer v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasAccountTransfer() => $_has(4);
  @$pb.TagNumber(5)
  void clearAccountTransfer() => clearField(5);
  @$pb.TagNumber(5)
  AccountTransactionEffects_AccountTransfer ensureAccountTransfer() => $_ensure(4);

  /// A baker was added.
  @$pb.TagNumber(6)
  BakerEvent_BakerAdded get bakerAdded => $_getN(5);
  @$pb.TagNumber(6)
  set bakerAdded(BakerEvent_BakerAdded v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasBakerAdded() => $_has(5);
  @$pb.TagNumber(6)
  void clearBakerAdded() => clearField(6);
  @$pb.TagNumber(6)
  BakerEvent_BakerAdded ensureBakerAdded() => $_ensure(5);

  /// A baker was removed.
  @$pb.TagNumber(7)
  BakerId get bakerRemoved => $_getN(6);
  @$pb.TagNumber(7)
  set bakerRemoved(BakerId v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasBakerRemoved() => $_has(6);
  @$pb.TagNumber(7)
  void clearBakerRemoved() => clearField(7);
  @$pb.TagNumber(7)
  BakerId ensureBakerRemoved() => $_ensure(6);

  /// A baker's stake was updated.
  @$pb.TagNumber(8)
  AccountTransactionEffects_BakerStakeUpdated get bakerStakeUpdated => $_getN(7);
  @$pb.TagNumber(8)
  set bakerStakeUpdated(AccountTransactionEffects_BakerStakeUpdated v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasBakerStakeUpdated() => $_has(7);
  @$pb.TagNumber(8)
  void clearBakerStakeUpdated() => clearField(8);
  @$pb.TagNumber(8)
  AccountTransactionEffects_BakerStakeUpdated ensureBakerStakeUpdated() => $_ensure(7);

  /// A baker's restake earnings setting was updated.
  @$pb.TagNumber(9)
  BakerEvent_BakerRestakeEarningsUpdated get bakerRestakeEarningsUpdated => $_getN(8);
  @$pb.TagNumber(9)
  set bakerRestakeEarningsUpdated(BakerEvent_BakerRestakeEarningsUpdated v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasBakerRestakeEarningsUpdated() => $_has(8);
  @$pb.TagNumber(9)
  void clearBakerRestakeEarningsUpdated() => clearField(9);
  @$pb.TagNumber(9)
  BakerEvent_BakerRestakeEarningsUpdated ensureBakerRestakeEarningsUpdated() => $_ensure(8);

  /// A baker's keys were updated.
  @$pb.TagNumber(10)
  BakerKeysEvent get bakerKeysUpdated => $_getN(9);
  @$pb.TagNumber(10)
  set bakerKeysUpdated(BakerKeysEvent v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasBakerKeysUpdated() => $_has(9);
  @$pb.TagNumber(10)
  void clearBakerKeysUpdated() => clearField(10);
  @$pb.TagNumber(10)
  BakerKeysEvent ensureBakerKeysUpdated() => $_ensure(9);

  /// An encrypted amount was transferred.
  @$pb.TagNumber(11)
  AccountTransactionEffects_EncryptedAmountTransferred get encryptedAmountTransferred => $_getN(10);
  @$pb.TagNumber(11)
  set encryptedAmountTransferred(AccountTransactionEffects_EncryptedAmountTransferred v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasEncryptedAmountTransferred() => $_has(10);
  @$pb.TagNumber(11)
  void clearEncryptedAmountTransferred() => clearField(11);
  @$pb.TagNumber(11)
  AccountTransactionEffects_EncryptedAmountTransferred ensureEncryptedAmountTransferred() => $_ensure(10);

  /// An account transferred part of its public balance to its encrypted
  /// balance.
  @$pb.TagNumber(12)
  EncryptedSelfAmountAddedEvent get transferredToEncrypted => $_getN(11);
  @$pb.TagNumber(12)
  set transferredToEncrypted(EncryptedSelfAmountAddedEvent v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasTransferredToEncrypted() => $_has(11);
  @$pb.TagNumber(12)
  void clearTransferredToEncrypted() => clearField(12);
  @$pb.TagNumber(12)
  EncryptedSelfAmountAddedEvent ensureTransferredToEncrypted() => $_ensure(11);

  /// An account transferred part of its encrypted balance to its public balance.
  @$pb.TagNumber(13)
  AccountTransactionEffects_TransferredToPublic get transferredToPublic => $_getN(12);
  @$pb.TagNumber(13)
  set transferredToPublic(AccountTransactionEffects_TransferredToPublic v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasTransferredToPublic() => $_has(12);
  @$pb.TagNumber(13)
  void clearTransferredToPublic() => clearField(13);
  @$pb.TagNumber(13)
  AccountTransactionEffects_TransferredToPublic ensureTransferredToPublic() => $_ensure(12);

  /// A transfer with a release schedule was made.
  @$pb.TagNumber(14)
  AccountTransactionEffects_TransferredWithSchedule get transferredWithSchedule => $_getN(13);
  @$pb.TagNumber(14)
  set transferredWithSchedule(AccountTransactionEffects_TransferredWithSchedule v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasTransferredWithSchedule() => $_has(13);
  @$pb.TagNumber(14)
  void clearTransferredWithSchedule() => clearField(14);
  @$pb.TagNumber(14)
  AccountTransactionEffects_TransferredWithSchedule ensureTransferredWithSchedule() => $_ensure(13);

  /// Keys of a specific credential were updated.
  @$pb.TagNumber(15)
  CredentialRegistrationId get credentialKeysUpdated => $_getN(14);
  @$pb.TagNumber(15)
  set credentialKeysUpdated(CredentialRegistrationId v) { setField(15, v); }
  @$pb.TagNumber(15)
  $core.bool hasCredentialKeysUpdated() => $_has(14);
  @$pb.TagNumber(15)
  void clearCredentialKeysUpdated() => clearField(15);
  @$pb.TagNumber(15)
  CredentialRegistrationId ensureCredentialKeysUpdated() => $_ensure(14);

  /// Account credentials were updated.
  @$pb.TagNumber(16)
  AccountTransactionEffects_CredentialsUpdated get credentialsUpdated => $_getN(15);
  @$pb.TagNumber(16)
  set credentialsUpdated(AccountTransactionEffects_CredentialsUpdated v) { setField(16, v); }
  @$pb.TagNumber(16)
  $core.bool hasCredentialsUpdated() => $_has(15);
  @$pb.TagNumber(16)
  void clearCredentialsUpdated() => clearField(16);
  @$pb.TagNumber(16)
  AccountTransactionEffects_CredentialsUpdated ensureCredentialsUpdated() => $_ensure(15);

  /// Some data was registered on the chain.
  @$pb.TagNumber(17)
  RegisteredData get dataRegistered => $_getN(16);
  @$pb.TagNumber(17)
  set dataRegistered(RegisteredData v) { setField(17, v); }
  @$pb.TagNumber(17)
  $core.bool hasDataRegistered() => $_has(16);
  @$pb.TagNumber(17)
  void clearDataRegistered() => clearField(17);
  @$pb.TagNumber(17)
  RegisteredData ensureDataRegistered() => $_ensure(16);

  /// A baker was configured. The details of what happened are contained in a list of BakerEvents.
  @$pb.TagNumber(18)
  AccountTransactionEffects_BakerConfigured get bakerConfigured => $_getN(17);
  @$pb.TagNumber(18)
  set bakerConfigured(AccountTransactionEffects_BakerConfigured v) { setField(18, v); }
  @$pb.TagNumber(18)
  $core.bool hasBakerConfigured() => $_has(17);
  @$pb.TagNumber(18)
  void clearBakerConfigured() => clearField(18);
  @$pb.TagNumber(18)
  AccountTransactionEffects_BakerConfigured ensureBakerConfigured() => $_ensure(17);

  /// A delegator was configured. The details of what happened are contained in a list of DelegatorEvents.
  @$pb.TagNumber(19)
  AccountTransactionEffects_DelegationConfigured get delegationConfigured => $_getN(18);
  @$pb.TagNumber(19)
  set delegationConfigured(AccountTransactionEffects_DelegationConfigured v) { setField(19, v); }
  @$pb.TagNumber(19)
  $core.bool hasDelegationConfigured() => $_has(18);
  @$pb.TagNumber(19)
  void clearDelegationConfigured() => clearField(19);
  @$pb.TagNumber(19)
  AccountTransactionEffects_DelegationConfigured ensureDelegationConfigured() => $_ensure(18);
}

/// Election difficulty parameter.
class ElectionDifficulty extends $pb.GeneratedMessage {
  factory ElectionDifficulty({
    AmountFraction? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ElectionDifficulty._() : super();
  factory ElectionDifficulty.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ElectionDifficulty.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ElectionDifficulty', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'value', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ElectionDifficulty clone() => ElectionDifficulty()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ElectionDifficulty copyWith(void Function(ElectionDifficulty) updates) => super.copyWith((message) => updates(message as ElectionDifficulty)) as ElectionDifficulty;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ElectionDifficulty create() => ElectionDifficulty._();
  ElectionDifficulty createEmptyInstance() => create();
  static $pb.PbList<ElectionDifficulty> createRepeated() => $pb.PbList<ElectionDifficulty>();
  @$core.pragma('dart2js:noInline')
  static ElectionDifficulty getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ElectionDifficulty>(create);
  static ElectionDifficulty? _defaultInstance;

  @$pb.TagNumber(1)
  AmountFraction get value => $_getN(0);
  @$pb.TagNumber(1)
  set value(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureValue() => $_ensure(0);
}

/// Parameters that determine timeouts in the consensus protocol used from protocol version 6.
class TimeoutParameters extends $pb.GeneratedMessage {
  factory TimeoutParameters({
    Duration? timeoutBase,
    Ratio? timeoutIncrease,
    Ratio? timeoutDecrease,
  }) {
    final $result = create();
    if (timeoutBase != null) {
      $result.timeoutBase = timeoutBase;
    }
    if (timeoutIncrease != null) {
      $result.timeoutIncrease = timeoutIncrease;
    }
    if (timeoutDecrease != null) {
      $result.timeoutDecrease = timeoutDecrease;
    }
    return $result;
  }
  TimeoutParameters._() : super();
  factory TimeoutParameters.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TimeoutParameters.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TimeoutParameters', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Duration>(1, _omitFieldNames ? '' : 'timeoutBase', subBuilder: Duration.create)
    ..aOM<Ratio>(2, _omitFieldNames ? '' : 'timeoutIncrease', subBuilder: Ratio.create)
    ..aOM<Ratio>(3, _omitFieldNames ? '' : 'timeoutDecrease', subBuilder: Ratio.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TimeoutParameters clone() => TimeoutParameters()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TimeoutParameters copyWith(void Function(TimeoutParameters) updates) => super.copyWith((message) => updates(message as TimeoutParameters)) as TimeoutParameters;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TimeoutParameters create() => TimeoutParameters._();
  TimeoutParameters createEmptyInstance() => create();
  static $pb.PbList<TimeoutParameters> createRepeated() => $pb.PbList<TimeoutParameters>();
  @$core.pragma('dart2js:noInline')
  static TimeoutParameters getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TimeoutParameters>(create);
  static TimeoutParameters? _defaultInstance;

  /// The base value for triggering a timeout
  @$pb.TagNumber(1)
  Duration get timeoutBase => $_getN(0);
  @$pb.TagNumber(1)
  set timeoutBase(Duration v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTimeoutBase() => $_has(0);
  @$pb.TagNumber(1)
  void clearTimeoutBase() => clearField(1);
  @$pb.TagNumber(1)
  Duration ensureTimeoutBase() => $_ensure(0);

  /// Factor for increasing the timeout. Must be greater than 1.
  @$pb.TagNumber(2)
  Ratio get timeoutIncrease => $_getN(1);
  @$pb.TagNumber(2)
  set timeoutIncrease(Ratio v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTimeoutIncrease() => $_has(1);
  @$pb.TagNumber(2)
  void clearTimeoutIncrease() => clearField(2);
  @$pb.TagNumber(2)
  Ratio ensureTimeoutIncrease() => $_ensure(1);

  /// Factor for decreasing the timeout. Must be between 0 and 1.
  @$pb.TagNumber(3)
  Ratio get timeoutDecrease => $_getN(2);
  @$pb.TagNumber(3)
  set timeoutDecrease(Ratio v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasTimeoutDecrease() => $_has(2);
  @$pb.TagNumber(3)
  void clearTimeoutDecrease() => clearField(3);
  @$pb.TagNumber(3)
  Ratio ensureTimeoutDecrease() => $_ensure(2);
}

/// Finalization committee parameters used from protocol version 6
class FinalizationCommitteeParameters extends $pb.GeneratedMessage {
  factory FinalizationCommitteeParameters({
    $core.int? minimumFinalizers,
    $core.int? maximumFinalizers,
    AmountFraction? finalizerRelativeStakeThreshold,
  }) {
    final $result = create();
    if (minimumFinalizers != null) {
      $result.minimumFinalizers = minimumFinalizers;
    }
    if (maximumFinalizers != null) {
      $result.maximumFinalizers = maximumFinalizers;
    }
    if (finalizerRelativeStakeThreshold != null) {
      $result.finalizerRelativeStakeThreshold = finalizerRelativeStakeThreshold;
    }
    return $result;
  }
  FinalizationCommitteeParameters._() : super();
  factory FinalizationCommitteeParameters.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory FinalizationCommitteeParameters.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'FinalizationCommitteeParameters', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'minimumFinalizers', $pb.PbFieldType.OU3)
    ..a<$core.int>(2, _omitFieldNames ? '' : 'maximumFinalizers', $pb.PbFieldType.OU3)
    ..aOM<AmountFraction>(3, _omitFieldNames ? '' : 'finalizerRelativeStakeThreshold', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  FinalizationCommitteeParameters clone() => FinalizationCommitteeParameters()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  FinalizationCommitteeParameters copyWith(void Function(FinalizationCommitteeParameters) updates) => super.copyWith((message) => updates(message as FinalizationCommitteeParameters)) as FinalizationCommitteeParameters;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static FinalizationCommitteeParameters create() => FinalizationCommitteeParameters._();
  FinalizationCommitteeParameters createEmptyInstance() => create();
  static $pb.PbList<FinalizationCommitteeParameters> createRepeated() => $pb.PbList<FinalizationCommitteeParameters>();
  @$core.pragma('dart2js:noInline')
  static FinalizationCommitteeParameters getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<FinalizationCommitteeParameters>(create);
  static FinalizationCommitteeParameters? _defaultInstance;

  /// The minimum size of a finalization committee before `finalizer_relative_stake_threshold` takes effect.
  @$pb.TagNumber(1)
  $core.int get minimumFinalizers => $_getIZ(0);
  @$pb.TagNumber(1)
  set minimumFinalizers($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasMinimumFinalizers() => $_has(0);
  @$pb.TagNumber(1)
  void clearMinimumFinalizers() => clearField(1);

  /// The maximum size of a finalization committee.
  @$pb.TagNumber(2)
  $core.int get maximumFinalizers => $_getIZ(1);
  @$pb.TagNumber(2)
  set maximumFinalizers($core.int v) { $_setUnsignedInt32(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasMaximumFinalizers() => $_has(1);
  @$pb.TagNumber(2)
  void clearMaximumFinalizers() => clearField(2);

  /// The threshold for determining the stake required for being eligible the finalization committee.
  /// The amount is given by `total stake in pools * finalizer_relative_stake_threshold`
  @$pb.TagNumber(3)
  AmountFraction get finalizerRelativeStakeThreshold => $_getN(2);
  @$pb.TagNumber(3)
  set finalizerRelativeStakeThreshold(AmountFraction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasFinalizerRelativeStakeThreshold() => $_has(2);
  @$pb.TagNumber(3)
  void clearFinalizerRelativeStakeThreshold() => clearField(3);
  @$pb.TagNumber(3)
  AmountFraction ensureFinalizerRelativeStakeThreshold() => $_ensure(2);
}

/// Parameters for the consensus protocol used from protocol version 6.
class ConsensusParametersV1 extends $pb.GeneratedMessage {
  factory ConsensusParametersV1({
    TimeoutParameters? timeoutParameters,
    Duration? minBlockTime,
    Energy? blockEnergyLimit,
  }) {
    final $result = create();
    if (timeoutParameters != null) {
      $result.timeoutParameters = timeoutParameters;
    }
    if (minBlockTime != null) {
      $result.minBlockTime = minBlockTime;
    }
    if (blockEnergyLimit != null) {
      $result.blockEnergyLimit = blockEnergyLimit;
    }
    return $result;
  }
  ConsensusParametersV1._() : super();
  factory ConsensusParametersV1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ConsensusParametersV1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ConsensusParametersV1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<TimeoutParameters>(1, _omitFieldNames ? '' : 'timeoutParameters', subBuilder: TimeoutParameters.create)
    ..aOM<Duration>(2, _omitFieldNames ? '' : 'minBlockTime', subBuilder: Duration.create)
    ..aOM<Energy>(3, _omitFieldNames ? '' : 'blockEnergyLimit', subBuilder: Energy.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ConsensusParametersV1 clone() => ConsensusParametersV1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ConsensusParametersV1 copyWith(void Function(ConsensusParametersV1) updates) => super.copyWith((message) => updates(message as ConsensusParametersV1)) as ConsensusParametersV1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ConsensusParametersV1 create() => ConsensusParametersV1._();
  ConsensusParametersV1 createEmptyInstance() => create();
  static $pb.PbList<ConsensusParametersV1> createRepeated() => $pb.PbList<ConsensusParametersV1>();
  @$core.pragma('dart2js:noInline')
  static ConsensusParametersV1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ConsensusParametersV1>(create);
  static ConsensusParametersV1? _defaultInstance;

  /// Parameters controlling round timeouts.
  @$pb.TagNumber(1)
  TimeoutParameters get timeoutParameters => $_getN(0);
  @$pb.TagNumber(1)
  set timeoutParameters(TimeoutParameters v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTimeoutParameters() => $_has(0);
  @$pb.TagNumber(1)
  void clearTimeoutParameters() => clearField(1);
  @$pb.TagNumber(1)
  TimeoutParameters ensureTimeoutParameters() => $_ensure(0);

  /// Minimum time interval between blocks.
  @$pb.TagNumber(2)
  Duration get minBlockTime => $_getN(1);
  @$pb.TagNumber(2)
  set minBlockTime(Duration v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasMinBlockTime() => $_has(1);
  @$pb.TagNumber(2)
  void clearMinBlockTime() => clearField(2);
  @$pb.TagNumber(2)
  Duration ensureMinBlockTime() => $_ensure(1);

  /// Maximum energy allowed per block.
  @$pb.TagNumber(3)
  Energy get blockEnergyLimit => $_getN(2);
  @$pb.TagNumber(3)
  set blockEnergyLimit(Energy v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasBlockEnergyLimit() => $_has(2);
  @$pb.TagNumber(3)
  void clearBlockEnergyLimit() => clearField(3);
  @$pb.TagNumber(3)
  Energy ensureBlockEnergyLimit() => $_ensure(2);
}

/// Represents an exchange rate.
class ExchangeRate extends $pb.GeneratedMessage {
  factory ExchangeRate({
    Ratio? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ExchangeRate._() : super();
  factory ExchangeRate.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ExchangeRate.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ExchangeRate', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Ratio>(1, _omitFieldNames ? '' : 'value', subBuilder: Ratio.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ExchangeRate clone() => ExchangeRate()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ExchangeRate copyWith(void Function(ExchangeRate) updates) => super.copyWith((message) => updates(message as ExchangeRate)) as ExchangeRate;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ExchangeRate create() => ExchangeRate._();
  ExchangeRate createEmptyInstance() => create();
  static $pb.PbList<ExchangeRate> createRepeated() => $pb.PbList<ExchangeRate>();
  @$core.pragma('dart2js:noInline')
  static ExchangeRate getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ExchangeRate>(create);
  static ExchangeRate? _defaultInstance;

  @$pb.TagNumber(1)
  Ratio get value => $_getN(0);
  @$pb.TagNumber(1)
  set value(Ratio v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
  @$pb.TagNumber(1)
  Ratio ensureValue() => $_ensure(0);
}

/// Represents a ratio, i.e., 'numerator / denominator'.
class Ratio extends $pb.GeneratedMessage {
  factory Ratio({
    $fixnum.Int64? numerator,
    $fixnum.Int64? denominator,
  }) {
    final $result = create();
    if (numerator != null) {
      $result.numerator = numerator;
    }
    if (denominator != null) {
      $result.denominator = denominator;
    }
    return $result;
  }
  Ratio._() : super();
  factory Ratio.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Ratio.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Ratio', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'numerator', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'denominator', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Ratio clone() => Ratio()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Ratio copyWith(void Function(Ratio) updates) => super.copyWith((message) => updates(message as Ratio)) as Ratio;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Ratio create() => Ratio._();
  Ratio createEmptyInstance() => create();
  static $pb.PbList<Ratio> createRepeated() => $pb.PbList<Ratio>();
  @$core.pragma('dart2js:noInline')
  static Ratio getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Ratio>(create);
  static Ratio? _defaultInstance;

  /// The numerator.
  @$pb.TagNumber(1)
  $fixnum.Int64 get numerator => $_getI64(0);
  @$pb.TagNumber(1)
  set numerator($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasNumerator() => $_has(0);
  @$pb.TagNumber(1)
  void clearNumerator() => clearField(1);

  /// The denominator.
  @$pb.TagNumber(2)
  $fixnum.Int64 get denominator => $_getI64(1);
  @$pb.TagNumber(2)
  set denominator($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasDenominator() => $_has(1);
  @$pb.TagNumber(2)
  void clearDenominator() => clearField(2);
}

/// A public key used for chain updates.
class UpdatePublicKey extends $pb.GeneratedMessage {
  factory UpdatePublicKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  UpdatePublicKey._() : super();
  factory UpdatePublicKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdatePublicKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdatePublicKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdatePublicKey clone() => UpdatePublicKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdatePublicKey copyWith(void Function(UpdatePublicKey) updates) => super.copyWith((message) => updates(message as UpdatePublicKey)) as UpdatePublicKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdatePublicKey create() => UpdatePublicKey._();
  UpdatePublicKey createEmptyInstance() => create();
  static $pb.PbList<UpdatePublicKey> createRepeated() => $pb.PbList<UpdatePublicKey>();
  @$core.pragma('dart2js:noInline')
  static UpdatePublicKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdatePublicKey>(create);
  static UpdatePublicKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The threshold for how many UpdatePublicKeys are need to make a certain chain update.
class UpdateKeysThreshold extends $pb.GeneratedMessage {
  factory UpdateKeysThreshold({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  UpdateKeysThreshold._() : super();
  factory UpdateKeysThreshold.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateKeysThreshold.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateKeysThreshold', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateKeysThreshold clone() => UpdateKeysThreshold()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateKeysThreshold copyWith(void Function(UpdateKeysThreshold) updates) => super.copyWith((message) => updates(message as UpdateKeysThreshold)) as UpdateKeysThreshold;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateKeysThreshold create() => UpdateKeysThreshold._();
  UpdateKeysThreshold createEmptyInstance() => create();
  static $pb.PbList<UpdateKeysThreshold> createRepeated() => $pb.PbList<UpdateKeysThreshold>();
  @$core.pragma('dart2js:noInline')
  static UpdateKeysThreshold getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateKeysThreshold>(create);
  static UpdateKeysThreshold? _defaultInstance;

  /// Is ensured to be within between 1 and 2^16.
  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Index of a key in an authorizations update payload.
class UpdateKeysIndex extends $pb.GeneratedMessage {
  factory UpdateKeysIndex({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  UpdateKeysIndex._() : super();
  factory UpdateKeysIndex.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateKeysIndex.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateKeysIndex', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateKeysIndex clone() => UpdateKeysIndex()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateKeysIndex copyWith(void Function(UpdateKeysIndex) updates) => super.copyWith((message) => updates(message as UpdateKeysIndex)) as UpdateKeysIndex;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateKeysIndex create() => UpdateKeysIndex._();
  UpdateKeysIndex createEmptyInstance() => create();
  static $pb.PbList<UpdateKeysIndex> createRepeated() => $pb.PbList<UpdateKeysIndex>();
  @$core.pragma('dart2js:noInline')
  static UpdateKeysIndex getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateKeysIndex>(create);
  static UpdateKeysIndex? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Represents root or level 1 keys.
class HigherLevelKeys extends $pb.GeneratedMessage {
  factory HigherLevelKeys({
    $core.Iterable<UpdatePublicKey>? keys,
    UpdateKeysThreshold? threshold,
  }) {
    final $result = create();
    if (keys != null) {
      $result.keys.addAll(keys);
    }
    if (threshold != null) {
      $result.threshold = threshold;
    }
    return $result;
  }
  HigherLevelKeys._() : super();
  factory HigherLevelKeys.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory HigherLevelKeys.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'HigherLevelKeys', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<UpdatePublicKey>(1, _omitFieldNames ? '' : 'keys', $pb.PbFieldType.PM, subBuilder: UpdatePublicKey.create)
    ..aOM<UpdateKeysThreshold>(2, _omitFieldNames ? '' : 'threshold', subBuilder: UpdateKeysThreshold.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  HigherLevelKeys clone() => HigherLevelKeys()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  HigherLevelKeys copyWith(void Function(HigherLevelKeys) updates) => super.copyWith((message) => updates(message as HigherLevelKeys)) as HigherLevelKeys;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static HigherLevelKeys create() => HigherLevelKeys._();
  HigherLevelKeys createEmptyInstance() => create();
  static $pb.PbList<HigherLevelKeys> createRepeated() => $pb.PbList<HigherLevelKeys>();
  @$core.pragma('dart2js:noInline')
  static HigherLevelKeys getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<HigherLevelKeys>(create);
  static HigherLevelKeys? _defaultInstance;

  /// The keys.
  @$pb.TagNumber(1)
  $core.List<UpdatePublicKey> get keys => $_getList(0);

  /// The number of keys needed to make a chain update.
  @$pb.TagNumber(2)
  UpdateKeysThreshold get threshold => $_getN(1);
  @$pb.TagNumber(2)
  set threshold(UpdateKeysThreshold v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasThreshold() => $_has(1);
  @$pb.TagNumber(2)
  void clearThreshold() => clearField(2);
  @$pb.TagNumber(2)
  UpdateKeysThreshold ensureThreshold() => $_ensure(1);
}

/// An access structure which specifies which UpdatePublicKeys in a HigherLevelKeys that are allowed
/// to make chain update of a specific type. The threshold defines the minimum number of allowed keys needed
/// to make the actual update.
class AccessStructure extends $pb.GeneratedMessage {
  factory AccessStructure({
    $core.Iterable<UpdateKeysIndex>? accessPublicKeys,
    UpdateKeysThreshold? accessThreshold,
  }) {
    final $result = create();
    if (accessPublicKeys != null) {
      $result.accessPublicKeys.addAll(accessPublicKeys);
    }
    if (accessThreshold != null) {
      $result.accessThreshold = accessThreshold;
    }
    return $result;
  }
  AccessStructure._() : super();
  factory AccessStructure.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccessStructure.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccessStructure', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<UpdateKeysIndex>(1, _omitFieldNames ? '' : 'accessPublicKeys', $pb.PbFieldType.PM, subBuilder: UpdateKeysIndex.create)
    ..aOM<UpdateKeysThreshold>(2, _omitFieldNames ? '' : 'accessThreshold', subBuilder: UpdateKeysThreshold.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccessStructure clone() => AccessStructure()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccessStructure copyWith(void Function(AccessStructure) updates) => super.copyWith((message) => updates(message as AccessStructure)) as AccessStructure;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccessStructure create() => AccessStructure._();
  AccessStructure createEmptyInstance() => create();
  static $pb.PbList<AccessStructure> createRepeated() => $pb.PbList<AccessStructure>();
  @$core.pragma('dart2js:noInline')
  static AccessStructure getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccessStructure>(create);
  static AccessStructure? _defaultInstance;

  /// Unique indexes into the set of keys in AuthorizationV0.
  @$pb.TagNumber(1)
  $core.List<UpdateKeysIndex> get accessPublicKeys => $_getList(0);

  /// Number of keys requred to authorize an update.
  @$pb.TagNumber(2)
  UpdateKeysThreshold get accessThreshold => $_getN(1);
  @$pb.TagNumber(2)
  set accessThreshold(UpdateKeysThreshold v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAccessThreshold() => $_has(1);
  @$pb.TagNumber(2)
  void clearAccessThreshold() => clearField(2);
  @$pb.TagNumber(2)
  UpdateKeysThreshold ensureAccessThreshold() => $_ensure(1);
}

/// The set of keys authorized for chain updates, together with access structures
/// determining which keys are authorized for which update types.
/// This is the payload of an update to authorization.
class AuthorizationsV0 extends $pb.GeneratedMessage {
  factory AuthorizationsV0({
    $core.Iterable<UpdatePublicKey>? keys,
    AccessStructure? emergency,
    AccessStructure? protocol,
    AccessStructure? parameterConsensus,
    AccessStructure? parameterEuroPerEnergy,
    AccessStructure? parameterMicroCCDPerEuro,
    AccessStructure? parameterFoundationAccount,
    AccessStructure? parameterMintDistribution,
    AccessStructure? parameterTransactionFeeDistribution,
    AccessStructure? parameterGasRewards,
    AccessStructure? poolParameters,
    AccessStructure? addAnonymityRevoker,
    AccessStructure? addIdentityProvider,
  }) {
    final $result = create();
    if (keys != null) {
      $result.keys.addAll(keys);
    }
    if (emergency != null) {
      $result.emergency = emergency;
    }
    if (protocol != null) {
      $result.protocol = protocol;
    }
    if (parameterConsensus != null) {
      $result.parameterConsensus = parameterConsensus;
    }
    if (parameterEuroPerEnergy != null) {
      $result.parameterEuroPerEnergy = parameterEuroPerEnergy;
    }
    if (parameterMicroCCDPerEuro != null) {
      $result.parameterMicroCCDPerEuro = parameterMicroCCDPerEuro;
    }
    if (parameterFoundationAccount != null) {
      $result.parameterFoundationAccount = parameterFoundationAccount;
    }
    if (parameterMintDistribution != null) {
      $result.parameterMintDistribution = parameterMintDistribution;
    }
    if (parameterTransactionFeeDistribution != null) {
      $result.parameterTransactionFeeDistribution = parameterTransactionFeeDistribution;
    }
    if (parameterGasRewards != null) {
      $result.parameterGasRewards = parameterGasRewards;
    }
    if (poolParameters != null) {
      $result.poolParameters = poolParameters;
    }
    if (addAnonymityRevoker != null) {
      $result.addAnonymityRevoker = addAnonymityRevoker;
    }
    if (addIdentityProvider != null) {
      $result.addIdentityProvider = addIdentityProvider;
    }
    return $result;
  }
  AuthorizationsV0._() : super();
  factory AuthorizationsV0.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AuthorizationsV0.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AuthorizationsV0', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<UpdatePublicKey>(1, _omitFieldNames ? '' : 'keys', $pb.PbFieldType.PM, subBuilder: UpdatePublicKey.create)
    ..aOM<AccessStructure>(2, _omitFieldNames ? '' : 'emergency', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(3, _omitFieldNames ? '' : 'protocol', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(4, _omitFieldNames ? '' : 'parameterConsensus', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(5, _omitFieldNames ? '' : 'parameterEuroPerEnergy', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(6, _omitFieldNames ? '' : 'parameterMicroCCDPerEuro', protoName: 'parameter_micro_CCD_per_euro', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(7, _omitFieldNames ? '' : 'parameterFoundationAccount', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(8, _omitFieldNames ? '' : 'parameterMintDistribution', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(9, _omitFieldNames ? '' : 'parameterTransactionFeeDistribution', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(10, _omitFieldNames ? '' : 'parameterGasRewards', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(11, _omitFieldNames ? '' : 'poolParameters', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(12, _omitFieldNames ? '' : 'addAnonymityRevoker', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(13, _omitFieldNames ? '' : 'addIdentityProvider', subBuilder: AccessStructure.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AuthorizationsV0 clone() => AuthorizationsV0()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AuthorizationsV0 copyWith(void Function(AuthorizationsV0) updates) => super.copyWith((message) => updates(message as AuthorizationsV0)) as AuthorizationsV0;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AuthorizationsV0 create() => AuthorizationsV0._();
  AuthorizationsV0 createEmptyInstance() => create();
  static $pb.PbList<AuthorizationsV0> createRepeated() => $pb.PbList<AuthorizationsV0>();
  @$core.pragma('dart2js:noInline')
  static AuthorizationsV0 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AuthorizationsV0>(create);
  static AuthorizationsV0? _defaultInstance;

  /// The set of keys authorized for chain updates.
  @$pb.TagNumber(1)
  $core.List<UpdatePublicKey> get keys => $_getList(0);

  /// New emergency keys.
  @$pb.TagNumber(2)
  AccessStructure get emergency => $_getN(1);
  @$pb.TagNumber(2)
  set emergency(AccessStructure v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEmergency() => $_has(1);
  @$pb.TagNumber(2)
  void clearEmergency() => clearField(2);
  @$pb.TagNumber(2)
  AccessStructure ensureEmergency() => $_ensure(1);

  /// New protocol update keys.
  @$pb.TagNumber(3)
  AccessStructure get protocol => $_getN(2);
  @$pb.TagNumber(3)
  set protocol(AccessStructure v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasProtocol() => $_has(2);
  @$pb.TagNumber(3)
  void clearProtocol() => clearField(3);
  @$pb.TagNumber(3)
  AccessStructure ensureProtocol() => $_ensure(2);

  /// Access structure for updating the consensus parameters.
  /// Previously, this was the election difficulty.
  @$pb.TagNumber(4)
  AccessStructure get parameterConsensus => $_getN(3);
  @$pb.TagNumber(4)
  set parameterConsensus(AccessStructure v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasParameterConsensus() => $_has(3);
  @$pb.TagNumber(4)
  void clearParameterConsensus() => clearField(4);
  @$pb.TagNumber(4)
  AccessStructure ensureParameterConsensus() => $_ensure(3);

  /// Access structure for updating the euro per energy.
  @$pb.TagNumber(5)
  AccessStructure get parameterEuroPerEnergy => $_getN(4);
  @$pb.TagNumber(5)
  set parameterEuroPerEnergy(AccessStructure v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasParameterEuroPerEnergy() => $_has(4);
  @$pb.TagNumber(5)
  void clearParameterEuroPerEnergy() => clearField(5);
  @$pb.TagNumber(5)
  AccessStructure ensureParameterEuroPerEnergy() => $_ensure(4);

  /// Access structure for updating the micro CCD per euro.
  @$pb.TagNumber(6)
  AccessStructure get parameterMicroCCDPerEuro => $_getN(5);
  @$pb.TagNumber(6)
  set parameterMicroCCDPerEuro(AccessStructure v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasParameterMicroCCDPerEuro() => $_has(5);
  @$pb.TagNumber(6)
  void clearParameterMicroCCDPerEuro() => clearField(6);
  @$pb.TagNumber(6)
  AccessStructure ensureParameterMicroCCDPerEuro() => $_ensure(5);

  /// Access structure for updating the foundation account.
  @$pb.TagNumber(7)
  AccessStructure get parameterFoundationAccount => $_getN(6);
  @$pb.TagNumber(7)
  set parameterFoundationAccount(AccessStructure v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasParameterFoundationAccount() => $_has(6);
  @$pb.TagNumber(7)
  void clearParameterFoundationAccount() => clearField(7);
  @$pb.TagNumber(7)
  AccessStructure ensureParameterFoundationAccount() => $_ensure(6);

  /// Access structure for updating the mint distribution.
  @$pb.TagNumber(8)
  AccessStructure get parameterMintDistribution => $_getN(7);
  @$pb.TagNumber(8)
  set parameterMintDistribution(AccessStructure v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasParameterMintDistribution() => $_has(7);
  @$pb.TagNumber(8)
  void clearParameterMintDistribution() => clearField(8);
  @$pb.TagNumber(8)
  AccessStructure ensureParameterMintDistribution() => $_ensure(7);

  /// Access structure for updating the transaction fee distribution.
  @$pb.TagNumber(9)
  AccessStructure get parameterTransactionFeeDistribution => $_getN(8);
  @$pb.TagNumber(9)
  set parameterTransactionFeeDistribution(AccessStructure v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasParameterTransactionFeeDistribution() => $_has(8);
  @$pb.TagNumber(9)
  void clearParameterTransactionFeeDistribution() => clearField(9);
  @$pb.TagNumber(9)
  AccessStructure ensureParameterTransactionFeeDistribution() => $_ensure(8);

  /// Access structure for updating the gas rewards.
  @$pb.TagNumber(10)
  AccessStructure get parameterGasRewards => $_getN(9);
  @$pb.TagNumber(10)
  set parameterGasRewards(AccessStructure v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasParameterGasRewards() => $_has(9);
  @$pb.TagNumber(10)
  void clearParameterGasRewards() => clearField(10);
  @$pb.TagNumber(10)
  AccessStructure ensureParameterGasRewards() => $_ensure(9);

  /// Access structure for updating the pool parameters. For V0 this is only
  /// the baker stake threshold, for V1 there are more.
  @$pb.TagNumber(11)
  AccessStructure get poolParameters => $_getN(10);
  @$pb.TagNumber(11)
  set poolParameters(AccessStructure v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasPoolParameters() => $_has(10);
  @$pb.TagNumber(11)
  void clearPoolParameters() => clearField(11);
  @$pb.TagNumber(11)
  AccessStructure ensurePoolParameters() => $_ensure(10);

  /// Access structure for adding new anonymity revokers.
  @$pb.TagNumber(12)
  AccessStructure get addAnonymityRevoker => $_getN(11);
  @$pb.TagNumber(12)
  set addAnonymityRevoker(AccessStructure v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasAddAnonymityRevoker() => $_has(11);
  @$pb.TagNumber(12)
  void clearAddAnonymityRevoker() => clearField(12);
  @$pb.TagNumber(12)
  AccessStructure ensureAddAnonymityRevoker() => $_ensure(11);

  /// Access structure for adding new identity providers.
  @$pb.TagNumber(13)
  AccessStructure get addIdentityProvider => $_getN(12);
  @$pb.TagNumber(13)
  set addIdentityProvider(AccessStructure v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasAddIdentityProvider() => $_has(12);
  @$pb.TagNumber(13)
  void clearAddIdentityProvider() => clearField(13);
  @$pb.TagNumber(13)
  AccessStructure ensureAddIdentityProvider() => $_ensure(12);
}

/// The set of keys authorized for chain updates, together with access structures
/// determining which keys are authorized for which update types.
/// This is the payload of an update to authorization.
class AuthorizationsV1 extends $pb.GeneratedMessage {
  factory AuthorizationsV1({
    AuthorizationsV0? v0,
    AccessStructure? parameterCooldown,
    AccessStructure? parameterTime,
  }) {
    final $result = create();
    if (v0 != null) {
      $result.v0 = v0;
    }
    if (parameterCooldown != null) {
      $result.parameterCooldown = parameterCooldown;
    }
    if (parameterTime != null) {
      $result.parameterTime = parameterTime;
    }
    return $result;
  }
  AuthorizationsV1._() : super();
  factory AuthorizationsV1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AuthorizationsV1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AuthorizationsV1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AuthorizationsV0>(1, _omitFieldNames ? '' : 'v0', subBuilder: AuthorizationsV0.create)
    ..aOM<AccessStructure>(2, _omitFieldNames ? '' : 'parameterCooldown', subBuilder: AccessStructure.create)
    ..aOM<AccessStructure>(3, _omitFieldNames ? '' : 'parameterTime', subBuilder: AccessStructure.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AuthorizationsV1 clone() => AuthorizationsV1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AuthorizationsV1 copyWith(void Function(AuthorizationsV1) updates) => super.copyWith((message) => updates(message as AuthorizationsV1)) as AuthorizationsV1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AuthorizationsV1 create() => AuthorizationsV1._();
  AuthorizationsV1 createEmptyInstance() => create();
  static $pb.PbList<AuthorizationsV1> createRepeated() => $pb.PbList<AuthorizationsV1>();
  @$core.pragma('dart2js:noInline')
  static AuthorizationsV1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AuthorizationsV1>(create);
  static AuthorizationsV1? _defaultInstance;

  @$pb.TagNumber(1)
  AuthorizationsV0 get v0 => $_getN(0);
  @$pb.TagNumber(1)
  set v0(AuthorizationsV0 v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasV0() => $_has(0);
  @$pb.TagNumber(1)
  void clearV0() => clearField(1);
  @$pb.TagNumber(1)
  AuthorizationsV0 ensureV0() => $_ensure(0);

  /// Access structure for updating the cooldown periods related to baking and delegation.
  @$pb.TagNumber(2)
  AccessStructure get parameterCooldown => $_getN(1);
  @$pb.TagNumber(2)
  set parameterCooldown(AccessStructure v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasParameterCooldown() => $_has(1);
  @$pb.TagNumber(2)
  void clearParameterCooldown() => clearField(2);
  @$pb.TagNumber(2)
  AccessStructure ensureParameterCooldown() => $_ensure(1);

  /// Access structure for updating the length of the reward period.
  @$pb.TagNumber(3)
  AccessStructure get parameterTime => $_getN(2);
  @$pb.TagNumber(3)
  set parameterTime(AccessStructure v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasParameterTime() => $_has(2);
  @$pb.TagNumber(3)
  void clearParameterTime() => clearField(3);
  @$pb.TagNumber(3)
  AccessStructure ensureParameterTime() => $_ensure(2);
}

/// Description either of an anonymity revoker or identity provider.
/// Metadata that should be visible on the chain.
class Description extends $pb.GeneratedMessage {
  factory Description({
    $core.String? name,
    $core.String? url,
    $core.String? description,
  }) {
    final $result = create();
    if (name != null) {
      $result.name = name;
    }
    if (url != null) {
      $result.url = url;
    }
    if (description != null) {
      $result.description = description;
    }
    return $result;
  }
  Description._() : super();
  factory Description.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Description.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Description', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'name')
    ..aOS(2, _omitFieldNames ? '' : 'url')
    ..aOS(3, _omitFieldNames ? '' : 'description')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Description clone() => Description()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Description copyWith(void Function(Description) updates) => super.copyWith((message) => updates(message as Description)) as Description;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Description create() => Description._();
  Description createEmptyInstance() => create();
  static $pb.PbList<Description> createRepeated() => $pb.PbList<Description>();
  @$core.pragma('dart2js:noInline')
  static Description getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Description>(create);
  static Description? _defaultInstance;

  /// The name.
  @$pb.TagNumber(1)
  $core.String get name => $_getSZ(0);
  @$pb.TagNumber(1)
  set name($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasName() => $_has(0);
  @$pb.TagNumber(1)
  void clearName() => clearField(1);

  /// A link to more information about the anonymity revoker or identity provider.
  @$pb.TagNumber(2)
  $core.String get url => $_getSZ(1);
  @$pb.TagNumber(2)
  set url($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasUrl() => $_has(1);
  @$pb.TagNumber(2)
  void clearUrl() => clearField(2);

  /// A free form description of the revoker or provider.
  @$pb.TagNumber(3)
  $core.String get description => $_getSZ(2);
  @$pb.TagNumber(3)
  set description($core.String v) { $_setString(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasDescription() => $_has(2);
  @$pb.TagNumber(3)
  void clearDescription() => clearField(3);
}

/// Identity of the anonymity revoker on the chain. This defines their
/// evaluateion point for secret sharing, and thus it cannot be 0.
class ArInfo_ArIdentity extends $pb.GeneratedMessage {
  factory ArInfo_ArIdentity({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ArInfo_ArIdentity._() : super();
  factory ArInfo_ArIdentity.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ArInfo_ArIdentity.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ArInfo.ArIdentity', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ArInfo_ArIdentity clone() => ArInfo_ArIdentity()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ArInfo_ArIdentity copyWith(void Function(ArInfo_ArIdentity) updates) => super.copyWith((message) => updates(message as ArInfo_ArIdentity)) as ArInfo_ArIdentity;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ArInfo_ArIdentity create() => ArInfo_ArIdentity._();
  ArInfo_ArIdentity createEmptyInstance() => create();
  static $pb.PbList<ArInfo_ArIdentity> createRepeated() => $pb.PbList<ArInfo_ArIdentity>();
  @$core.pragma('dart2js:noInline')
  static ArInfo_ArIdentity getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ArInfo_ArIdentity>(create);
  static ArInfo_ArIdentity? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Public key of an anonymity revoker.
class ArInfo_ArPublicKey extends $pb.GeneratedMessage {
  factory ArInfo_ArPublicKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  ArInfo_ArPublicKey._() : super();
  factory ArInfo_ArPublicKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ArInfo_ArPublicKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ArInfo.ArPublicKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ArInfo_ArPublicKey clone() => ArInfo_ArPublicKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ArInfo_ArPublicKey copyWith(void Function(ArInfo_ArPublicKey) updates) => super.copyWith((message) => updates(message as ArInfo_ArPublicKey)) as ArInfo_ArPublicKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ArInfo_ArPublicKey create() => ArInfo_ArPublicKey._();
  ArInfo_ArPublicKey createEmptyInstance() => create();
  static $pb.PbList<ArInfo_ArPublicKey> createRepeated() => $pb.PbList<ArInfo_ArPublicKey>();
  @$core.pragma('dart2js:noInline')
  static ArInfo_ArPublicKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ArInfo_ArPublicKey>(create);
  static ArInfo_ArPublicKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Information on a single anonymity revoker help by the identity provider.
/// Typically an identity provider will hold more than one.
class ArInfo extends $pb.GeneratedMessage {
  factory ArInfo({
    ArInfo_ArIdentity? identity,
    Description? description,
    ArInfo_ArPublicKey? publicKey,
  }) {
    final $result = create();
    if (identity != null) {
      $result.identity = identity;
    }
    if (description != null) {
      $result.description = description;
    }
    if (publicKey != null) {
      $result.publicKey = publicKey;
    }
    return $result;
  }
  ArInfo._() : super();
  factory ArInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ArInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ArInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ArInfo_ArIdentity>(1, _omitFieldNames ? '' : 'identity', subBuilder: ArInfo_ArIdentity.create)
    ..aOM<Description>(2, _omitFieldNames ? '' : 'description', subBuilder: Description.create)
    ..aOM<ArInfo_ArPublicKey>(3, _omitFieldNames ? '' : 'publicKey', subBuilder: ArInfo_ArPublicKey.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ArInfo clone() => ArInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ArInfo copyWith(void Function(ArInfo) updates) => super.copyWith((message) => updates(message as ArInfo)) as ArInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ArInfo create() => ArInfo._();
  ArInfo createEmptyInstance() => create();
  static $pb.PbList<ArInfo> createRepeated() => $pb.PbList<ArInfo>();
  @$core.pragma('dart2js:noInline')
  static ArInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ArInfo>(create);
  static ArInfo? _defaultInstance;

  /// Unique identifier of the anonymity revoker.
  @$pb.TagNumber(1)
  ArInfo_ArIdentity get identity => $_getN(0);
  @$pb.TagNumber(1)
  set identity(ArInfo_ArIdentity v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasIdentity() => $_has(0);
  @$pb.TagNumber(1)
  void clearIdentity() => clearField(1);
  @$pb.TagNumber(1)
  ArInfo_ArIdentity ensureIdentity() => $_ensure(0);

  /// Description of the anonymity revoker.
  @$pb.TagNumber(2)
  Description get description => $_getN(1);
  @$pb.TagNumber(2)
  set description(Description v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDescription() => $_has(1);
  @$pb.TagNumber(2)
  void clearDescription() => clearField(2);
  @$pb.TagNumber(2)
  Description ensureDescription() => $_ensure(1);

  /// Elgamal encryption key of the anonymity revoker.
  @$pb.TagNumber(3)
  ArInfo_ArPublicKey get publicKey => $_getN(2);
  @$pb.TagNumber(3)
  set publicKey(ArInfo_ArPublicKey v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasPublicKey() => $_has(2);
  @$pb.TagNumber(3)
  void clearPublicKey() => clearField(3);
  @$pb.TagNumber(3)
  ArInfo_ArPublicKey ensurePublicKey() => $_ensure(2);
}

/// A succinct identifier of an identity provider on the chain.
/// In credential deployments, and other interactions with the chain this is
/// used to identify which identity provider is meant.
class IpIdentity extends $pb.GeneratedMessage {
  factory IpIdentity({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  IpIdentity._() : super();
  factory IpIdentity.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory IpIdentity.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'IpIdentity', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  IpIdentity clone() => IpIdentity()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  IpIdentity copyWith(void Function(IpIdentity) updates) => super.copyWith((message) => updates(message as IpIdentity)) as IpIdentity;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static IpIdentity create() => IpIdentity._();
  IpIdentity createEmptyInstance() => create();
  static $pb.PbList<IpIdentity> createRepeated() => $pb.PbList<IpIdentity>();
  @$core.pragma('dart2js:noInline')
  static IpIdentity getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<IpIdentity>(create);
  static IpIdentity? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Pointcheval-Sanders public key of the identity provider.
class IpInfo_IpVerifyKey extends $pb.GeneratedMessage {
  factory IpInfo_IpVerifyKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  IpInfo_IpVerifyKey._() : super();
  factory IpInfo_IpVerifyKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory IpInfo_IpVerifyKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'IpInfo.IpVerifyKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  IpInfo_IpVerifyKey clone() => IpInfo_IpVerifyKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  IpInfo_IpVerifyKey copyWith(void Function(IpInfo_IpVerifyKey) updates) => super.copyWith((message) => updates(message as IpInfo_IpVerifyKey)) as IpInfo_IpVerifyKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static IpInfo_IpVerifyKey create() => IpInfo_IpVerifyKey._();
  IpInfo_IpVerifyKey createEmptyInstance() => create();
  static $pb.PbList<IpInfo_IpVerifyKey> createRepeated() => $pb.PbList<IpInfo_IpVerifyKey>();
  @$core.pragma('dart2js:noInline')
  static IpInfo_IpVerifyKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<IpInfo_IpVerifyKey>(create);
  static IpInfo_IpVerifyKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Ed25519 public key of the identity provider.
class IpInfo_IpCdiVerifyKey extends $pb.GeneratedMessage {
  factory IpInfo_IpCdiVerifyKey({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  IpInfo_IpCdiVerifyKey._() : super();
  factory IpInfo_IpCdiVerifyKey.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory IpInfo_IpCdiVerifyKey.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'IpInfo.IpCdiVerifyKey', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  IpInfo_IpCdiVerifyKey clone() => IpInfo_IpCdiVerifyKey()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  IpInfo_IpCdiVerifyKey copyWith(void Function(IpInfo_IpCdiVerifyKey) updates) => super.copyWith((message) => updates(message as IpInfo_IpCdiVerifyKey)) as IpInfo_IpCdiVerifyKey;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static IpInfo_IpCdiVerifyKey create() => IpInfo_IpCdiVerifyKey._();
  IpInfo_IpCdiVerifyKey createEmptyInstance() => create();
  static $pb.PbList<IpInfo_IpCdiVerifyKey> createRepeated() => $pb.PbList<IpInfo_IpCdiVerifyKey>();
  @$core.pragma('dart2js:noInline')
  static IpInfo_IpCdiVerifyKey getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<IpInfo_IpCdiVerifyKey>(create);
  static IpInfo_IpCdiVerifyKey? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Public information about an identity provider.
class IpInfo extends $pb.GeneratedMessage {
  factory IpInfo({
    IpIdentity? identity,
    Description? description,
    IpInfo_IpVerifyKey? verifyKey,
    IpInfo_IpCdiVerifyKey? cdiVerifyKey,
  }) {
    final $result = create();
    if (identity != null) {
      $result.identity = identity;
    }
    if (description != null) {
      $result.description = description;
    }
    if (verifyKey != null) {
      $result.verifyKey = verifyKey;
    }
    if (cdiVerifyKey != null) {
      $result.cdiVerifyKey = cdiVerifyKey;
    }
    return $result;
  }
  IpInfo._() : super();
  factory IpInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory IpInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'IpInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<IpIdentity>(1, _omitFieldNames ? '' : 'identity', subBuilder: IpIdentity.create)
    ..aOM<Description>(2, _omitFieldNames ? '' : 'description', subBuilder: Description.create)
    ..aOM<IpInfo_IpVerifyKey>(3, _omitFieldNames ? '' : 'verifyKey', subBuilder: IpInfo_IpVerifyKey.create)
    ..aOM<IpInfo_IpCdiVerifyKey>(4, _omitFieldNames ? '' : 'cdiVerifyKey', subBuilder: IpInfo_IpCdiVerifyKey.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  IpInfo clone() => IpInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  IpInfo copyWith(void Function(IpInfo) updates) => super.copyWith((message) => updates(message as IpInfo)) as IpInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static IpInfo create() => IpInfo._();
  IpInfo createEmptyInstance() => create();
  static $pb.PbList<IpInfo> createRepeated() => $pb.PbList<IpInfo>();
  @$core.pragma('dart2js:noInline')
  static IpInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<IpInfo>(create);
  static IpInfo? _defaultInstance;

  /// Unique identifier of the identity provider.
  @$pb.TagNumber(1)
  IpIdentity get identity => $_getN(0);
  @$pb.TagNumber(1)
  set identity(IpIdentity v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasIdentity() => $_has(0);
  @$pb.TagNumber(1)
  void clearIdentity() => clearField(1);
  @$pb.TagNumber(1)
  IpIdentity ensureIdentity() => $_ensure(0);

  /// Description of the identity provider.
  @$pb.TagNumber(2)
  Description get description => $_getN(1);
  @$pb.TagNumber(2)
  set description(Description v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDescription() => $_has(1);
  @$pb.TagNumber(2)
  void clearDescription() => clearField(2);
  @$pb.TagNumber(2)
  Description ensureDescription() => $_ensure(1);

  /// Pointcheval-Sanders public key of the identity provider.
  @$pb.TagNumber(3)
  IpInfo_IpVerifyKey get verifyKey => $_getN(2);
  @$pb.TagNumber(3)
  set verifyKey(IpInfo_IpVerifyKey v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasVerifyKey() => $_has(2);
  @$pb.TagNumber(3)
  void clearVerifyKey() => clearField(3);
  @$pb.TagNumber(3)
  IpInfo_IpVerifyKey ensureVerifyKey() => $_ensure(2);

  /// Ed25519 public key of the identity provider.
  @$pb.TagNumber(4)
  IpInfo_IpCdiVerifyKey get cdiVerifyKey => $_getN(3);
  @$pb.TagNumber(4)
  set cdiVerifyKey(IpInfo_IpCdiVerifyKey v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasCdiVerifyKey() => $_has(3);
  @$pb.TagNumber(4)
  void clearCdiVerifyKey() => clearField(4);
  @$pb.TagNumber(4)
  IpInfo_IpCdiVerifyKey ensureCdiVerifyKey() => $_ensure(3);
}

/// A duration in seconds.
class DurationSeconds extends $pb.GeneratedMessage {
  factory DurationSeconds({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  DurationSeconds._() : super();
  factory DurationSeconds.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DurationSeconds.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DurationSeconds', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DurationSeconds clone() => DurationSeconds()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DurationSeconds copyWith(void Function(DurationSeconds) updates) => super.copyWith((message) => updates(message as DurationSeconds)) as DurationSeconds;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DurationSeconds create() => DurationSeconds._();
  DurationSeconds createEmptyInstance() => create();
  static $pb.PbList<DurationSeconds> createRepeated() => $pb.PbList<DurationSeconds>();
  @$core.pragma('dart2js:noInline')
  static DurationSeconds getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DurationSeconds>(create);
  static DurationSeconds? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Inclusive range of amount fractions.
class InclusiveRangeAmountFraction extends $pb.GeneratedMessage {
  factory InclusiveRangeAmountFraction({
    AmountFraction? min,
    AmountFraction? max,
  }) {
    final $result = create();
    if (min != null) {
      $result.min = min;
    }
    if (max != null) {
      $result.max = max;
    }
    return $result;
  }
  InclusiveRangeAmountFraction._() : super();
  factory InclusiveRangeAmountFraction.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InclusiveRangeAmountFraction.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InclusiveRangeAmountFraction', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'min', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'max', protoName: 'max_', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InclusiveRangeAmountFraction clone() => InclusiveRangeAmountFraction()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InclusiveRangeAmountFraction copyWith(void Function(InclusiveRangeAmountFraction) updates) => super.copyWith((message) => updates(message as InclusiveRangeAmountFraction)) as InclusiveRangeAmountFraction;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InclusiveRangeAmountFraction create() => InclusiveRangeAmountFraction._();
  InclusiveRangeAmountFraction createEmptyInstance() => create();
  static $pb.PbList<InclusiveRangeAmountFraction> createRepeated() => $pb.PbList<InclusiveRangeAmountFraction>();
  @$core.pragma('dart2js:noInline')
  static InclusiveRangeAmountFraction getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InclusiveRangeAmountFraction>(create);
  static InclusiveRangeAmountFraction? _defaultInstance;

  @$pb.TagNumber(1)
  AmountFraction get min => $_getN(0);
  @$pb.TagNumber(1)
  set min(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasMin() => $_has(0);
  @$pb.TagNumber(1)
  void clearMin() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureMin() => $_ensure(0);

  @$pb.TagNumber(2)
  AmountFraction get max => $_getN(1);
  @$pb.TagNumber(2)
  set max(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasMax() => $_has(1);
  @$pb.TagNumber(2)
  void clearMax() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureMax() => $_ensure(1);
}

/// Ranges of allowed commission values that pools may choose from.
class CommissionRanges extends $pb.GeneratedMessage {
  factory CommissionRanges({
    InclusiveRangeAmountFraction? finalization,
    InclusiveRangeAmountFraction? baking,
    InclusiveRangeAmountFraction? transaction,
  }) {
    final $result = create();
    if (finalization != null) {
      $result.finalization = finalization;
    }
    if (baking != null) {
      $result.baking = baking;
    }
    if (transaction != null) {
      $result.transaction = transaction;
    }
    return $result;
  }
  CommissionRanges._() : super();
  factory CommissionRanges.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CommissionRanges.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CommissionRanges', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<InclusiveRangeAmountFraction>(1, _omitFieldNames ? '' : 'finalization', subBuilder: InclusiveRangeAmountFraction.create)
    ..aOM<InclusiveRangeAmountFraction>(2, _omitFieldNames ? '' : 'baking', subBuilder: InclusiveRangeAmountFraction.create)
    ..aOM<InclusiveRangeAmountFraction>(3, _omitFieldNames ? '' : 'transaction', subBuilder: InclusiveRangeAmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CommissionRanges clone() => CommissionRanges()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CommissionRanges copyWith(void Function(CommissionRanges) updates) => super.copyWith((message) => updates(message as CommissionRanges)) as CommissionRanges;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CommissionRanges create() => CommissionRanges._();
  CommissionRanges createEmptyInstance() => create();
  static $pb.PbList<CommissionRanges> createRepeated() => $pb.PbList<CommissionRanges>();
  @$core.pragma('dart2js:noInline')
  static CommissionRanges getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CommissionRanges>(create);
  static CommissionRanges? _defaultInstance;

  /// The range of allowed finalization commissions.
  @$pb.TagNumber(1)
  InclusiveRangeAmountFraction get finalization => $_getN(0);
  @$pb.TagNumber(1)
  set finalization(InclusiveRangeAmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasFinalization() => $_has(0);
  @$pb.TagNumber(1)
  void clearFinalization() => clearField(1);
  @$pb.TagNumber(1)
  InclusiveRangeAmountFraction ensureFinalization() => $_ensure(0);

  /// The range of allowed baker commissions.
  @$pb.TagNumber(2)
  InclusiveRangeAmountFraction get baking => $_getN(1);
  @$pb.TagNumber(2)
  set baking(InclusiveRangeAmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBaking() => $_has(1);
  @$pb.TagNumber(2)
  void clearBaking() => clearField(2);
  @$pb.TagNumber(2)
  InclusiveRangeAmountFraction ensureBaking() => $_ensure(1);

  /// The range of allowed transaction commissions.
  @$pb.TagNumber(3)
  InclusiveRangeAmountFraction get transaction => $_getN(2);
  @$pb.TagNumber(3)
  set transaction(InclusiveRangeAmountFraction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasTransaction() => $_has(2);
  @$pb.TagNumber(3)
  void clearTransaction() => clearField(3);
  @$pb.TagNumber(3)
  InclusiveRangeAmountFraction ensureTransaction() => $_ensure(2);
}

/// A bound on the relative share of the total staked capital that a baker can
/// have as its stake. This is required to be greater than 0.
class CapitalBound extends $pb.GeneratedMessage {
  factory CapitalBound({
    AmountFraction? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  CapitalBound._() : super();
  factory CapitalBound.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CapitalBound.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CapitalBound', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'value', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CapitalBound clone() => CapitalBound()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CapitalBound copyWith(void Function(CapitalBound) updates) => super.copyWith((message) => updates(message as CapitalBound)) as CapitalBound;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CapitalBound create() => CapitalBound._();
  CapitalBound createEmptyInstance() => create();
  static $pb.PbList<CapitalBound> createRepeated() => $pb.PbList<CapitalBound>();
  @$core.pragma('dart2js:noInline')
  static CapitalBound getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CapitalBound>(create);
  static CapitalBound? _defaultInstance;

  @$pb.TagNumber(1)
  AmountFraction get value => $_getN(0);
  @$pb.TagNumber(1)
  set value(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureValue() => $_ensure(0);
}

/// A leverage factor.
class LeverageFactor extends $pb.GeneratedMessage {
  factory LeverageFactor({
    Ratio? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  LeverageFactor._() : super();
  factory LeverageFactor.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory LeverageFactor.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'LeverageFactor', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Ratio>(1, _omitFieldNames ? '' : 'value', subBuilder: Ratio.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  LeverageFactor clone() => LeverageFactor()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  LeverageFactor copyWith(void Function(LeverageFactor) updates) => super.copyWith((message) => updates(message as LeverageFactor)) as LeverageFactor;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static LeverageFactor create() => LeverageFactor._();
  LeverageFactor createEmptyInstance() => create();
  static $pb.PbList<LeverageFactor> createRepeated() => $pb.PbList<LeverageFactor>();
  @$core.pragma('dart2js:noInline')
  static LeverageFactor getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<LeverageFactor>(create);
  static LeverageFactor? _defaultInstance;

  @$pb.TagNumber(1)
  Ratio get value => $_getN(0);
  @$pb.TagNumber(1)
  set value(Ratio v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
  @$pb.TagNumber(1)
  Ratio ensureValue() => $_ensure(0);
}

/// A chain epoch.
class Epoch extends $pb.GeneratedMessage {
  factory Epoch({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Epoch._() : super();
  factory Epoch.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Epoch.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Epoch', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Epoch clone() => Epoch()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Epoch copyWith(void Function(Epoch) updates) => super.copyWith((message) => updates(message as Epoch)) as Epoch;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Epoch create() => Epoch._();
  Epoch createEmptyInstance() => create();
  static $pb.PbList<Epoch> createRepeated() => $pb.PbList<Epoch>();
  @$core.pragma('dart2js:noInline')
  static Epoch getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Epoch>(create);
  static Epoch? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A round.
class Round extends $pb.GeneratedMessage {
  factory Round({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Round._() : super();
  factory Round.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Round.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Round', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Round clone() => Round()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Round copyWith(void Function(Round) updates) => super.copyWith((message) => updates(message as Round)) as Round;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Round create() => Round._();
  Round createEmptyInstance() => create();
  static $pb.PbList<Round> createRepeated() => $pb.PbList<Round>();
  @$core.pragma('dart2js:noInline')
  static Round getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Round>(create);
  static Round? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Length of a reward period in epochs.
/// Must always be a strictly positive number.
class RewardPeriodLength extends $pb.GeneratedMessage {
  factory RewardPeriodLength({
    Epoch? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  RewardPeriodLength._() : super();
  factory RewardPeriodLength.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RewardPeriodLength.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RewardPeriodLength', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Epoch>(1, _omitFieldNames ? '' : 'value', subBuilder: Epoch.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RewardPeriodLength clone() => RewardPeriodLength()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RewardPeriodLength copyWith(void Function(RewardPeriodLength) updates) => super.copyWith((message) => updates(message as RewardPeriodLength)) as RewardPeriodLength;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RewardPeriodLength create() => RewardPeriodLength._();
  RewardPeriodLength createEmptyInstance() => create();
  static $pb.PbList<RewardPeriodLength> createRepeated() => $pb.PbList<RewardPeriodLength>();
  @$core.pragma('dart2js:noInline')
  static RewardPeriodLength getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RewardPeriodLength>(create);
  static RewardPeriodLength? _defaultInstance;

  @$pb.TagNumber(1)
  Epoch get value => $_getN(0);
  @$pb.TagNumber(1)
  set value(Epoch v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
  @$pb.TagNumber(1)
  Epoch ensureValue() => $_ensure(0);
}

/// A minting rate of CCD.
/// The value is `mantissa * 10^(-exponent)`.
class MintRate extends $pb.GeneratedMessage {
  factory MintRate({
    $core.int? mantissa,
    $core.int? exponent,
  }) {
    final $result = create();
    if (mantissa != null) {
      $result.mantissa = mantissa;
    }
    if (exponent != null) {
      $result.exponent = exponent;
    }
    return $result;
  }
  MintRate._() : super();
  factory MintRate.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory MintRate.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'MintRate', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'mantissa', $pb.PbFieldType.OU3)
    ..a<$core.int>(2, _omitFieldNames ? '' : 'exponent', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  MintRate clone() => MintRate()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  MintRate copyWith(void Function(MintRate) updates) => super.copyWith((message) => updates(message as MintRate)) as MintRate;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static MintRate create() => MintRate._();
  MintRate createEmptyInstance() => create();
  static $pb.PbList<MintRate> createRepeated() => $pb.PbList<MintRate>();
  @$core.pragma('dart2js:noInline')
  static MintRate getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<MintRate>(create);
  static MintRate? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get mantissa => $_getIZ(0);
  @$pb.TagNumber(1)
  set mantissa($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasMantissa() => $_has(0);
  @$pb.TagNumber(1)
  void clearMantissa() => clearField(1);

  /// This will never exceed 255 and can thus be stored in a single byte.
  @$pb.TagNumber(2)
  $core.int get exponent => $_getIZ(1);
  @$pb.TagNumber(2)
  set exponent($core.int v) { $_setUnsignedInt32(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasExponent() => $_has(1);
  @$pb.TagNumber(2)
  void clearExponent() => clearField(2);
}

class CooldownParametersCpv1 extends $pb.GeneratedMessage {
  factory CooldownParametersCpv1({
    DurationSeconds? poolOwnerCooldown,
    DurationSeconds? delegatorCooldown,
  }) {
    final $result = create();
    if (poolOwnerCooldown != null) {
      $result.poolOwnerCooldown = poolOwnerCooldown;
    }
    if (delegatorCooldown != null) {
      $result.delegatorCooldown = delegatorCooldown;
    }
    return $result;
  }
  CooldownParametersCpv1._() : super();
  factory CooldownParametersCpv1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CooldownParametersCpv1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CooldownParametersCpv1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<DurationSeconds>(1, _omitFieldNames ? '' : 'poolOwnerCooldown', subBuilder: DurationSeconds.create)
    ..aOM<DurationSeconds>(2, _omitFieldNames ? '' : 'delegatorCooldown', subBuilder: DurationSeconds.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CooldownParametersCpv1 clone() => CooldownParametersCpv1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CooldownParametersCpv1 copyWith(void Function(CooldownParametersCpv1) updates) => super.copyWith((message) => updates(message as CooldownParametersCpv1)) as CooldownParametersCpv1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CooldownParametersCpv1 create() => CooldownParametersCpv1._();
  CooldownParametersCpv1 createEmptyInstance() => create();
  static $pb.PbList<CooldownParametersCpv1> createRepeated() => $pb.PbList<CooldownParametersCpv1>();
  @$core.pragma('dart2js:noInline')
  static CooldownParametersCpv1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CooldownParametersCpv1>(create);
  static CooldownParametersCpv1? _defaultInstance;

  /// Number of seconds that pool owners must cooldown
  /// when reducing their equity capital or closing the pool.
  @$pb.TagNumber(1)
  DurationSeconds get poolOwnerCooldown => $_getN(0);
  @$pb.TagNumber(1)
  set poolOwnerCooldown(DurationSeconds v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasPoolOwnerCooldown() => $_has(0);
  @$pb.TagNumber(1)
  void clearPoolOwnerCooldown() => clearField(1);
  @$pb.TagNumber(1)
  DurationSeconds ensurePoolOwnerCooldown() => $_ensure(0);

  /// Number of seconds that a delegator must cooldown
  /// when reducing their delegated stake.
  @$pb.TagNumber(2)
  DurationSeconds get delegatorCooldown => $_getN(1);
  @$pb.TagNumber(2)
  set delegatorCooldown(DurationSeconds v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDelegatorCooldown() => $_has(1);
  @$pb.TagNumber(2)
  void clearDelegatorCooldown() => clearField(2);
  @$pb.TagNumber(2)
  DurationSeconds ensureDelegatorCooldown() => $_ensure(1);
}

/// Parameters related to staking pools.
class PoolParametersCpv1 extends $pb.GeneratedMessage {
  factory PoolParametersCpv1({
    AmountFraction? passiveFinalizationCommission,
    AmountFraction? passiveBakingCommission,
    AmountFraction? passiveTransactionCommission,
    CommissionRanges? commissionBounds,
    Amount? minimumEquityCapital,
    CapitalBound? capitalBound,
    LeverageFactor? leverageBound,
  }) {
    final $result = create();
    if (passiveFinalizationCommission != null) {
      $result.passiveFinalizationCommission = passiveFinalizationCommission;
    }
    if (passiveBakingCommission != null) {
      $result.passiveBakingCommission = passiveBakingCommission;
    }
    if (passiveTransactionCommission != null) {
      $result.passiveTransactionCommission = passiveTransactionCommission;
    }
    if (commissionBounds != null) {
      $result.commissionBounds = commissionBounds;
    }
    if (minimumEquityCapital != null) {
      $result.minimumEquityCapital = minimumEquityCapital;
    }
    if (capitalBound != null) {
      $result.capitalBound = capitalBound;
    }
    if (leverageBound != null) {
      $result.leverageBound = leverageBound;
    }
    return $result;
  }
  PoolParametersCpv1._() : super();
  factory PoolParametersCpv1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PoolParametersCpv1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PoolParametersCpv1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'passiveFinalizationCommission', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'passiveBakingCommission', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(3, _omitFieldNames ? '' : 'passiveTransactionCommission', subBuilder: AmountFraction.create)
    ..aOM<CommissionRanges>(4, _omitFieldNames ? '' : 'commissionBounds', subBuilder: CommissionRanges.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'minimumEquityCapital', subBuilder: Amount.create)
    ..aOM<CapitalBound>(6, _omitFieldNames ? '' : 'capitalBound', subBuilder: CapitalBound.create)
    ..aOM<LeverageFactor>(7, _omitFieldNames ? '' : 'leverageBound', subBuilder: LeverageFactor.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PoolParametersCpv1 clone() => PoolParametersCpv1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PoolParametersCpv1 copyWith(void Function(PoolParametersCpv1) updates) => super.copyWith((message) => updates(message as PoolParametersCpv1)) as PoolParametersCpv1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PoolParametersCpv1 create() => PoolParametersCpv1._();
  PoolParametersCpv1 createEmptyInstance() => create();
  static $pb.PbList<PoolParametersCpv1> createRepeated() => $pb.PbList<PoolParametersCpv1>();
  @$core.pragma('dart2js:noInline')
  static PoolParametersCpv1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PoolParametersCpv1>(create);
  static PoolParametersCpv1? _defaultInstance;

  /// Fraction of finalization rewards charged by the passive delegation.
  @$pb.TagNumber(1)
  AmountFraction get passiveFinalizationCommission => $_getN(0);
  @$pb.TagNumber(1)
  set passiveFinalizationCommission(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasPassiveFinalizationCommission() => $_has(0);
  @$pb.TagNumber(1)
  void clearPassiveFinalizationCommission() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensurePassiveFinalizationCommission() => $_ensure(0);

  /// Fraction of baking rewards charged by the passive delegation.
  @$pb.TagNumber(2)
  AmountFraction get passiveBakingCommission => $_getN(1);
  @$pb.TagNumber(2)
  set passiveBakingCommission(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasPassiveBakingCommission() => $_has(1);
  @$pb.TagNumber(2)
  void clearPassiveBakingCommission() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensurePassiveBakingCommission() => $_ensure(1);

  /// Fraction of transaction rewards charged by the L-pool.
  @$pb.TagNumber(3)
  AmountFraction get passiveTransactionCommission => $_getN(2);
  @$pb.TagNumber(3)
  set passiveTransactionCommission(AmountFraction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasPassiveTransactionCommission() => $_has(2);
  @$pb.TagNumber(3)
  void clearPassiveTransactionCommission() => clearField(3);
  @$pb.TagNumber(3)
  AmountFraction ensurePassiveTransactionCommission() => $_ensure(2);

  /// Bounds on the commission rates that may be charged by bakers.
  @$pb.TagNumber(4)
  CommissionRanges get commissionBounds => $_getN(3);
  @$pb.TagNumber(4)
  set commissionBounds(CommissionRanges v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasCommissionBounds() => $_has(3);
  @$pb.TagNumber(4)
  void clearCommissionBounds() => clearField(4);
  @$pb.TagNumber(4)
  CommissionRanges ensureCommissionBounds() => $_ensure(3);

  /// Minimum equity capital required for a new baker.
  @$pb.TagNumber(5)
  Amount get minimumEquityCapital => $_getN(4);
  @$pb.TagNumber(5)
  set minimumEquityCapital(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasMinimumEquityCapital() => $_has(4);
  @$pb.TagNumber(5)
  void clearMinimumEquityCapital() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensureMinimumEquityCapital() => $_ensure(4);

  /// Maximum fraction of the total staked capital of that a new baker can
  /// have.
  @$pb.TagNumber(6)
  CapitalBound get capitalBound => $_getN(5);
  @$pb.TagNumber(6)
  set capitalBound(CapitalBound v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasCapitalBound() => $_has(5);
  @$pb.TagNumber(6)
  void clearCapitalBound() => clearField(6);
  @$pb.TagNumber(6)
  CapitalBound ensureCapitalBound() => $_ensure(5);

  /// The maximum leverage that a baker can have as a ratio of total stake
  /// to equity capital.
  @$pb.TagNumber(7)
  LeverageFactor get leverageBound => $_getN(6);
  @$pb.TagNumber(7)
  set leverageBound(LeverageFactor v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasLeverageBound() => $_has(6);
  @$pb.TagNumber(7)
  void clearLeverageBound() => clearField(7);
  @$pb.TagNumber(7)
  LeverageFactor ensureLeverageBound() => $_ensure(6);
}

/// The time parameters are introduced as of protocol version 4, and consist of
/// the reward period length and the mint rate per payday. These are coupled as
/// a change to either affects the overall rate of minting.
class TimeParametersCpv1 extends $pb.GeneratedMessage {
  factory TimeParametersCpv1({
    RewardPeriodLength? rewardPeriodLength,
    MintRate? mintPerPayday,
  }) {
    final $result = create();
    if (rewardPeriodLength != null) {
      $result.rewardPeriodLength = rewardPeriodLength;
    }
    if (mintPerPayday != null) {
      $result.mintPerPayday = mintPerPayday;
    }
    return $result;
  }
  TimeParametersCpv1._() : super();
  factory TimeParametersCpv1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TimeParametersCpv1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TimeParametersCpv1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<RewardPeriodLength>(1, _omitFieldNames ? '' : 'rewardPeriodLength', subBuilder: RewardPeriodLength.create)
    ..aOM<MintRate>(2, _omitFieldNames ? '' : 'mintPerPayday', subBuilder: MintRate.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TimeParametersCpv1 clone() => TimeParametersCpv1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TimeParametersCpv1 copyWith(void Function(TimeParametersCpv1) updates) => super.copyWith((message) => updates(message as TimeParametersCpv1)) as TimeParametersCpv1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TimeParametersCpv1 create() => TimeParametersCpv1._();
  TimeParametersCpv1 createEmptyInstance() => create();
  static $pb.PbList<TimeParametersCpv1> createRepeated() => $pb.PbList<TimeParametersCpv1>();
  @$core.pragma('dart2js:noInline')
  static TimeParametersCpv1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TimeParametersCpv1>(create);
  static TimeParametersCpv1? _defaultInstance;

  @$pb.TagNumber(1)
  RewardPeriodLength get rewardPeriodLength => $_getN(0);
  @$pb.TagNumber(1)
  set rewardPeriodLength(RewardPeriodLength v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRewardPeriodLength() => $_has(0);
  @$pb.TagNumber(1)
  void clearRewardPeriodLength() => clearField(1);
  @$pb.TagNumber(1)
  RewardPeriodLength ensureRewardPeriodLength() => $_ensure(0);

  @$pb.TagNumber(2)
  MintRate get mintPerPayday => $_getN(1);
  @$pb.TagNumber(2)
  set mintPerPayday(MintRate v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasMintPerPayday() => $_has(1);
  @$pb.TagNumber(2)
  void clearMintPerPayday() => clearField(2);
  @$pb.TagNumber(2)
  MintRate ensureMintPerPayday() => $_ensure(1);
}

/// Mint distribution payload as it looks in protocol version 4 and onward.
class MintDistributionCpv1 extends $pb.GeneratedMessage {
  factory MintDistributionCpv1({
    AmountFraction? bakingReward,
    AmountFraction? finalizationReward,
  }) {
    final $result = create();
    if (bakingReward != null) {
      $result.bakingReward = bakingReward;
    }
    if (finalizationReward != null) {
      $result.finalizationReward = finalizationReward;
    }
    return $result;
  }
  MintDistributionCpv1._() : super();
  factory MintDistributionCpv1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory MintDistributionCpv1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'MintDistributionCpv1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'bakingReward', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'finalizationReward', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  MintDistributionCpv1 clone() => MintDistributionCpv1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  MintDistributionCpv1 copyWith(void Function(MintDistributionCpv1) updates) => super.copyWith((message) => updates(message as MintDistributionCpv1)) as MintDistributionCpv1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static MintDistributionCpv1 create() => MintDistributionCpv1._();
  MintDistributionCpv1 createEmptyInstance() => create();
  static $pb.PbList<MintDistributionCpv1> createRepeated() => $pb.PbList<MintDistributionCpv1>();
  @$core.pragma('dart2js:noInline')
  static MintDistributionCpv1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<MintDistributionCpv1>(create);
  static MintDistributionCpv1? _defaultInstance;

  @$pb.TagNumber(1)
  AmountFraction get bakingReward => $_getN(0);
  @$pb.TagNumber(1)
  set bakingReward(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakingReward() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakingReward() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureBakingReward() => $_ensure(0);

  @$pb.TagNumber(2)
  AmountFraction get finalizationReward => $_getN(1);
  @$pb.TagNumber(2)
  set finalizationReward(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasFinalizationReward() => $_has(1);
  @$pb.TagNumber(2)
  void clearFinalizationReward() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureFinalizationReward() => $_ensure(1);
}

class ProtocolUpdate extends $pb.GeneratedMessage {
  factory ProtocolUpdate({
    $core.String? message,
    $core.String? specificationUrl,
    Sha256Hash? specificationHash,
    $core.List<$core.int>? specificationAuxiliaryData,
  }) {
    final $result = create();
    if (message != null) {
      $result.message = message;
    }
    if (specificationUrl != null) {
      $result.specificationUrl = specificationUrl;
    }
    if (specificationHash != null) {
      $result.specificationHash = specificationHash;
    }
    if (specificationAuxiliaryData != null) {
      $result.specificationAuxiliaryData = specificationAuxiliaryData;
    }
    return $result;
  }
  ProtocolUpdate._() : super();
  factory ProtocolUpdate.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ProtocolUpdate.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ProtocolUpdate', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'message', protoName: 'message_')
    ..aOS(2, _omitFieldNames ? '' : 'specificationUrl')
    ..aOM<Sha256Hash>(3, _omitFieldNames ? '' : 'specificationHash', protoName: 'specificationHash', subBuilder: Sha256Hash.create)
    ..a<$core.List<$core.int>>(4, _omitFieldNames ? '' : 'specificationAuxiliaryData', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ProtocolUpdate clone() => ProtocolUpdate()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ProtocolUpdate copyWith(void Function(ProtocolUpdate) updates) => super.copyWith((message) => updates(message as ProtocolUpdate)) as ProtocolUpdate;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ProtocolUpdate create() => ProtocolUpdate._();
  ProtocolUpdate createEmptyInstance() => create();
  static $pb.PbList<ProtocolUpdate> createRepeated() => $pb.PbList<ProtocolUpdate>();
  @$core.pragma('dart2js:noInline')
  static ProtocolUpdate getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ProtocolUpdate>(create);
  static ProtocolUpdate? _defaultInstance;

  /// A brief message about the update.
  @$pb.TagNumber(1)
  $core.String get message => $_getSZ(0);
  @$pb.TagNumber(1)
  set message($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasMessage() => $_has(0);
  @$pb.TagNumber(1)
  void clearMessage() => clearField(1);

  /// A URL of a document describing the update.
  @$pb.TagNumber(2)
  $core.String get specificationUrl => $_getSZ(1);
  @$pb.TagNumber(2)
  set specificationUrl($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasSpecificationUrl() => $_has(1);
  @$pb.TagNumber(2)
  void clearSpecificationUrl() => clearField(2);

  /// SHA256 hash of the specification document.
  @$pb.TagNumber(3)
  Sha256Hash get specificationHash => $_getN(2);
  @$pb.TagNumber(3)
  set specificationHash(Sha256Hash v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasSpecificationHash() => $_has(2);
  @$pb.TagNumber(3)
  void clearSpecificationHash() => clearField(3);
  @$pb.TagNumber(3)
  Sha256Hash ensureSpecificationHash() => $_ensure(2);

  /// Auxiliary data whose interpretation is defined by the new specification.
  @$pb.TagNumber(4)
  $core.List<$core.int> get specificationAuxiliaryData => $_getN(3);
  @$pb.TagNumber(4)
  set specificationAuxiliaryData($core.List<$core.int> v) { $_setBytes(3, v); }
  @$pb.TagNumber(4)
  $core.bool hasSpecificationAuxiliaryData() => $_has(3);
  @$pb.TagNumber(4)
  void clearSpecificationAuxiliaryData() => clearField(4);
}

/// The minting rate and the distribution of newly-minted CCD among bakers,
/// finalizers, and the foundation account. It must be the case that
/// baking_reward + finalization_reward <= 1. The remaining amount is the
/// platform development charge.
class MintDistributionCpv0 extends $pb.GeneratedMessage {
  factory MintDistributionCpv0({
    MintRate? mintPerSlot,
    AmountFraction? bakingReward,
    AmountFraction? finalizationReward,
  }) {
    final $result = create();
    if (mintPerSlot != null) {
      $result.mintPerSlot = mintPerSlot;
    }
    if (bakingReward != null) {
      $result.bakingReward = bakingReward;
    }
    if (finalizationReward != null) {
      $result.finalizationReward = finalizationReward;
    }
    return $result;
  }
  MintDistributionCpv0._() : super();
  factory MintDistributionCpv0.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory MintDistributionCpv0.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'MintDistributionCpv0', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<MintRate>(1, _omitFieldNames ? '' : 'mintPerSlot', subBuilder: MintRate.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'bakingReward', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(3, _omitFieldNames ? '' : 'finalizationReward', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  MintDistributionCpv0 clone() => MintDistributionCpv0()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  MintDistributionCpv0 copyWith(void Function(MintDistributionCpv0) updates) => super.copyWith((message) => updates(message as MintDistributionCpv0)) as MintDistributionCpv0;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static MintDistributionCpv0 create() => MintDistributionCpv0._();
  MintDistributionCpv0 createEmptyInstance() => create();
  static $pb.PbList<MintDistributionCpv0> createRepeated() => $pb.PbList<MintDistributionCpv0>();
  @$core.pragma('dart2js:noInline')
  static MintDistributionCpv0 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<MintDistributionCpv0>(create);
  static MintDistributionCpv0? _defaultInstance;

  /// Mint rate per slot.
  @$pb.TagNumber(1)
  MintRate get mintPerSlot => $_getN(0);
  @$pb.TagNumber(1)
  set mintPerSlot(MintRate v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasMintPerSlot() => $_has(0);
  @$pb.TagNumber(1)
  void clearMintPerSlot() => clearField(1);
  @$pb.TagNumber(1)
  MintRate ensureMintPerSlot() => $_ensure(0);

  /// The fraction of newly created CCD allocated to baker rewards.
  @$pb.TagNumber(2)
  AmountFraction get bakingReward => $_getN(1);
  @$pb.TagNumber(2)
  set bakingReward(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBakingReward() => $_has(1);
  @$pb.TagNumber(2)
  void clearBakingReward() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureBakingReward() => $_ensure(1);

  /// The fraction of newly created CCD allocated to finalization rewards.
  @$pb.TagNumber(3)
  AmountFraction get finalizationReward => $_getN(2);
  @$pb.TagNumber(3)
  set finalizationReward(AmountFraction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasFinalizationReward() => $_has(2);
  @$pb.TagNumber(3)
  void clearFinalizationReward() => clearField(3);
  @$pb.TagNumber(3)
  AmountFraction ensureFinalizationReward() => $_ensure(2);
}

/// Parameters determining the distribution of transaction fees.
class TransactionFeeDistribution extends $pb.GeneratedMessage {
  factory TransactionFeeDistribution({
    AmountFraction? baker,
    AmountFraction? gasAccount,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (gasAccount != null) {
      $result.gasAccount = gasAccount;
    }
    return $result;
  }
  TransactionFeeDistribution._() : super();
  factory TransactionFeeDistribution.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TransactionFeeDistribution.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TransactionFeeDistribution', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'baker', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'gasAccount', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TransactionFeeDistribution clone() => TransactionFeeDistribution()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TransactionFeeDistribution copyWith(void Function(TransactionFeeDistribution) updates) => super.copyWith((message) => updates(message as TransactionFeeDistribution)) as TransactionFeeDistribution;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TransactionFeeDistribution create() => TransactionFeeDistribution._();
  TransactionFeeDistribution createEmptyInstance() => create();
  static $pb.PbList<TransactionFeeDistribution> createRepeated() => $pb.PbList<TransactionFeeDistribution>();
  @$core.pragma('dart2js:noInline')
  static TransactionFeeDistribution getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TransactionFeeDistribution>(create);
  static TransactionFeeDistribution? _defaultInstance;

  /// The fraction allocated to the baker.
  @$pb.TagNumber(1)
  AmountFraction get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureBaker() => $_ensure(0);

  /// The fraction allocated to the GAS account.
  @$pb.TagNumber(2)
  AmountFraction get gasAccount => $_getN(1);
  @$pb.TagNumber(2)
  set gasAccount(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasGasAccount() => $_has(1);
  @$pb.TagNumber(2)
  void clearGasAccount() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureGasAccount() => $_ensure(1);
}

/// Distribution of gas rewards for chain parameters version 0 and 1.
class GasRewards extends $pb.GeneratedMessage {
  factory GasRewards({
    AmountFraction? baker,
    AmountFraction? finalizationProof,
    AmountFraction? accountCreation,
    AmountFraction? chainUpdate,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (finalizationProof != null) {
      $result.finalizationProof = finalizationProof;
    }
    if (accountCreation != null) {
      $result.accountCreation = accountCreation;
    }
    if (chainUpdate != null) {
      $result.chainUpdate = chainUpdate;
    }
    return $result;
  }
  GasRewards._() : super();
  factory GasRewards.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory GasRewards.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'GasRewards', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'baker', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(2, _omitFieldNames ? '' : 'finalizationProof', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(3, _omitFieldNames ? '' : 'accountCreation', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(4, _omitFieldNames ? '' : 'chainUpdate', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  GasRewards clone() => GasRewards()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  GasRewards copyWith(void Function(GasRewards) updates) => super.copyWith((message) => updates(message as GasRewards)) as GasRewards;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static GasRewards create() => GasRewards._();
  GasRewards createEmptyInstance() => create();
  static $pb.PbList<GasRewards> createRepeated() => $pb.PbList<GasRewards>();
  @$core.pragma('dart2js:noInline')
  static GasRewards getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<GasRewards>(create);
  static GasRewards? _defaultInstance;

  /// The fraction paid to the baker.
  @$pb.TagNumber(1)
  AmountFraction get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureBaker() => $_ensure(0);

  /// Fraction paid for including a finalization proof in a block.
  @$pb.TagNumber(2)
  AmountFraction get finalizationProof => $_getN(1);
  @$pb.TagNumber(2)
  set finalizationProof(AmountFraction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasFinalizationProof() => $_has(1);
  @$pb.TagNumber(2)
  void clearFinalizationProof() => clearField(2);
  @$pb.TagNumber(2)
  AmountFraction ensureFinalizationProof() => $_ensure(1);

  /// Fraction paid for including each account creation transaction in a block.
  @$pb.TagNumber(3)
  AmountFraction get accountCreation => $_getN(2);
  @$pb.TagNumber(3)
  set accountCreation(AmountFraction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAccountCreation() => $_has(2);
  @$pb.TagNumber(3)
  void clearAccountCreation() => clearField(3);
  @$pb.TagNumber(3)
  AmountFraction ensureAccountCreation() => $_ensure(2);

  /// Fraction paid for including an update transaction in a block.
  @$pb.TagNumber(4)
  AmountFraction get chainUpdate => $_getN(3);
  @$pb.TagNumber(4)
  set chainUpdate(AmountFraction v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasChainUpdate() => $_has(3);
  @$pb.TagNumber(4)
  void clearChainUpdate() => clearField(4);
  @$pb.TagNumber(4)
  AmountFraction ensureChainUpdate() => $_ensure(3);
}

/// Distribution of gas rewards for chain parameters version 2.
class GasRewardsCpv2 extends $pb.GeneratedMessage {
  factory GasRewardsCpv2({
    AmountFraction? baker,
    AmountFraction? accountCreation,
    AmountFraction? chainUpdate,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (accountCreation != null) {
      $result.accountCreation = accountCreation;
    }
    if (chainUpdate != null) {
      $result.chainUpdate = chainUpdate;
    }
    return $result;
  }
  GasRewardsCpv2._() : super();
  factory GasRewardsCpv2.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory GasRewardsCpv2.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'GasRewardsCpv2', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AmountFraction>(1, _omitFieldNames ? '' : 'baker', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(3, _omitFieldNames ? '' : 'accountCreation', subBuilder: AmountFraction.create)
    ..aOM<AmountFraction>(4, _omitFieldNames ? '' : 'chainUpdate', subBuilder: AmountFraction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  GasRewardsCpv2 clone() => GasRewardsCpv2()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  GasRewardsCpv2 copyWith(void Function(GasRewardsCpv2) updates) => super.copyWith((message) => updates(message as GasRewardsCpv2)) as GasRewardsCpv2;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static GasRewardsCpv2 create() => GasRewardsCpv2._();
  GasRewardsCpv2 createEmptyInstance() => create();
  static $pb.PbList<GasRewardsCpv2> createRepeated() => $pb.PbList<GasRewardsCpv2>();
  @$core.pragma('dart2js:noInline')
  static GasRewardsCpv2 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<GasRewardsCpv2>(create);
  static GasRewardsCpv2? _defaultInstance;

  /// The fraction paid to the baker.
  @$pb.TagNumber(1)
  AmountFraction get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(AmountFraction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  AmountFraction ensureBaker() => $_ensure(0);

  /// Fraction paid for including each account creation transaction in a block.
  @$pb.TagNumber(3)
  AmountFraction get accountCreation => $_getN(1);
  @$pb.TagNumber(3)
  set accountCreation(AmountFraction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAccountCreation() => $_has(1);
  @$pb.TagNumber(3)
  void clearAccountCreation() => clearField(3);
  @$pb.TagNumber(3)
  AmountFraction ensureAccountCreation() => $_ensure(1);

  /// Fraction paid for including an update transaction in a block.
  @$pb.TagNumber(4)
  AmountFraction get chainUpdate => $_getN(2);
  @$pb.TagNumber(4)
  set chainUpdate(AmountFraction v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasChainUpdate() => $_has(2);
  @$pb.TagNumber(4)
  void clearChainUpdate() => clearField(4);
  @$pb.TagNumber(4)
  AmountFraction ensureChainUpdate() => $_ensure(2);
}

/// Minimum stake needed to become a baker. This only applies to protocol version
/// 1-3.
class BakerStakeThreshold extends $pb.GeneratedMessage {
  factory BakerStakeThreshold({
    Amount? bakerStakeThreshold,
  }) {
    final $result = create();
    if (bakerStakeThreshold != null) {
      $result.bakerStakeThreshold = bakerStakeThreshold;
    }
    return $result;
  }
  BakerStakeThreshold._() : super();
  factory BakerStakeThreshold.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerStakeThreshold.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerStakeThreshold', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'bakerStakeThreshold', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerStakeThreshold clone() => BakerStakeThreshold()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerStakeThreshold copyWith(void Function(BakerStakeThreshold) updates) => super.copyWith((message) => updates(message as BakerStakeThreshold)) as BakerStakeThreshold;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerStakeThreshold create() => BakerStakeThreshold._();
  BakerStakeThreshold createEmptyInstance() => create();
  static $pb.PbList<BakerStakeThreshold> createRepeated() => $pb.PbList<BakerStakeThreshold>();
  @$core.pragma('dart2js:noInline')
  static BakerStakeThreshold getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerStakeThreshold>(create);
  static BakerStakeThreshold? _defaultInstance;

  /// Minimum threshold required for registering as a baker.
  @$pb.TagNumber(1)
  Amount get bakerStakeThreshold => $_getN(0);
  @$pb.TagNumber(1)
  set bakerStakeThreshold(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerStakeThreshold() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerStakeThreshold() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureBakerStakeThreshold() => $_ensure(0);
}

enum RootUpdate_UpdateType {
  rootKeysUpdate, 
  level1KeysUpdate, 
  level2KeysUpdateV0, 
  level2KeysUpdateV1, 
  notSet
}

/// Root updates are the highest kind of key updates. They can update every other set of keys,
/// even themselves. They can only be performed by Root level keys.
class RootUpdate extends $pb.GeneratedMessage {
  factory RootUpdate({
    HigherLevelKeys? rootKeysUpdate,
    HigherLevelKeys? level1KeysUpdate,
    AuthorizationsV0? level2KeysUpdateV0,
    AuthorizationsV1? level2KeysUpdateV1,
  }) {
    final $result = create();
    if (rootKeysUpdate != null) {
      $result.rootKeysUpdate = rootKeysUpdate;
    }
    if (level1KeysUpdate != null) {
      $result.level1KeysUpdate = level1KeysUpdate;
    }
    if (level2KeysUpdateV0 != null) {
      $result.level2KeysUpdateV0 = level2KeysUpdateV0;
    }
    if (level2KeysUpdateV1 != null) {
      $result.level2KeysUpdateV1 = level2KeysUpdateV1;
    }
    return $result;
  }
  RootUpdate._() : super();
  factory RootUpdate.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RootUpdate.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, RootUpdate_UpdateType> _RootUpdate_UpdateTypeByTag = {
    1 : RootUpdate_UpdateType.rootKeysUpdate,
    2 : RootUpdate_UpdateType.level1KeysUpdate,
    3 : RootUpdate_UpdateType.level2KeysUpdateV0,
    4 : RootUpdate_UpdateType.level2KeysUpdateV1,
    0 : RootUpdate_UpdateType.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RootUpdate', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4])
    ..aOM<HigherLevelKeys>(1, _omitFieldNames ? '' : 'rootKeysUpdate', subBuilder: HigherLevelKeys.create)
    ..aOM<HigherLevelKeys>(2, _omitFieldNames ? '' : 'level1KeysUpdate', protoName: 'level_1_keys_update', subBuilder: HigherLevelKeys.create)
    ..aOM<AuthorizationsV0>(3, _omitFieldNames ? '' : 'level2KeysUpdateV0', protoName: 'level_2_keys_update_v0', subBuilder: AuthorizationsV0.create)
    ..aOM<AuthorizationsV1>(4, _omitFieldNames ? '' : 'level2KeysUpdateV1', protoName: 'level_2_keys_update_v1', subBuilder: AuthorizationsV1.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RootUpdate clone() => RootUpdate()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RootUpdate copyWith(void Function(RootUpdate) updates) => super.copyWith((message) => updates(message as RootUpdate)) as RootUpdate;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RootUpdate create() => RootUpdate._();
  RootUpdate createEmptyInstance() => create();
  static $pb.PbList<RootUpdate> createRepeated() => $pb.PbList<RootUpdate>();
  @$core.pragma('dart2js:noInline')
  static RootUpdate getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RootUpdate>(create);
  static RootUpdate? _defaultInstance;

  RootUpdate_UpdateType whichUpdateType() => _RootUpdate_UpdateTypeByTag[$_whichOneof(0)]!;
  void clearUpdateType() => clearField($_whichOneof(0));

  /// The root keys were updated.
  @$pb.TagNumber(1)
  HigherLevelKeys get rootKeysUpdate => $_getN(0);
  @$pb.TagNumber(1)
  set rootKeysUpdate(HigherLevelKeys v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRootKeysUpdate() => $_has(0);
  @$pb.TagNumber(1)
  void clearRootKeysUpdate() => clearField(1);
  @$pb.TagNumber(1)
  HigherLevelKeys ensureRootKeysUpdate() => $_ensure(0);

  /// The level 1 keys were updated.
  @$pb.TagNumber(2)
  HigherLevelKeys get level1KeysUpdate => $_getN(1);
  @$pb.TagNumber(2)
  set level1KeysUpdate(HigherLevelKeys v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasLevel1KeysUpdate() => $_has(1);
  @$pb.TagNumber(2)
  void clearLevel1KeysUpdate() => clearField(2);
  @$pb.TagNumber(2)
  HigherLevelKeys ensureLevel1KeysUpdate() => $_ensure(1);

  /// The level 2 keys were updated.
  @$pb.TagNumber(3)
  AuthorizationsV0 get level2KeysUpdateV0 => $_getN(2);
  @$pb.TagNumber(3)
  set level2KeysUpdateV0(AuthorizationsV0 v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasLevel2KeysUpdateV0() => $_has(2);
  @$pb.TagNumber(3)
  void clearLevel2KeysUpdateV0() => clearField(3);
  @$pb.TagNumber(3)
  AuthorizationsV0 ensureLevel2KeysUpdateV0() => $_ensure(2);

  /// The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.
  @$pb.TagNumber(4)
  AuthorizationsV1 get level2KeysUpdateV1 => $_getN(3);
  @$pb.TagNumber(4)
  set level2KeysUpdateV1(AuthorizationsV1 v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasLevel2KeysUpdateV1() => $_has(3);
  @$pb.TagNumber(4)
  void clearLevel2KeysUpdateV1() => clearField(4);
  @$pb.TagNumber(4)
  AuthorizationsV1 ensureLevel2KeysUpdateV1() => $_ensure(3);
}

enum Level1Update_UpdateType {
  level1KeysUpdate, 
  level2KeysUpdateV0, 
  level2KeysUpdateV1, 
  notSet
}

/// Level 1 updates are the intermediate update kind.
/// They can update themselves or level 2 keys. They can only be performed by level 1 keys.
class Level1Update extends $pb.GeneratedMessage {
  factory Level1Update({
    HigherLevelKeys? level1KeysUpdate,
    AuthorizationsV0? level2KeysUpdateV0,
    AuthorizationsV1? level2KeysUpdateV1,
  }) {
    final $result = create();
    if (level1KeysUpdate != null) {
      $result.level1KeysUpdate = level1KeysUpdate;
    }
    if (level2KeysUpdateV0 != null) {
      $result.level2KeysUpdateV0 = level2KeysUpdateV0;
    }
    if (level2KeysUpdateV1 != null) {
      $result.level2KeysUpdateV1 = level2KeysUpdateV1;
    }
    return $result;
  }
  Level1Update._() : super();
  factory Level1Update.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Level1Update.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, Level1Update_UpdateType> _Level1Update_UpdateTypeByTag = {
    1 : Level1Update_UpdateType.level1KeysUpdate,
    2 : Level1Update_UpdateType.level2KeysUpdateV0,
    3 : Level1Update_UpdateType.level2KeysUpdateV1,
    0 : Level1Update_UpdateType.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Level1Update', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<HigherLevelKeys>(1, _omitFieldNames ? '' : 'level1KeysUpdate', protoName: 'level_1_keys_update', subBuilder: HigherLevelKeys.create)
    ..aOM<AuthorizationsV0>(2, _omitFieldNames ? '' : 'level2KeysUpdateV0', protoName: 'level_2_keys_update_v0', subBuilder: AuthorizationsV0.create)
    ..aOM<AuthorizationsV1>(3, _omitFieldNames ? '' : 'level2KeysUpdateV1', protoName: 'level_2_keys_update_v1', subBuilder: AuthorizationsV1.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Level1Update clone() => Level1Update()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Level1Update copyWith(void Function(Level1Update) updates) => super.copyWith((message) => updates(message as Level1Update)) as Level1Update;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Level1Update create() => Level1Update._();
  Level1Update createEmptyInstance() => create();
  static $pb.PbList<Level1Update> createRepeated() => $pb.PbList<Level1Update>();
  @$core.pragma('dart2js:noInline')
  static Level1Update getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Level1Update>(create);
  static Level1Update? _defaultInstance;

  Level1Update_UpdateType whichUpdateType() => _Level1Update_UpdateTypeByTag[$_whichOneof(0)]!;
  void clearUpdateType() => clearField($_whichOneof(0));

  /// The level 1 keys were updated.
  @$pb.TagNumber(1)
  HigherLevelKeys get level1KeysUpdate => $_getN(0);
  @$pb.TagNumber(1)
  set level1KeysUpdate(HigherLevelKeys v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasLevel1KeysUpdate() => $_has(0);
  @$pb.TagNumber(1)
  void clearLevel1KeysUpdate() => clearField(1);
  @$pb.TagNumber(1)
  HigherLevelKeys ensureLevel1KeysUpdate() => $_ensure(0);

  /// The level 2 keys were updated.
  @$pb.TagNumber(2)
  AuthorizationsV0 get level2KeysUpdateV0 => $_getN(1);
  @$pb.TagNumber(2)
  set level2KeysUpdateV0(AuthorizationsV0 v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasLevel2KeysUpdateV0() => $_has(1);
  @$pb.TagNumber(2)
  void clearLevel2KeysUpdateV0() => clearField(2);
  @$pb.TagNumber(2)
  AuthorizationsV0 ensureLevel2KeysUpdateV0() => $_ensure(1);

  /// The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.
  @$pb.TagNumber(3)
  AuthorizationsV1 get level2KeysUpdateV1 => $_getN(2);
  @$pb.TagNumber(3)
  set level2KeysUpdateV1(AuthorizationsV1 v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasLevel2KeysUpdateV1() => $_has(2);
  @$pb.TagNumber(3)
  void clearLevel2KeysUpdateV1() => clearField(3);
  @$pb.TagNumber(3)
  AuthorizationsV1 ensureLevel2KeysUpdateV1() => $_ensure(2);
}

enum UpdatePayload_Payload {
  protocolUpdate, 
  electionDifficultyUpdate, 
  euroPerEnergyUpdate, 
  microCcdPerEuroUpdate, 
  foundationAccountUpdate, 
  mintDistributionUpdate, 
  transactionFeeDistributionUpdate, 
  gasRewardsUpdate, 
  bakerStakeThresholdUpdate, 
  rootUpdate, 
  level1Update, 
  addAnonymityRevokerUpdate, 
  addIdentityProviderUpdate, 
  cooldownParametersCpv1Update, 
  poolParametersCpv1Update, 
  timeParametersCpv1Update, 
  mintDistributionCpv1Update, 
  gasRewardsCpv2Update, 
  timeoutParametersUpdate, 
  minBlockTimeUpdate, 
  blockEnergyLimitUpdate, 
  finalizationCommitteeParametersUpdate, 
  notSet
}

/// The payload of a chain update.
class UpdatePayload extends $pb.GeneratedMessage {
  factory UpdatePayload({
    ProtocolUpdate? protocolUpdate,
    ElectionDifficulty? electionDifficultyUpdate,
    ExchangeRate? euroPerEnergyUpdate,
    ExchangeRate? microCcdPerEuroUpdate,
    AccountAddress? foundationAccountUpdate,
    MintDistributionCpv0? mintDistributionUpdate,
    TransactionFeeDistribution? transactionFeeDistributionUpdate,
    GasRewards? gasRewardsUpdate,
    BakerStakeThreshold? bakerStakeThresholdUpdate,
    RootUpdate? rootUpdate,
    Level1Update? level1Update,
    ArInfo? addAnonymityRevokerUpdate,
    IpInfo? addIdentityProviderUpdate,
    CooldownParametersCpv1? cooldownParametersCpv1Update,
    PoolParametersCpv1? poolParametersCpv1Update,
    TimeParametersCpv1? timeParametersCpv1Update,
    MintDistributionCpv1? mintDistributionCpv1Update,
    GasRewardsCpv2? gasRewardsCpv2Update,
    TimeoutParameters? timeoutParametersUpdate,
    Duration? minBlockTimeUpdate,
    Energy? blockEnergyLimitUpdate,
    FinalizationCommitteeParameters? finalizationCommitteeParametersUpdate,
  }) {
    final $result = create();
    if (protocolUpdate != null) {
      $result.protocolUpdate = protocolUpdate;
    }
    if (electionDifficultyUpdate != null) {
      $result.electionDifficultyUpdate = electionDifficultyUpdate;
    }
    if (euroPerEnergyUpdate != null) {
      $result.euroPerEnergyUpdate = euroPerEnergyUpdate;
    }
    if (microCcdPerEuroUpdate != null) {
      $result.microCcdPerEuroUpdate = microCcdPerEuroUpdate;
    }
    if (foundationAccountUpdate != null) {
      $result.foundationAccountUpdate = foundationAccountUpdate;
    }
    if (mintDistributionUpdate != null) {
      $result.mintDistributionUpdate = mintDistributionUpdate;
    }
    if (transactionFeeDistributionUpdate != null) {
      $result.transactionFeeDistributionUpdate = transactionFeeDistributionUpdate;
    }
    if (gasRewardsUpdate != null) {
      $result.gasRewardsUpdate = gasRewardsUpdate;
    }
    if (bakerStakeThresholdUpdate != null) {
      $result.bakerStakeThresholdUpdate = bakerStakeThresholdUpdate;
    }
    if (rootUpdate != null) {
      $result.rootUpdate = rootUpdate;
    }
    if (level1Update != null) {
      $result.level1Update = level1Update;
    }
    if (addAnonymityRevokerUpdate != null) {
      $result.addAnonymityRevokerUpdate = addAnonymityRevokerUpdate;
    }
    if (addIdentityProviderUpdate != null) {
      $result.addIdentityProviderUpdate = addIdentityProviderUpdate;
    }
    if (cooldownParametersCpv1Update != null) {
      $result.cooldownParametersCpv1Update = cooldownParametersCpv1Update;
    }
    if (poolParametersCpv1Update != null) {
      $result.poolParametersCpv1Update = poolParametersCpv1Update;
    }
    if (timeParametersCpv1Update != null) {
      $result.timeParametersCpv1Update = timeParametersCpv1Update;
    }
    if (mintDistributionCpv1Update != null) {
      $result.mintDistributionCpv1Update = mintDistributionCpv1Update;
    }
    if (gasRewardsCpv2Update != null) {
      $result.gasRewardsCpv2Update = gasRewardsCpv2Update;
    }
    if (timeoutParametersUpdate != null) {
      $result.timeoutParametersUpdate = timeoutParametersUpdate;
    }
    if (minBlockTimeUpdate != null) {
      $result.minBlockTimeUpdate = minBlockTimeUpdate;
    }
    if (blockEnergyLimitUpdate != null) {
      $result.blockEnergyLimitUpdate = blockEnergyLimitUpdate;
    }
    if (finalizationCommitteeParametersUpdate != null) {
      $result.finalizationCommitteeParametersUpdate = finalizationCommitteeParametersUpdate;
    }
    return $result;
  }
  UpdatePayload._() : super();
  factory UpdatePayload.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdatePayload.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, UpdatePayload_Payload> _UpdatePayload_PayloadByTag = {
    1 : UpdatePayload_Payload.protocolUpdate,
    2 : UpdatePayload_Payload.electionDifficultyUpdate,
    3 : UpdatePayload_Payload.euroPerEnergyUpdate,
    4 : UpdatePayload_Payload.microCcdPerEuroUpdate,
    5 : UpdatePayload_Payload.foundationAccountUpdate,
    6 : UpdatePayload_Payload.mintDistributionUpdate,
    7 : UpdatePayload_Payload.transactionFeeDistributionUpdate,
    8 : UpdatePayload_Payload.gasRewardsUpdate,
    9 : UpdatePayload_Payload.bakerStakeThresholdUpdate,
    10 : UpdatePayload_Payload.rootUpdate,
    11 : UpdatePayload_Payload.level1Update,
    12 : UpdatePayload_Payload.addAnonymityRevokerUpdate,
    13 : UpdatePayload_Payload.addIdentityProviderUpdate,
    14 : UpdatePayload_Payload.cooldownParametersCpv1Update,
    15 : UpdatePayload_Payload.poolParametersCpv1Update,
    16 : UpdatePayload_Payload.timeParametersCpv1Update,
    17 : UpdatePayload_Payload.mintDistributionCpv1Update,
    18 : UpdatePayload_Payload.gasRewardsCpv2Update,
    19 : UpdatePayload_Payload.timeoutParametersUpdate,
    20 : UpdatePayload_Payload.minBlockTimeUpdate,
    21 : UpdatePayload_Payload.blockEnergyLimitUpdate,
    22 : UpdatePayload_Payload.finalizationCommitteeParametersUpdate,
    0 : UpdatePayload_Payload.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdatePayload', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])
    ..aOM<ProtocolUpdate>(1, _omitFieldNames ? '' : 'protocolUpdate', subBuilder: ProtocolUpdate.create)
    ..aOM<ElectionDifficulty>(2, _omitFieldNames ? '' : 'electionDifficultyUpdate', subBuilder: ElectionDifficulty.create)
    ..aOM<ExchangeRate>(3, _omitFieldNames ? '' : 'euroPerEnergyUpdate', subBuilder: ExchangeRate.create)
    ..aOM<ExchangeRate>(4, _omitFieldNames ? '' : 'microCcdPerEuroUpdate', subBuilder: ExchangeRate.create)
    ..aOM<AccountAddress>(5, _omitFieldNames ? '' : 'foundationAccountUpdate', subBuilder: AccountAddress.create)
    ..aOM<MintDistributionCpv0>(6, _omitFieldNames ? '' : 'mintDistributionUpdate', subBuilder: MintDistributionCpv0.create)
    ..aOM<TransactionFeeDistribution>(7, _omitFieldNames ? '' : 'transactionFeeDistributionUpdate', subBuilder: TransactionFeeDistribution.create)
    ..aOM<GasRewards>(8, _omitFieldNames ? '' : 'gasRewardsUpdate', subBuilder: GasRewards.create)
    ..aOM<BakerStakeThreshold>(9, _omitFieldNames ? '' : 'bakerStakeThresholdUpdate', subBuilder: BakerStakeThreshold.create)
    ..aOM<RootUpdate>(10, _omitFieldNames ? '' : 'rootUpdate', subBuilder: RootUpdate.create)
    ..aOM<Level1Update>(11, _omitFieldNames ? '' : 'level1Update', protoName: 'level_1_update', subBuilder: Level1Update.create)
    ..aOM<ArInfo>(12, _omitFieldNames ? '' : 'addAnonymityRevokerUpdate', subBuilder: ArInfo.create)
    ..aOM<IpInfo>(13, _omitFieldNames ? '' : 'addIdentityProviderUpdate', subBuilder: IpInfo.create)
    ..aOM<CooldownParametersCpv1>(14, _omitFieldNames ? '' : 'cooldownParametersCpv1Update', protoName: 'cooldown_parameters_cpv_1_update', subBuilder: CooldownParametersCpv1.create)
    ..aOM<PoolParametersCpv1>(15, _omitFieldNames ? '' : 'poolParametersCpv1Update', protoName: 'pool_parameters_cpv_1_update', subBuilder: PoolParametersCpv1.create)
    ..aOM<TimeParametersCpv1>(16, _omitFieldNames ? '' : 'timeParametersCpv1Update', protoName: 'time_parameters_cpv_1_update', subBuilder: TimeParametersCpv1.create)
    ..aOM<MintDistributionCpv1>(17, _omitFieldNames ? '' : 'mintDistributionCpv1Update', protoName: 'mint_distribution_cpv_1_update', subBuilder: MintDistributionCpv1.create)
    ..aOM<GasRewardsCpv2>(18, _omitFieldNames ? '' : 'gasRewardsCpv2Update', protoName: 'gas_rewards_cpv_2_update', subBuilder: GasRewardsCpv2.create)
    ..aOM<TimeoutParameters>(19, _omitFieldNames ? '' : 'timeoutParametersUpdate', subBuilder: TimeoutParameters.create)
    ..aOM<Duration>(20, _omitFieldNames ? '' : 'minBlockTimeUpdate', subBuilder: Duration.create)
    ..aOM<Energy>(21, _omitFieldNames ? '' : 'blockEnergyLimitUpdate', subBuilder: Energy.create)
    ..aOM<FinalizationCommitteeParameters>(22, _omitFieldNames ? '' : 'finalizationCommitteeParametersUpdate', subBuilder: FinalizationCommitteeParameters.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdatePayload clone() => UpdatePayload()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdatePayload copyWith(void Function(UpdatePayload) updates) => super.copyWith((message) => updates(message as UpdatePayload)) as UpdatePayload;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdatePayload create() => UpdatePayload._();
  UpdatePayload createEmptyInstance() => create();
  static $pb.PbList<UpdatePayload> createRepeated() => $pb.PbList<UpdatePayload>();
  @$core.pragma('dart2js:noInline')
  static UpdatePayload getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdatePayload>(create);
  static UpdatePayload? _defaultInstance;

  UpdatePayload_Payload whichPayload() => _UpdatePayload_PayloadByTag[$_whichOneof(0)]!;
  void clearPayload() => clearField($_whichOneof(0));

  /// The protocol version was updated.
  @$pb.TagNumber(1)
  ProtocolUpdate get protocolUpdate => $_getN(0);
  @$pb.TagNumber(1)
  set protocolUpdate(ProtocolUpdate v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasProtocolUpdate() => $_has(0);
  @$pb.TagNumber(1)
  void clearProtocolUpdate() => clearField(1);
  @$pb.TagNumber(1)
  ProtocolUpdate ensureProtocolUpdate() => $_ensure(0);

  /// The election difficulty was updated.
  @$pb.TagNumber(2)
  ElectionDifficulty get electionDifficultyUpdate => $_getN(1);
  @$pb.TagNumber(2)
  set electionDifficultyUpdate(ElectionDifficulty v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasElectionDifficultyUpdate() => $_has(1);
  @$pb.TagNumber(2)
  void clearElectionDifficultyUpdate() => clearField(2);
  @$pb.TagNumber(2)
  ElectionDifficulty ensureElectionDifficultyUpdate() => $_ensure(1);

  /// The euro per energy exchange rate was updated.
  @$pb.TagNumber(3)
  ExchangeRate get euroPerEnergyUpdate => $_getN(2);
  @$pb.TagNumber(3)
  set euroPerEnergyUpdate(ExchangeRate v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEuroPerEnergyUpdate() => $_has(2);
  @$pb.TagNumber(3)
  void clearEuroPerEnergyUpdate() => clearField(3);
  @$pb.TagNumber(3)
  ExchangeRate ensureEuroPerEnergyUpdate() => $_ensure(2);

  /// The microCCD per euro exchange rate was updated.
  @$pb.TagNumber(4)
  ExchangeRate get microCcdPerEuroUpdate => $_getN(3);
  @$pb.TagNumber(4)
  set microCcdPerEuroUpdate(ExchangeRate v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasMicroCcdPerEuroUpdate() => $_has(3);
  @$pb.TagNumber(4)
  void clearMicroCcdPerEuroUpdate() => clearField(4);
  @$pb.TagNumber(4)
  ExchangeRate ensureMicroCcdPerEuroUpdate() => $_ensure(3);

  /// The foundation account address was updated.
  @$pb.TagNumber(5)
  AccountAddress get foundationAccountUpdate => $_getN(4);
  @$pb.TagNumber(5)
  set foundationAccountUpdate(AccountAddress v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasFoundationAccountUpdate() => $_has(4);
  @$pb.TagNumber(5)
  void clearFoundationAccountUpdate() => clearField(5);
  @$pb.TagNumber(5)
  AccountAddress ensureFoundationAccountUpdate() => $_ensure(4);

  /// The mint distribution was updated.
  @$pb.TagNumber(6)
  MintDistributionCpv0 get mintDistributionUpdate => $_getN(5);
  @$pb.TagNumber(6)
  set mintDistributionUpdate(MintDistributionCpv0 v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasMintDistributionUpdate() => $_has(5);
  @$pb.TagNumber(6)
  void clearMintDistributionUpdate() => clearField(6);
  @$pb.TagNumber(6)
  MintDistributionCpv0 ensureMintDistributionUpdate() => $_ensure(5);

  /// The transaction fee distribtuion was updated.
  @$pb.TagNumber(7)
  TransactionFeeDistribution get transactionFeeDistributionUpdate => $_getN(6);
  @$pb.TagNumber(7)
  set transactionFeeDistributionUpdate(TransactionFeeDistribution v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasTransactionFeeDistributionUpdate() => $_has(6);
  @$pb.TagNumber(7)
  void clearTransactionFeeDistributionUpdate() => clearField(7);
  @$pb.TagNumber(7)
  TransactionFeeDistribution ensureTransactionFeeDistributionUpdate() => $_ensure(6);

  /// The gas rewards were updated.
  @$pb.TagNumber(8)
  GasRewards get gasRewardsUpdate => $_getN(7);
  @$pb.TagNumber(8)
  set gasRewardsUpdate(GasRewards v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasGasRewardsUpdate() => $_has(7);
  @$pb.TagNumber(8)
  void clearGasRewardsUpdate() => clearField(8);
  @$pb.TagNumber(8)
  GasRewards ensureGasRewardsUpdate() => $_ensure(7);

  /// The minimum amount of CCD needed to be come a baker was updated.
  @$pb.TagNumber(9)
  BakerStakeThreshold get bakerStakeThresholdUpdate => $_getN(8);
  @$pb.TagNumber(9)
  set bakerStakeThresholdUpdate(BakerStakeThreshold v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasBakerStakeThresholdUpdate() => $_has(8);
  @$pb.TagNumber(9)
  void clearBakerStakeThresholdUpdate() => clearField(9);
  @$pb.TagNumber(9)
  BakerStakeThreshold ensureBakerStakeThresholdUpdate() => $_ensure(8);

  /// The root keys were updated.
  @$pb.TagNumber(10)
  RootUpdate get rootUpdate => $_getN(9);
  @$pb.TagNumber(10)
  set rootUpdate(RootUpdate v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasRootUpdate() => $_has(9);
  @$pb.TagNumber(10)
  void clearRootUpdate() => clearField(10);
  @$pb.TagNumber(10)
  RootUpdate ensureRootUpdate() => $_ensure(9);

  /// The level 1 keys were updated.
  @$pb.TagNumber(11)
  Level1Update get level1Update => $_getN(10);
  @$pb.TagNumber(11)
  set level1Update(Level1Update v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasLevel1Update() => $_has(10);
  @$pb.TagNumber(11)
  void clearLevel1Update() => clearField(11);
  @$pb.TagNumber(11)
  Level1Update ensureLevel1Update() => $_ensure(10);

  /// An anonymity revoker was added.
  @$pb.TagNumber(12)
  ArInfo get addAnonymityRevokerUpdate => $_getN(11);
  @$pb.TagNumber(12)
  set addAnonymityRevokerUpdate(ArInfo v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasAddAnonymityRevokerUpdate() => $_has(11);
  @$pb.TagNumber(12)
  void clearAddAnonymityRevokerUpdate() => clearField(12);
  @$pb.TagNumber(12)
  ArInfo ensureAddAnonymityRevokerUpdate() => $_ensure(11);

  /// An identity provider was added.
  @$pb.TagNumber(13)
  IpInfo get addIdentityProviderUpdate => $_getN(12);
  @$pb.TagNumber(13)
  set addIdentityProviderUpdate(IpInfo v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasAddIdentityProviderUpdate() => $_has(12);
  @$pb.TagNumber(13)
  void clearAddIdentityProviderUpdate() => clearField(13);
  @$pb.TagNumber(13)
  IpInfo ensureAddIdentityProviderUpdate() => $_ensure(12);

  /// The cooldown parameters were updated.
  @$pb.TagNumber(14)
  CooldownParametersCpv1 get cooldownParametersCpv1Update => $_getN(13);
  @$pb.TagNumber(14)
  set cooldownParametersCpv1Update(CooldownParametersCpv1 v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasCooldownParametersCpv1Update() => $_has(13);
  @$pb.TagNumber(14)
  void clearCooldownParametersCpv1Update() => clearField(14);
  @$pb.TagNumber(14)
  CooldownParametersCpv1 ensureCooldownParametersCpv1Update() => $_ensure(13);

  /// The pool parameters were updated.
  @$pb.TagNumber(15)
  PoolParametersCpv1 get poolParametersCpv1Update => $_getN(14);
  @$pb.TagNumber(15)
  set poolParametersCpv1Update(PoolParametersCpv1 v) { setField(15, v); }
  @$pb.TagNumber(15)
  $core.bool hasPoolParametersCpv1Update() => $_has(14);
  @$pb.TagNumber(15)
  void clearPoolParametersCpv1Update() => clearField(15);
  @$pb.TagNumber(15)
  PoolParametersCpv1 ensurePoolParametersCpv1Update() => $_ensure(14);

  /// The time parameters were updated.
  @$pb.TagNumber(16)
  TimeParametersCpv1 get timeParametersCpv1Update => $_getN(15);
  @$pb.TagNumber(16)
  set timeParametersCpv1Update(TimeParametersCpv1 v) { setField(16, v); }
  @$pb.TagNumber(16)
  $core.bool hasTimeParametersCpv1Update() => $_has(15);
  @$pb.TagNumber(16)
  void clearTimeParametersCpv1Update() => clearField(16);
  @$pb.TagNumber(16)
  TimeParametersCpv1 ensureTimeParametersCpv1Update() => $_ensure(15);

  /// The mint distribution was updated.
  @$pb.TagNumber(17)
  MintDistributionCpv1 get mintDistributionCpv1Update => $_getN(16);
  @$pb.TagNumber(17)
  set mintDistributionCpv1Update(MintDistributionCpv1 v) { setField(17, v); }
  @$pb.TagNumber(17)
  $core.bool hasMintDistributionCpv1Update() => $_has(16);
  @$pb.TagNumber(17)
  void clearMintDistributionCpv1Update() => clearField(17);
  @$pb.TagNumber(17)
  MintDistributionCpv1 ensureMintDistributionCpv1Update() => $_ensure(16);

  /// The gas rewards were updated (chain parameters version 2).
  @$pb.TagNumber(18)
  GasRewardsCpv2 get gasRewardsCpv2Update => $_getN(17);
  @$pb.TagNumber(18)
  set gasRewardsCpv2Update(GasRewardsCpv2 v) { setField(18, v); }
  @$pb.TagNumber(18)
  $core.bool hasGasRewardsCpv2Update() => $_has(17);
  @$pb.TagNumber(18)
  void clearGasRewardsCpv2Update() => clearField(18);
  @$pb.TagNumber(18)
  GasRewardsCpv2 ensureGasRewardsCpv2Update() => $_ensure(17);

  /// The consensus timeouts were updated (chain parameters version 2).
  @$pb.TagNumber(19)
  TimeoutParameters get timeoutParametersUpdate => $_getN(18);
  @$pb.TagNumber(19)
  set timeoutParametersUpdate(TimeoutParameters v) { setField(19, v); }
  @$pb.TagNumber(19)
  $core.bool hasTimeoutParametersUpdate() => $_has(18);
  @$pb.TagNumber(19)
  void clearTimeoutParametersUpdate() => clearField(19);
  @$pb.TagNumber(19)
  TimeoutParameters ensureTimeoutParametersUpdate() => $_ensure(18);

  /// The minimum time between blocks was updated (chain parameters version 2).
  @$pb.TagNumber(20)
  Duration get minBlockTimeUpdate => $_getN(19);
  @$pb.TagNumber(20)
  set minBlockTimeUpdate(Duration v) { setField(20, v); }
  @$pb.TagNumber(20)
  $core.bool hasMinBlockTimeUpdate() => $_has(19);
  @$pb.TagNumber(20)
  void clearMinBlockTimeUpdate() => clearField(20);
  @$pb.TagNumber(20)
  Duration ensureMinBlockTimeUpdate() => $_ensure(19);

  /// The block energy limit was updated (chain parameters version 2).
  @$pb.TagNumber(21)
  Energy get blockEnergyLimitUpdate => $_getN(20);
  @$pb.TagNumber(21)
  set blockEnergyLimitUpdate(Energy v) { setField(21, v); }
  @$pb.TagNumber(21)
  $core.bool hasBlockEnergyLimitUpdate() => $_has(20);
  @$pb.TagNumber(21)
  void clearBlockEnergyLimitUpdate() => clearField(21);
  @$pb.TagNumber(21)
  Energy ensureBlockEnergyLimitUpdate() => $_ensure(20);

  /// Finalization committee parameters (chain parameters version 2).
  @$pb.TagNumber(22)
  FinalizationCommitteeParameters get finalizationCommitteeParametersUpdate => $_getN(21);
  @$pb.TagNumber(22)
  set finalizationCommitteeParametersUpdate(FinalizationCommitteeParameters v) { setField(22, v); }
  @$pb.TagNumber(22)
  $core.bool hasFinalizationCommitteeParametersUpdate() => $_has(21);
  @$pb.TagNumber(22)
  void clearFinalizationCommitteeParametersUpdate() => clearField(22);
  @$pb.TagNumber(22)
  FinalizationCommitteeParameters ensureFinalizationCommitteeParametersUpdate() => $_ensure(21);
}

/// Details about an account transaction.
class AccountTransactionDetails extends $pb.GeneratedMessage {
  factory AccountTransactionDetails({
    Amount? cost,
    AccountAddress? sender,
    AccountTransactionEffects? effects,
  }) {
    final $result = create();
    if (cost != null) {
      $result.cost = cost;
    }
    if (sender != null) {
      $result.sender = sender;
    }
    if (effects != null) {
      $result.effects = effects;
    }
    return $result;
  }
  AccountTransactionDetails._() : super();
  factory AccountTransactionDetails.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionDetails.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionDetails', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'cost', subBuilder: Amount.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'sender', subBuilder: AccountAddress.create)
    ..aOM<AccountTransactionEffects>(3, _omitFieldNames ? '' : 'effects', subBuilder: AccountTransactionEffects.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionDetails clone() => AccountTransactionDetails()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionDetails copyWith(void Function(AccountTransactionDetails) updates) => super.copyWith((message) => updates(message as AccountTransactionDetails)) as AccountTransactionDetails;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionDetails create() => AccountTransactionDetails._();
  AccountTransactionDetails createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionDetails> createRepeated() => $pb.PbList<AccountTransactionDetails>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionDetails getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionDetails>(create);
  static AccountTransactionDetails? _defaultInstance;

  /// The cost of the transaction. Paid by the sender.
  @$pb.TagNumber(1)
  Amount get cost => $_getN(0);
  @$pb.TagNumber(1)
  set cost(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasCost() => $_has(0);
  @$pb.TagNumber(1)
  void clearCost() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureCost() => $_ensure(0);

  /// The sender of the transaction.
  @$pb.TagNumber(2)
  AccountAddress get sender => $_getN(1);
  @$pb.TagNumber(2)
  set sender(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasSender() => $_has(1);
  @$pb.TagNumber(2)
  void clearSender() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureSender() => $_ensure(1);

  /// The effects of the transaction.
  @$pb.TagNumber(3)
  AccountTransactionEffects get effects => $_getN(2);
  @$pb.TagNumber(3)
  set effects(AccountTransactionEffects v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEffects() => $_has(2);
  @$pb.TagNumber(3)
  void clearEffects() => clearField(3);
  @$pb.TagNumber(3)
  AccountTransactionEffects ensureEffects() => $_ensure(2);
}

/// Details of an account creation. These transactions are free, and we only
/// ever get a response for them if the account is created, hence no failure
/// cases.
class AccountCreationDetails extends $pb.GeneratedMessage {
  factory AccountCreationDetails({
    CredentialType? credentialType,
    AccountAddress? address,
    CredentialRegistrationId? regId,
  }) {
    final $result = create();
    if (credentialType != null) {
      $result.credentialType = credentialType;
    }
    if (address != null) {
      $result.address = address;
    }
    if (regId != null) {
      $result.regId = regId;
    }
    return $result;
  }
  AccountCreationDetails._() : super();
  factory AccountCreationDetails.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountCreationDetails.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountCreationDetails', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..e<CredentialType>(1, _omitFieldNames ? '' : 'credentialType', $pb.PbFieldType.OE, defaultOrMaker: CredentialType.CREDENTIAL_TYPE_INITIAL, valueOf: CredentialType.valueOf, enumValues: CredentialType.values)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'address', subBuilder: AccountAddress.create)
    ..aOM<CredentialRegistrationId>(3, _omitFieldNames ? '' : 'regId', subBuilder: CredentialRegistrationId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountCreationDetails clone() => AccountCreationDetails()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountCreationDetails copyWith(void Function(AccountCreationDetails) updates) => super.copyWith((message) => updates(message as AccountCreationDetails)) as AccountCreationDetails;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountCreationDetails create() => AccountCreationDetails._();
  AccountCreationDetails createEmptyInstance() => create();
  static $pb.PbList<AccountCreationDetails> createRepeated() => $pb.PbList<AccountCreationDetails>();
  @$core.pragma('dart2js:noInline')
  static AccountCreationDetails getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountCreationDetails>(create);
  static AccountCreationDetails? _defaultInstance;

  /// Whether this is an initial or normal account.
  @$pb.TagNumber(1)
  CredentialType get credentialType => $_getN(0);
  @$pb.TagNumber(1)
  set credentialType(CredentialType v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasCredentialType() => $_has(0);
  @$pb.TagNumber(1)
  void clearCredentialType() => clearField(1);

  /// Address of the newly created account.
  @$pb.TagNumber(2)
  AccountAddress get address => $_getN(1);
  @$pb.TagNumber(2)
  set address(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearAddress() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureAddress() => $_ensure(1);

  /// Credential registration ID of the first credential.
  @$pb.TagNumber(3)
  CredentialRegistrationId get regId => $_getN(2);
  @$pb.TagNumber(3)
  set regId(CredentialRegistrationId v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasRegId() => $_has(2);
  @$pb.TagNumber(3)
  void clearRegId() => clearField(3);
  @$pb.TagNumber(3)
  CredentialRegistrationId ensureRegId() => $_ensure(2);
}

/// Transaction time specified as seconds since unix epoch.
class TransactionTime extends $pb.GeneratedMessage {
  factory TransactionTime({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  TransactionTime._() : super();
  factory TransactionTime.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TransactionTime.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TransactionTime', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TransactionTime clone() => TransactionTime()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TransactionTime copyWith(void Function(TransactionTime) updates) => super.copyWith((message) => updates(message as TransactionTime)) as TransactionTime;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TransactionTime create() => TransactionTime._();
  TransactionTime createEmptyInstance() => create();
  static $pb.PbList<TransactionTime> createRepeated() => $pb.PbList<TransactionTime>();
  @$core.pragma('dart2js:noInline')
  static TransactionTime getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TransactionTime>(create);
  static TransactionTime? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Details of an update instruction. These are free, and we only ever get a
/// response for them if the update is successfully enqueued, hence no failure
/// cases.
class UpdateDetails extends $pb.GeneratedMessage {
  factory UpdateDetails({
    TransactionTime? effectiveTime,
    UpdatePayload? payload,
  }) {
    final $result = create();
    if (effectiveTime != null) {
      $result.effectiveTime = effectiveTime;
    }
    if (payload != null) {
      $result.payload = payload;
    }
    return $result;
  }
  UpdateDetails._() : super();
  factory UpdateDetails.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateDetails.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateDetails', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<TransactionTime>(1, _omitFieldNames ? '' : 'effectiveTime', subBuilder: TransactionTime.create)
    ..aOM<UpdatePayload>(2, _omitFieldNames ? '' : 'payload', subBuilder: UpdatePayload.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateDetails clone() => UpdateDetails()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateDetails copyWith(void Function(UpdateDetails) updates) => super.copyWith((message) => updates(message as UpdateDetails)) as UpdateDetails;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateDetails create() => UpdateDetails._();
  UpdateDetails createEmptyInstance() => create();
  static $pb.PbList<UpdateDetails> createRepeated() => $pb.PbList<UpdateDetails>();
  @$core.pragma('dart2js:noInline')
  static UpdateDetails getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateDetails>(create);
  static UpdateDetails? _defaultInstance;

  /// The time at which the update will be effective.
  @$pb.TagNumber(1)
  TransactionTime get effectiveTime => $_getN(0);
  @$pb.TagNumber(1)
  set effectiveTime(TransactionTime v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasEffectiveTime() => $_has(0);
  @$pb.TagNumber(1)
  void clearEffectiveTime() => clearField(1);
  @$pb.TagNumber(1)
  TransactionTime ensureEffectiveTime() => $_ensure(0);

  /// The paylaod for the update.
  @$pb.TagNumber(2)
  UpdatePayload get payload => $_getN(1);
  @$pb.TagNumber(2)
  set payload(UpdatePayload v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasPayload() => $_has(1);
  @$pb.TagNumber(2)
  void clearPayload() => clearField(2);
  @$pb.TagNumber(2)
  UpdatePayload ensurePayload() => $_ensure(1);
}

class BlockItemSummary_TransactionIndex extends $pb.GeneratedMessage {
  factory BlockItemSummary_TransactionIndex({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  BlockItemSummary_TransactionIndex._() : super();
  factory BlockItemSummary_TransactionIndex.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockItemSummary_TransactionIndex.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockItemSummary.TransactionIndex', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockItemSummary_TransactionIndex clone() => BlockItemSummary_TransactionIndex()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockItemSummary_TransactionIndex copyWith(void Function(BlockItemSummary_TransactionIndex) updates) => super.copyWith((message) => updates(message as BlockItemSummary_TransactionIndex)) as BlockItemSummary_TransactionIndex;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockItemSummary_TransactionIndex create() => BlockItemSummary_TransactionIndex._();
  BlockItemSummary_TransactionIndex createEmptyInstance() => create();
  static $pb.PbList<BlockItemSummary_TransactionIndex> createRepeated() => $pb.PbList<BlockItemSummary_TransactionIndex>();
  @$core.pragma('dart2js:noInline')
  static BlockItemSummary_TransactionIndex getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockItemSummary_TransactionIndex>(create);
  static BlockItemSummary_TransactionIndex? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

enum BlockItemSummary_Details {
  accountTransaction, 
  accountCreation, 
  update, 
  notSet
}

/// Summary of the outcome of a block item in structured form.
/// The summary determines which transaction type it was.
class BlockItemSummary extends $pb.GeneratedMessage {
  factory BlockItemSummary({
    BlockItemSummary_TransactionIndex? index,
    Energy? energyCost,
    TransactionHash? hash,
    AccountTransactionDetails? accountTransaction,
    AccountCreationDetails? accountCreation,
    UpdateDetails? update,
  }) {
    final $result = create();
    if (index != null) {
      $result.index = index;
    }
    if (energyCost != null) {
      $result.energyCost = energyCost;
    }
    if (hash != null) {
      $result.hash = hash;
    }
    if (accountTransaction != null) {
      $result.accountTransaction = accountTransaction;
    }
    if (accountCreation != null) {
      $result.accountCreation = accountCreation;
    }
    if (update != null) {
      $result.update = update;
    }
    return $result;
  }
  BlockItemSummary._() : super();
  factory BlockItemSummary.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockItemSummary.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BlockItemSummary_Details> _BlockItemSummary_DetailsByTag = {
    4 : BlockItemSummary_Details.accountTransaction,
    5 : BlockItemSummary_Details.accountCreation,
    6 : BlockItemSummary_Details.update,
    0 : BlockItemSummary_Details.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockItemSummary', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [4, 5, 6])
    ..aOM<BlockItemSummary_TransactionIndex>(1, _omitFieldNames ? '' : 'index', subBuilder: BlockItemSummary_TransactionIndex.create)
    ..aOM<Energy>(2, _omitFieldNames ? '' : 'energyCost', subBuilder: Energy.create)
    ..aOM<TransactionHash>(3, _omitFieldNames ? '' : 'hash', subBuilder: TransactionHash.create)
    ..aOM<AccountTransactionDetails>(4, _omitFieldNames ? '' : 'accountTransaction', subBuilder: AccountTransactionDetails.create)
    ..aOM<AccountCreationDetails>(5, _omitFieldNames ? '' : 'accountCreation', subBuilder: AccountCreationDetails.create)
    ..aOM<UpdateDetails>(6, _omitFieldNames ? '' : 'update', subBuilder: UpdateDetails.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockItemSummary clone() => BlockItemSummary()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockItemSummary copyWith(void Function(BlockItemSummary) updates) => super.copyWith((message) => updates(message as BlockItemSummary)) as BlockItemSummary;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockItemSummary create() => BlockItemSummary._();
  BlockItemSummary createEmptyInstance() => create();
  static $pb.PbList<BlockItemSummary> createRepeated() => $pb.PbList<BlockItemSummary>();
  @$core.pragma('dart2js:noInline')
  static BlockItemSummary getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockItemSummary>(create);
  static BlockItemSummary? _defaultInstance;

  BlockItemSummary_Details whichDetails() => _BlockItemSummary_DetailsByTag[$_whichOneof(0)]!;
  void clearDetails() => clearField($_whichOneof(0));

  /// Index of the transaction in the block where it is included.
  @$pb.TagNumber(1)
  BlockItemSummary_TransactionIndex get index => $_getN(0);
  @$pb.TagNumber(1)
  set index(BlockItemSummary_TransactionIndex v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasIndex() => $_has(0);
  @$pb.TagNumber(1)
  void clearIndex() => clearField(1);
  @$pb.TagNumber(1)
  BlockItemSummary_TransactionIndex ensureIndex() => $_ensure(0);

  /// The amount of NRG the transaction cost.
  @$pb.TagNumber(2)
  Energy get energyCost => $_getN(1);
  @$pb.TagNumber(2)
  set energyCost(Energy v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEnergyCost() => $_has(1);
  @$pb.TagNumber(2)
  void clearEnergyCost() => clearField(2);
  @$pb.TagNumber(2)
  Energy ensureEnergyCost() => $_ensure(1);

  /// Hash of the transaction.
  @$pb.TagNumber(3)
  TransactionHash get hash => $_getN(2);
  @$pb.TagNumber(3)
  set hash(TransactionHash v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasHash() => $_has(2);
  @$pb.TagNumber(3)
  void clearHash() => clearField(3);
  @$pb.TagNumber(3)
  TransactionHash ensureHash() => $_ensure(2);

  /// Details about an account transaction.
  @$pb.TagNumber(4)
  AccountTransactionDetails get accountTransaction => $_getN(3);
  @$pb.TagNumber(4)
  set accountTransaction(AccountTransactionDetails v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasAccountTransaction() => $_has(3);
  @$pb.TagNumber(4)
  void clearAccountTransaction() => clearField(4);
  @$pb.TagNumber(4)
  AccountTransactionDetails ensureAccountTransaction() => $_ensure(3);

  /// Details about an account creation.
  @$pb.TagNumber(5)
  AccountCreationDetails get accountCreation => $_getN(4);
  @$pb.TagNumber(5)
  set accountCreation(AccountCreationDetails v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasAccountCreation() => $_has(4);
  @$pb.TagNumber(5)
  void clearAccountCreation() => clearField(5);
  @$pb.TagNumber(5)
  AccountCreationDetails ensureAccountCreation() => $_ensure(4);

  /// Details about a chain update.
  @$pb.TagNumber(6)
  UpdateDetails get update => $_getN(5);
  @$pb.TagNumber(6)
  set update(UpdateDetails v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasUpdate() => $_has(5);
  @$pb.TagNumber(6)
  void clearUpdate() => clearField(6);
  @$pb.TagNumber(6)
  UpdateDetails ensureUpdate() => $_ensure(5);
}

/// The number of chain restarts via a protocol update. An effected
/// protocol update instruction might not change the protocol version
/// specified in the previous field, but it always increments the genesis
/// index.
class GenesisIndex extends $pb.GeneratedMessage {
  factory GenesisIndex({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  GenesisIndex._() : super();
  factory GenesisIndex.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory GenesisIndex.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'GenesisIndex', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  GenesisIndex clone() => GenesisIndex()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  GenesisIndex copyWith(void Function(GenesisIndex) updates) => super.copyWith((message) => updates(message as GenesisIndex)) as GenesisIndex;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static GenesisIndex create() => GenesisIndex._();
  GenesisIndex createEmptyInstance() => create();
  static $pb.PbList<GenesisIndex> createRepeated() => $pb.PbList<GenesisIndex>();
  @$core.pragma('dart2js:noInline')
  static GenesisIndex getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<GenesisIndex>(create);
  static GenesisIndex? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The response for GetConsensusInfo.
class ConsensusInfo extends $pb.GeneratedMessage {
  factory ConsensusInfo({
    BlockHash? bestBlock,
    BlockHash? genesisBlock,
    Timestamp? genesisTime,
    Duration? slotDuration,
    Duration? epochDuration,
    BlockHash? lastFinalizedBlock,
    AbsoluteBlockHeight? bestBlockHeight,
    AbsoluteBlockHeight? lastFinalizedBlockHeight,
    $core.int? blocksReceivedCount,
    Timestamp? blockLastReceivedTime,
    $core.double? blockReceiveLatencyEma,
    $core.double? blockReceiveLatencyEmsd,
    $core.double? blockReceivePeriodEma,
    $core.double? blockReceivePeriodEmsd,
    $core.int? blocksVerifiedCount,
    Timestamp? blockLastArrivedTime,
    $core.double? blockArriveLatencyEma,
    $core.double? blockArriveLatencyEmsd,
    $core.double? blockArrivePeriodEma,
    $core.double? blockArrivePeriodEmsd,
    $core.double? transactionsPerBlockEma,
    $core.double? transactionsPerBlockEmsd,
    $core.int? finalizationCount,
    Timestamp? lastFinalizedTime,
    $core.double? finalizationPeriodEma,
    $core.double? finalizationPeriodEmsd,
    ProtocolVersion? protocolVersion,
    GenesisIndex? genesisIndex,
    BlockHash? currentEraGenesisBlock,
    Timestamp? currentEraGenesisTime,
    Duration? currentTimeoutDuration,
    Round? currentRound,
    Epoch? currentEpoch,
    Timestamp? triggerBlockTime,
  }) {
    final $result = create();
    if (bestBlock != null) {
      $result.bestBlock = bestBlock;
    }
    if (genesisBlock != null) {
      $result.genesisBlock = genesisBlock;
    }
    if (genesisTime != null) {
      $result.genesisTime = genesisTime;
    }
    if (slotDuration != null) {
      $result.slotDuration = slotDuration;
    }
    if (epochDuration != null) {
      $result.epochDuration = epochDuration;
    }
    if (lastFinalizedBlock != null) {
      $result.lastFinalizedBlock = lastFinalizedBlock;
    }
    if (bestBlockHeight != null) {
      $result.bestBlockHeight = bestBlockHeight;
    }
    if (lastFinalizedBlockHeight != null) {
      $result.lastFinalizedBlockHeight = lastFinalizedBlockHeight;
    }
    if (blocksReceivedCount != null) {
      $result.blocksReceivedCount = blocksReceivedCount;
    }
    if (blockLastReceivedTime != null) {
      $result.blockLastReceivedTime = blockLastReceivedTime;
    }
    if (blockReceiveLatencyEma != null) {
      $result.blockReceiveLatencyEma = blockReceiveLatencyEma;
    }
    if (blockReceiveLatencyEmsd != null) {
      $result.blockReceiveLatencyEmsd = blockReceiveLatencyEmsd;
    }
    if (blockReceivePeriodEma != null) {
      $result.blockReceivePeriodEma = blockReceivePeriodEma;
    }
    if (blockReceivePeriodEmsd != null) {
      $result.blockReceivePeriodEmsd = blockReceivePeriodEmsd;
    }
    if (blocksVerifiedCount != null) {
      $result.blocksVerifiedCount = blocksVerifiedCount;
    }
    if (blockLastArrivedTime != null) {
      $result.blockLastArrivedTime = blockLastArrivedTime;
    }
    if (blockArriveLatencyEma != null) {
      $result.blockArriveLatencyEma = blockArriveLatencyEma;
    }
    if (blockArriveLatencyEmsd != null) {
      $result.blockArriveLatencyEmsd = blockArriveLatencyEmsd;
    }
    if (blockArrivePeriodEma != null) {
      $result.blockArrivePeriodEma = blockArrivePeriodEma;
    }
    if (blockArrivePeriodEmsd != null) {
      $result.blockArrivePeriodEmsd = blockArrivePeriodEmsd;
    }
    if (transactionsPerBlockEma != null) {
      $result.transactionsPerBlockEma = transactionsPerBlockEma;
    }
    if (transactionsPerBlockEmsd != null) {
      $result.transactionsPerBlockEmsd = transactionsPerBlockEmsd;
    }
    if (finalizationCount != null) {
      $result.finalizationCount = finalizationCount;
    }
    if (lastFinalizedTime != null) {
      $result.lastFinalizedTime = lastFinalizedTime;
    }
    if (finalizationPeriodEma != null) {
      $result.finalizationPeriodEma = finalizationPeriodEma;
    }
    if (finalizationPeriodEmsd != null) {
      $result.finalizationPeriodEmsd = finalizationPeriodEmsd;
    }
    if (protocolVersion != null) {
      $result.protocolVersion = protocolVersion;
    }
    if (genesisIndex != null) {
      $result.genesisIndex = genesisIndex;
    }
    if (currentEraGenesisBlock != null) {
      $result.currentEraGenesisBlock = currentEraGenesisBlock;
    }
    if (currentEraGenesisTime != null) {
      $result.currentEraGenesisTime = currentEraGenesisTime;
    }
    if (currentTimeoutDuration != null) {
      $result.currentTimeoutDuration = currentTimeoutDuration;
    }
    if (currentRound != null) {
      $result.currentRound = currentRound;
    }
    if (currentEpoch != null) {
      $result.currentEpoch = currentEpoch;
    }
    if (triggerBlockTime != null) {
      $result.triggerBlockTime = triggerBlockTime;
    }
    return $result;
  }
  ConsensusInfo._() : super();
  factory ConsensusInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ConsensusInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ConsensusInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'bestBlock', subBuilder: BlockHash.create)
    ..aOM<BlockHash>(2, _omitFieldNames ? '' : 'genesisBlock', subBuilder: BlockHash.create)
    ..aOM<Timestamp>(3, _omitFieldNames ? '' : 'genesisTime', subBuilder: Timestamp.create)
    ..aOM<Duration>(4, _omitFieldNames ? '' : 'slotDuration', subBuilder: Duration.create)
    ..aOM<Duration>(5, _omitFieldNames ? '' : 'epochDuration', subBuilder: Duration.create)
    ..aOM<BlockHash>(6, _omitFieldNames ? '' : 'lastFinalizedBlock', subBuilder: BlockHash.create)
    ..aOM<AbsoluteBlockHeight>(7, _omitFieldNames ? '' : 'bestBlockHeight', subBuilder: AbsoluteBlockHeight.create)
    ..aOM<AbsoluteBlockHeight>(8, _omitFieldNames ? '' : 'lastFinalizedBlockHeight', subBuilder: AbsoluteBlockHeight.create)
    ..a<$core.int>(9, _omitFieldNames ? '' : 'blocksReceivedCount', $pb.PbFieldType.OU3)
    ..aOM<Timestamp>(10, _omitFieldNames ? '' : 'blockLastReceivedTime', subBuilder: Timestamp.create)
    ..a<$core.double>(11, _omitFieldNames ? '' : 'blockReceiveLatencyEma', $pb.PbFieldType.OD)
    ..a<$core.double>(12, _omitFieldNames ? '' : 'blockReceiveLatencyEmsd', $pb.PbFieldType.OD)
    ..a<$core.double>(13, _omitFieldNames ? '' : 'blockReceivePeriodEma', $pb.PbFieldType.OD)
    ..a<$core.double>(14, _omitFieldNames ? '' : 'blockReceivePeriodEmsd', $pb.PbFieldType.OD)
    ..a<$core.int>(15, _omitFieldNames ? '' : 'blocksVerifiedCount', $pb.PbFieldType.OU3)
    ..aOM<Timestamp>(16, _omitFieldNames ? '' : 'blockLastArrivedTime', subBuilder: Timestamp.create)
    ..a<$core.double>(17, _omitFieldNames ? '' : 'blockArriveLatencyEma', $pb.PbFieldType.OD)
    ..a<$core.double>(18, _omitFieldNames ? '' : 'blockArriveLatencyEmsd', $pb.PbFieldType.OD)
    ..a<$core.double>(19, _omitFieldNames ? '' : 'blockArrivePeriodEma', $pb.PbFieldType.OD)
    ..a<$core.double>(20, _omitFieldNames ? '' : 'blockArrivePeriodEmsd', $pb.PbFieldType.OD)
    ..a<$core.double>(21, _omitFieldNames ? '' : 'transactionsPerBlockEma', $pb.PbFieldType.OD)
    ..a<$core.double>(22, _omitFieldNames ? '' : 'transactionsPerBlockEmsd', $pb.PbFieldType.OD)
    ..a<$core.int>(23, _omitFieldNames ? '' : 'finalizationCount', $pb.PbFieldType.OU3)
    ..aOM<Timestamp>(24, _omitFieldNames ? '' : 'lastFinalizedTime', subBuilder: Timestamp.create)
    ..a<$core.double>(25, _omitFieldNames ? '' : 'finalizationPeriodEma', $pb.PbFieldType.OD)
    ..a<$core.double>(26, _omitFieldNames ? '' : 'finalizationPeriodEmsd', $pb.PbFieldType.OD)
    ..e<ProtocolVersion>(27, _omitFieldNames ? '' : 'protocolVersion', $pb.PbFieldType.OE, defaultOrMaker: ProtocolVersion.PROTOCOL_VERSION_1, valueOf: ProtocolVersion.valueOf, enumValues: ProtocolVersion.values)
    ..aOM<GenesisIndex>(28, _omitFieldNames ? '' : 'genesisIndex', subBuilder: GenesisIndex.create)
    ..aOM<BlockHash>(29, _omitFieldNames ? '' : 'currentEraGenesisBlock', subBuilder: BlockHash.create)
    ..aOM<Timestamp>(30, _omitFieldNames ? '' : 'currentEraGenesisTime', subBuilder: Timestamp.create)
    ..aOM<Duration>(31, _omitFieldNames ? '' : 'currentTimeoutDuration', subBuilder: Duration.create)
    ..aOM<Round>(32, _omitFieldNames ? '' : 'currentRound', subBuilder: Round.create)
    ..aOM<Epoch>(33, _omitFieldNames ? '' : 'currentEpoch', subBuilder: Epoch.create)
    ..aOM<Timestamp>(34, _omitFieldNames ? '' : 'triggerBlockTime', subBuilder: Timestamp.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ConsensusInfo clone() => ConsensusInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ConsensusInfo copyWith(void Function(ConsensusInfo) updates) => super.copyWith((message) => updates(message as ConsensusInfo)) as ConsensusInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ConsensusInfo create() => ConsensusInfo._();
  ConsensusInfo createEmptyInstance() => create();
  static $pb.PbList<ConsensusInfo> createRepeated() => $pb.PbList<ConsensusInfo>();
  @$core.pragma('dart2js:noInline')
  static ConsensusInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ConsensusInfo>(create);
  static ConsensusInfo? _defaultInstance;

  /// Hash of the current best block.
  @$pb.TagNumber(1)
  BlockHash get bestBlock => $_getN(0);
  @$pb.TagNumber(1)
  set bestBlock(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBestBlock() => $_has(0);
  @$pb.TagNumber(1)
  void clearBestBlock() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureBestBlock() => $_ensure(0);

  /// Hash of the (original) genesis block.
  @$pb.TagNumber(2)
  BlockHash get genesisBlock => $_getN(1);
  @$pb.TagNumber(2)
  set genesisBlock(BlockHash v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasGenesisBlock() => $_has(1);
  @$pb.TagNumber(2)
  void clearGenesisBlock() => clearField(2);
  @$pb.TagNumber(2)
  BlockHash ensureGenesisBlock() => $_ensure(1);

  /// Time of the (original) genesis block.
  @$pb.TagNumber(3)
  Timestamp get genesisTime => $_getN(2);
  @$pb.TagNumber(3)
  set genesisTime(Timestamp v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasGenesisTime() => $_has(2);
  @$pb.TagNumber(3)
  void clearGenesisTime() => clearField(3);
  @$pb.TagNumber(3)
  Timestamp ensureGenesisTime() => $_ensure(2);

  /// (Current) slot duration in milliseconds. Present only in protocol versions 1-5.
  @$pb.TagNumber(4)
  Duration get slotDuration => $_getN(3);
  @$pb.TagNumber(4)
  set slotDuration(Duration v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasSlotDuration() => $_has(3);
  @$pb.TagNumber(4)
  void clearSlotDuration() => clearField(4);
  @$pb.TagNumber(4)
  Duration ensureSlotDuration() => $_ensure(3);

  /// (Current) epoch duration in milliseconds.
  @$pb.TagNumber(5)
  Duration get epochDuration => $_getN(4);
  @$pb.TagNumber(5)
  set epochDuration(Duration v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasEpochDuration() => $_has(4);
  @$pb.TagNumber(5)
  void clearEpochDuration() => clearField(5);
  @$pb.TagNumber(5)
  Duration ensureEpochDuration() => $_ensure(4);

  /// Hash of the last finalized block.
  @$pb.TagNumber(6)
  BlockHash get lastFinalizedBlock => $_getN(5);
  @$pb.TagNumber(6)
  set lastFinalizedBlock(BlockHash v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasLastFinalizedBlock() => $_has(5);
  @$pb.TagNumber(6)
  void clearLastFinalizedBlock() => clearField(6);
  @$pb.TagNumber(6)
  BlockHash ensureLastFinalizedBlock() => $_ensure(5);

  /// Absolute height of the best block.
  @$pb.TagNumber(7)
  AbsoluteBlockHeight get bestBlockHeight => $_getN(6);
  @$pb.TagNumber(7)
  set bestBlockHeight(AbsoluteBlockHeight v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasBestBlockHeight() => $_has(6);
  @$pb.TagNumber(7)
  void clearBestBlockHeight() => clearField(7);
  @$pb.TagNumber(7)
  AbsoluteBlockHeight ensureBestBlockHeight() => $_ensure(6);

  /// Absolute height of the last finalized block.
  @$pb.TagNumber(8)
  AbsoluteBlockHeight get lastFinalizedBlockHeight => $_getN(7);
  @$pb.TagNumber(8)
  set lastFinalizedBlockHeight(AbsoluteBlockHeight v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasLastFinalizedBlockHeight() => $_has(7);
  @$pb.TagNumber(8)
  void clearLastFinalizedBlockHeight() => clearField(8);
  @$pb.TagNumber(8)
  AbsoluteBlockHeight ensureLastFinalizedBlockHeight() => $_ensure(7);

  /// Total number of blocks received.
  @$pb.TagNumber(9)
  $core.int get blocksReceivedCount => $_getIZ(8);
  @$pb.TagNumber(9)
  set blocksReceivedCount($core.int v) { $_setUnsignedInt32(8, v); }
  @$pb.TagNumber(9)
  $core.bool hasBlocksReceivedCount() => $_has(8);
  @$pb.TagNumber(9)
  void clearBlocksReceivedCount() => clearField(9);

  /// The last time a block was received.
  @$pb.TagNumber(10)
  Timestamp get blockLastReceivedTime => $_getN(9);
  @$pb.TagNumber(10)
  set blockLastReceivedTime(Timestamp v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasBlockLastReceivedTime() => $_has(9);
  @$pb.TagNumber(10)
  void clearBlockLastReceivedTime() => clearField(10);
  @$pb.TagNumber(10)
  Timestamp ensureBlockLastReceivedTime() => $_ensure(9);

  /// Exponential moving average latency between a block's slot time and received time.
  @$pb.TagNumber(11)
  $core.double get blockReceiveLatencyEma => $_getN(10);
  @$pb.TagNumber(11)
  set blockReceiveLatencyEma($core.double v) { $_setDouble(10, v); }
  @$pb.TagNumber(11)
  $core.bool hasBlockReceiveLatencyEma() => $_has(10);
  @$pb.TagNumber(11)
  void clearBlockReceiveLatencyEma() => clearField(11);

  /// Standard deviation of exponential moving average latency between a block's slot time and received time.
  @$pb.TagNumber(12)
  $core.double get blockReceiveLatencyEmsd => $_getN(11);
  @$pb.TagNumber(12)
  set blockReceiveLatencyEmsd($core.double v) { $_setDouble(11, v); }
  @$pb.TagNumber(12)
  $core.bool hasBlockReceiveLatencyEmsd() => $_has(11);
  @$pb.TagNumber(12)
  void clearBlockReceiveLatencyEmsd() => clearField(12);

  /// Exponential moving average time between receiving blocks.
  @$pb.TagNumber(13)
  $core.double get blockReceivePeriodEma => $_getN(12);
  @$pb.TagNumber(13)
  set blockReceivePeriodEma($core.double v) { $_setDouble(12, v); }
  @$pb.TagNumber(13)
  $core.bool hasBlockReceivePeriodEma() => $_has(12);
  @$pb.TagNumber(13)
  void clearBlockReceivePeriodEma() => clearField(13);

  /// Standard deviation of exponential moving average time between receiving blocks.
  @$pb.TagNumber(14)
  $core.double get blockReceivePeriodEmsd => $_getN(13);
  @$pb.TagNumber(14)
  set blockReceivePeriodEmsd($core.double v) { $_setDouble(13, v); }
  @$pb.TagNumber(14)
  $core.bool hasBlockReceivePeriodEmsd() => $_has(13);
  @$pb.TagNumber(14)
  void clearBlockReceivePeriodEmsd() => clearField(14);

  /// Total number of blocks received and verified.
  @$pb.TagNumber(15)
  $core.int get blocksVerifiedCount => $_getIZ(14);
  @$pb.TagNumber(15)
  set blocksVerifiedCount($core.int v) { $_setUnsignedInt32(14, v); }
  @$pb.TagNumber(15)
  $core.bool hasBlocksVerifiedCount() => $_has(14);
  @$pb.TagNumber(15)
  void clearBlocksVerifiedCount() => clearField(15);

  /// The last time a block was verified (added to the tree).
  @$pb.TagNumber(16)
  Timestamp get blockLastArrivedTime => $_getN(15);
  @$pb.TagNumber(16)
  set blockLastArrivedTime(Timestamp v) { setField(16, v); }
  @$pb.TagNumber(16)
  $core.bool hasBlockLastArrivedTime() => $_has(15);
  @$pb.TagNumber(16)
  void clearBlockLastArrivedTime() => clearField(16);
  @$pb.TagNumber(16)
  Timestamp ensureBlockLastArrivedTime() => $_ensure(15);

  /// Exponential moving average latency between a block's slot time and its arrival.
  @$pb.TagNumber(17)
  $core.double get blockArriveLatencyEma => $_getN(16);
  @$pb.TagNumber(17)
  set blockArriveLatencyEma($core.double v) { $_setDouble(16, v); }
  @$pb.TagNumber(17)
  $core.bool hasBlockArriveLatencyEma() => $_has(16);
  @$pb.TagNumber(17)
  void clearBlockArriveLatencyEma() => clearField(17);

  /// Standard deviation of exponential moving average latency between a block's slot time and its arrival.
  @$pb.TagNumber(18)
  $core.double get blockArriveLatencyEmsd => $_getN(17);
  @$pb.TagNumber(18)
  set blockArriveLatencyEmsd($core.double v) { $_setDouble(17, v); }
  @$pb.TagNumber(18)
  $core.bool hasBlockArriveLatencyEmsd() => $_has(17);
  @$pb.TagNumber(18)
  void clearBlockArriveLatencyEmsd() => clearField(18);

  /// Exponential moving average time between block arrivals.
  @$pb.TagNumber(19)
  $core.double get blockArrivePeriodEma => $_getN(18);
  @$pb.TagNumber(19)
  set blockArrivePeriodEma($core.double v) { $_setDouble(18, v); }
  @$pb.TagNumber(19)
  $core.bool hasBlockArrivePeriodEma() => $_has(18);
  @$pb.TagNumber(19)
  void clearBlockArrivePeriodEma() => clearField(19);

  /// Standard deviation of exponential moving average time between block arrivals.
  @$pb.TagNumber(20)
  $core.double get blockArrivePeriodEmsd => $_getN(19);
  @$pb.TagNumber(20)
  set blockArrivePeriodEmsd($core.double v) { $_setDouble(19, v); }
  @$pb.TagNumber(20)
  $core.bool hasBlockArrivePeriodEmsd() => $_has(19);
  @$pb.TagNumber(20)
  void clearBlockArrivePeriodEmsd() => clearField(20);

  /// Exponential moving average number of transactions per block.
  @$pb.TagNumber(21)
  $core.double get transactionsPerBlockEma => $_getN(20);
  @$pb.TagNumber(21)
  set transactionsPerBlockEma($core.double v) { $_setDouble(20, v); }
  @$pb.TagNumber(21)
  $core.bool hasTransactionsPerBlockEma() => $_has(20);
  @$pb.TagNumber(21)
  void clearTransactionsPerBlockEma() => clearField(21);

  /// Standard deviation of exponential moving average number of transactions per block.
  @$pb.TagNumber(22)
  $core.double get transactionsPerBlockEmsd => $_getN(21);
  @$pb.TagNumber(22)
  set transactionsPerBlockEmsd($core.double v) { $_setDouble(21, v); }
  @$pb.TagNumber(22)
  $core.bool hasTransactionsPerBlockEmsd() => $_has(21);
  @$pb.TagNumber(22)
  void clearTransactionsPerBlockEmsd() => clearField(22);

  /// Number of finalizations.
  @$pb.TagNumber(23)
  $core.int get finalizationCount => $_getIZ(22);
  @$pb.TagNumber(23)
  set finalizationCount($core.int v) { $_setUnsignedInt32(22, v); }
  @$pb.TagNumber(23)
  $core.bool hasFinalizationCount() => $_has(22);
  @$pb.TagNumber(23)
  void clearFinalizationCount() => clearField(23);

  /// Time of last verified finalization.
  @$pb.TagNumber(24)
  Timestamp get lastFinalizedTime => $_getN(23);
  @$pb.TagNumber(24)
  set lastFinalizedTime(Timestamp v) { setField(24, v); }
  @$pb.TagNumber(24)
  $core.bool hasLastFinalizedTime() => $_has(23);
  @$pb.TagNumber(24)
  void clearLastFinalizedTime() => clearField(24);
  @$pb.TagNumber(24)
  Timestamp ensureLastFinalizedTime() => $_ensure(23);

  /// Exponential moving average time between finalizations.
  @$pb.TagNumber(25)
  $core.double get finalizationPeriodEma => $_getN(24);
  @$pb.TagNumber(25)
  set finalizationPeriodEma($core.double v) { $_setDouble(24, v); }
  @$pb.TagNumber(25)
  $core.bool hasFinalizationPeriodEma() => $_has(24);
  @$pb.TagNumber(25)
  void clearFinalizationPeriodEma() => clearField(25);

  /// Standard deviation of exponential moving average time between finalizations.
  @$pb.TagNumber(26)
  $core.double get finalizationPeriodEmsd => $_getN(25);
  @$pb.TagNumber(26)
  set finalizationPeriodEmsd($core.double v) { $_setDouble(25, v); }
  @$pb.TagNumber(26)
  $core.bool hasFinalizationPeriodEmsd() => $_has(25);
  @$pb.TagNumber(26)
  void clearFinalizationPeriodEmsd() => clearField(26);

  /// Currently active protocol version.
  @$pb.TagNumber(27)
  ProtocolVersion get protocolVersion => $_getN(26);
  @$pb.TagNumber(27)
  set protocolVersion(ProtocolVersion v) { setField(27, v); }
  @$pb.TagNumber(27)
  $core.bool hasProtocolVersion() => $_has(26);
  @$pb.TagNumber(27)
  void clearProtocolVersion() => clearField(27);

  /// The number of chain restarts via a protocol update. A completed
  /// protocol update instruction might not change the protocol version
  /// specified in the previous field, but it always increments the genesis
  /// index.
  @$pb.TagNumber(28)
  GenesisIndex get genesisIndex => $_getN(27);
  @$pb.TagNumber(28)
  set genesisIndex(GenesisIndex v) { setField(28, v); }
  @$pb.TagNumber(28)
  $core.bool hasGenesisIndex() => $_has(27);
  @$pb.TagNumber(28)
  void clearGenesisIndex() => clearField(28);
  @$pb.TagNumber(28)
  GenesisIndex ensureGenesisIndex() => $_ensure(27);

  /// Block hash of the genesis block of current era, i.e., since the last protocol update.
  /// Initially this is equal to 'genesis_block'.
  @$pb.TagNumber(29)
  BlockHash get currentEraGenesisBlock => $_getN(28);
  @$pb.TagNumber(29)
  set currentEraGenesisBlock(BlockHash v) { setField(29, v); }
  @$pb.TagNumber(29)
  $core.bool hasCurrentEraGenesisBlock() => $_has(28);
  @$pb.TagNumber(29)
  void clearCurrentEraGenesisBlock() => clearField(29);
  @$pb.TagNumber(29)
  BlockHash ensureCurrentEraGenesisBlock() => $_ensure(28);

  /// Time when the current era started.
  @$pb.TagNumber(30)
  Timestamp get currentEraGenesisTime => $_getN(29);
  @$pb.TagNumber(30)
  set currentEraGenesisTime(Timestamp v) { setField(30, v); }
  @$pb.TagNumber(30)
  $core.bool hasCurrentEraGenesisTime() => $_has(29);
  @$pb.TagNumber(30)
  void clearCurrentEraGenesisTime() => clearField(30);
  @$pb.TagNumber(30)
  Timestamp ensureCurrentEraGenesisTime() => $_ensure(29);

  /// The current duration to wait before a round times out. Present from protocol version 6.
  @$pb.TagNumber(31)
  Duration get currentTimeoutDuration => $_getN(30);
  @$pb.TagNumber(31)
  set currentTimeoutDuration(Duration v) { setField(31, v); }
  @$pb.TagNumber(31)
  $core.bool hasCurrentTimeoutDuration() => $_has(30);
  @$pb.TagNumber(31)
  void clearCurrentTimeoutDuration() => clearField(31);
  @$pb.TagNumber(31)
  Duration ensureCurrentTimeoutDuration() => $_ensure(30);

  /// The current round. Present from protocol version 6.
  @$pb.TagNumber(32)
  Round get currentRound => $_getN(31);
  @$pb.TagNumber(32)
  set currentRound(Round v) { setField(32, v); }
  @$pb.TagNumber(32)
  $core.bool hasCurrentRound() => $_has(31);
  @$pb.TagNumber(32)
  void clearCurrentRound() => clearField(32);
  @$pb.TagNumber(32)
  Round ensureCurrentRound() => $_ensure(31);

  /// The current epoch. Present from protocol version 6.
  @$pb.TagNumber(33)
  Epoch get currentEpoch => $_getN(32);
  @$pb.TagNumber(33)
  set currentEpoch(Epoch v) { setField(33, v); }
  @$pb.TagNumber(33)
  $core.bool hasCurrentEpoch() => $_has(32);
  @$pb.TagNumber(33)
  void clearCurrentEpoch() => clearField(33);
  @$pb.TagNumber(33)
  Epoch ensureCurrentEpoch() => $_ensure(32);

  /// The first block in the epoch with timestamp at least this is considered to be the trigger block
  /// for the epoch transition. Present from protocol version 6.
  @$pb.TagNumber(34)
  Timestamp get triggerBlockTime => $_getN(33);
  @$pb.TagNumber(34)
  set triggerBlockTime(Timestamp v) { setField(34, v); }
  @$pb.TagNumber(34)
  $core.bool hasTriggerBlockTime() => $_has(33);
  @$pb.TagNumber(34)
  void clearTriggerBlockTime() => clearField(34);
  @$pb.TagNumber(34)
  Timestamp ensureTriggerBlockTime() => $_ensure(33);
}

/// Information about an arrived block that is part of the streaming response.
class ArrivedBlockInfo extends $pb.GeneratedMessage {
  factory ArrivedBlockInfo({
    BlockHash? hash,
    AbsoluteBlockHeight? height,
  }) {
    final $result = create();
    if (hash != null) {
      $result.hash = hash;
    }
    if (height != null) {
      $result.height = height;
    }
    return $result;
  }
  ArrivedBlockInfo._() : super();
  factory ArrivedBlockInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ArrivedBlockInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ArrivedBlockInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'hash', subBuilder: BlockHash.create)
    ..aOM<AbsoluteBlockHeight>(2, _omitFieldNames ? '' : 'height', subBuilder: AbsoluteBlockHeight.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ArrivedBlockInfo clone() => ArrivedBlockInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ArrivedBlockInfo copyWith(void Function(ArrivedBlockInfo) updates) => super.copyWith((message) => updates(message as ArrivedBlockInfo)) as ArrivedBlockInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ArrivedBlockInfo create() => ArrivedBlockInfo._();
  ArrivedBlockInfo createEmptyInstance() => create();
  static $pb.PbList<ArrivedBlockInfo> createRepeated() => $pb.PbList<ArrivedBlockInfo>();
  @$core.pragma('dart2js:noInline')
  static ArrivedBlockInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ArrivedBlockInfo>(create);
  static ArrivedBlockInfo? _defaultInstance;

  /// Hash of the block.
  @$pb.TagNumber(1)
  BlockHash get hash => $_getN(0);
  @$pb.TagNumber(1)
  set hash(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureHash() => $_ensure(0);

  /// Absolute height of the block, height 0 is the genesis block.
  @$pb.TagNumber(2)
  AbsoluteBlockHeight get height => $_getN(1);
  @$pb.TagNumber(2)
  set height(AbsoluteBlockHeight v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasHeight() => $_has(1);
  @$pb.TagNumber(2)
  void clearHeight() => clearField(2);
  @$pb.TagNumber(2)
  AbsoluteBlockHeight ensureHeight() => $_ensure(1);
}

/// The response for GetCryptographicParameters.
class CryptographicParameters extends $pb.GeneratedMessage {
  factory CryptographicParameters({
    $core.String? genesisString,
    $core.List<$core.int>? bulletproofGenerators,
    $core.List<$core.int>? onChainCommitmentKey,
  }) {
    final $result = create();
    if (genesisString != null) {
      $result.genesisString = genesisString;
    }
    if (bulletproofGenerators != null) {
      $result.bulletproofGenerators = bulletproofGenerators;
    }
    if (onChainCommitmentKey != null) {
      $result.onChainCommitmentKey = onChainCommitmentKey;
    }
    return $result;
  }
  CryptographicParameters._() : super();
  factory CryptographicParameters.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CryptographicParameters.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CryptographicParameters', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'genesisString')
    ..a<$core.List<$core.int>>(2, _omitFieldNames ? '' : 'bulletproofGenerators', $pb.PbFieldType.OY)
    ..a<$core.List<$core.int>>(3, _omitFieldNames ? '' : 'onChainCommitmentKey', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CryptographicParameters clone() => CryptographicParameters()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CryptographicParameters copyWith(void Function(CryptographicParameters) updates) => super.copyWith((message) => updates(message as CryptographicParameters)) as CryptographicParameters;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CryptographicParameters create() => CryptographicParameters._();
  CryptographicParameters createEmptyInstance() => create();
  static $pb.PbList<CryptographicParameters> createRepeated() => $pb.PbList<CryptographicParameters>();
  @$core.pragma('dart2js:noInline')
  static CryptographicParameters getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CryptographicParameters>(create);
  static CryptographicParameters? _defaultInstance;

  /// A free-form string used to distinguish between different chains even if they share other parameters.
  @$pb.TagNumber(1)
  $core.String get genesisString => $_getSZ(0);
  @$pb.TagNumber(1)
  set genesisString($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasGenesisString() => $_has(0);
  @$pb.TagNumber(1)
  void clearGenesisString() => clearField(1);

  /// Generators for the bulletproofs.
  /// It is a serialized list of 256 group elements in the G1 group of the BLS12-381 curve.
  @$pb.TagNumber(2)
  $core.List<$core.int> get bulletproofGenerators => $_getN(1);
  @$pb.TagNumber(2)
  set bulletproofGenerators($core.List<$core.int> v) { $_setBytes(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasBulletproofGenerators() => $_has(1);
  @$pb.TagNumber(2)
  void clearBulletproofGenerators() => clearField(2);

  /// A shared commitment key known to the chain and the account holder (and therefore it is public).
  /// The account holder uses this commitment key to generate commitments to values in the attribute list.
  /// It is a serialized pair of group elements  in the G1 group of the BLS12-381 curve.
  @$pb.TagNumber(3)
  $core.List<$core.int> get onChainCommitmentKey => $_getN(2);
  @$pb.TagNumber(3)
  set onChainCommitmentKey($core.List<$core.int> v) { $_setBytes(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasOnChainCommitmentKey() => $_has(2);
  @$pb.TagNumber(3)
  void clearOnChainCommitmentKey() => clearField(3);
}

/// The response for GetBlockInfo.
class BlockInfo extends $pb.GeneratedMessage {
  factory BlockInfo({
    BlockHash? hash,
    AbsoluteBlockHeight? height,
    BlockHash? parentBlock,
    BlockHash? lastFinalizedBlock,
    GenesisIndex? genesisIndex,
    BlockHeight? eraBlockHeight,
    Timestamp? receiveTime,
    Timestamp? arriveTime,
    Slot? slotNumber,
    Timestamp? slotTime,
    BakerId? baker,
    $core.bool? finalized,
    $core.int? transactionCount,
    Energy? transactionsEnergyCost,
    $core.int? transactionsSize,
    StateHash? stateHash,
    ProtocolVersion? protocolVersion,
    Round? round,
    Epoch? epoch,
  }) {
    final $result = create();
    if (hash != null) {
      $result.hash = hash;
    }
    if (height != null) {
      $result.height = height;
    }
    if (parentBlock != null) {
      $result.parentBlock = parentBlock;
    }
    if (lastFinalizedBlock != null) {
      $result.lastFinalizedBlock = lastFinalizedBlock;
    }
    if (genesisIndex != null) {
      $result.genesisIndex = genesisIndex;
    }
    if (eraBlockHeight != null) {
      $result.eraBlockHeight = eraBlockHeight;
    }
    if (receiveTime != null) {
      $result.receiveTime = receiveTime;
    }
    if (arriveTime != null) {
      $result.arriveTime = arriveTime;
    }
    if (slotNumber != null) {
      $result.slotNumber = slotNumber;
    }
    if (slotTime != null) {
      $result.slotTime = slotTime;
    }
    if (baker != null) {
      $result.baker = baker;
    }
    if (finalized != null) {
      $result.finalized = finalized;
    }
    if (transactionCount != null) {
      $result.transactionCount = transactionCount;
    }
    if (transactionsEnergyCost != null) {
      $result.transactionsEnergyCost = transactionsEnergyCost;
    }
    if (transactionsSize != null) {
      $result.transactionsSize = transactionsSize;
    }
    if (stateHash != null) {
      $result.stateHash = stateHash;
    }
    if (protocolVersion != null) {
      $result.protocolVersion = protocolVersion;
    }
    if (round != null) {
      $result.round = round;
    }
    if (epoch != null) {
      $result.epoch = epoch;
    }
    return $result;
  }
  BlockInfo._() : super();
  factory BlockInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'hash', subBuilder: BlockHash.create)
    ..aOM<AbsoluteBlockHeight>(2, _omitFieldNames ? '' : 'height', subBuilder: AbsoluteBlockHeight.create)
    ..aOM<BlockHash>(3, _omitFieldNames ? '' : 'parentBlock', subBuilder: BlockHash.create)
    ..aOM<BlockHash>(4, _omitFieldNames ? '' : 'lastFinalizedBlock', subBuilder: BlockHash.create)
    ..aOM<GenesisIndex>(5, _omitFieldNames ? '' : 'genesisIndex', subBuilder: GenesisIndex.create)
    ..aOM<BlockHeight>(6, _omitFieldNames ? '' : 'eraBlockHeight', subBuilder: BlockHeight.create)
    ..aOM<Timestamp>(7, _omitFieldNames ? '' : 'receiveTime', subBuilder: Timestamp.create)
    ..aOM<Timestamp>(8, _omitFieldNames ? '' : 'arriveTime', subBuilder: Timestamp.create)
    ..aOM<Slot>(9, _omitFieldNames ? '' : 'slotNumber', subBuilder: Slot.create)
    ..aOM<Timestamp>(10, _omitFieldNames ? '' : 'slotTime', subBuilder: Timestamp.create)
    ..aOM<BakerId>(11, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..aOB(12, _omitFieldNames ? '' : 'finalized')
    ..a<$core.int>(13, _omitFieldNames ? '' : 'transactionCount', $pb.PbFieldType.OU3)
    ..aOM<Energy>(14, _omitFieldNames ? '' : 'transactionsEnergyCost', subBuilder: Energy.create)
    ..a<$core.int>(15, _omitFieldNames ? '' : 'transactionsSize', $pb.PbFieldType.OU3)
    ..aOM<StateHash>(16, _omitFieldNames ? '' : 'stateHash', subBuilder: StateHash.create)
    ..e<ProtocolVersion>(17, _omitFieldNames ? '' : 'protocolVersion', $pb.PbFieldType.OE, defaultOrMaker: ProtocolVersion.PROTOCOL_VERSION_1, valueOf: ProtocolVersion.valueOf, enumValues: ProtocolVersion.values)
    ..aOM<Round>(18, _omitFieldNames ? '' : 'round', subBuilder: Round.create)
    ..aOM<Epoch>(19, _omitFieldNames ? '' : 'epoch', subBuilder: Epoch.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockInfo clone() => BlockInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockInfo copyWith(void Function(BlockInfo) updates) => super.copyWith((message) => updates(message as BlockInfo)) as BlockInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockInfo create() => BlockInfo._();
  BlockInfo createEmptyInstance() => create();
  static $pb.PbList<BlockInfo> createRepeated() => $pb.PbList<BlockInfo>();
  @$core.pragma('dart2js:noInline')
  static BlockInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockInfo>(create);
  static BlockInfo? _defaultInstance;

  /// Hash of the block.
  @$pb.TagNumber(1)
  BlockHash get hash => $_getN(0);
  @$pb.TagNumber(1)
  set hash(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureHash() => $_ensure(0);

  /// Absolute height of the block, height 0 is the genesis block.
  @$pb.TagNumber(2)
  AbsoluteBlockHeight get height => $_getN(1);
  @$pb.TagNumber(2)
  set height(AbsoluteBlockHeight v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasHeight() => $_has(1);
  @$pb.TagNumber(2)
  void clearHeight() => clearField(2);
  @$pb.TagNumber(2)
  AbsoluteBlockHeight ensureHeight() => $_ensure(1);

  /// The parent block hash. For a re-genesis block, this will be the terminal block of the
  /// previous chain. For the initial genesis block, this will be the hash of the block itself.
  @$pb.TagNumber(3)
  BlockHash get parentBlock => $_getN(2);
  @$pb.TagNumber(3)
  set parentBlock(BlockHash v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasParentBlock() => $_has(2);
  @$pb.TagNumber(3)
  void clearParentBlock() => clearField(3);
  @$pb.TagNumber(3)
  BlockHash ensureParentBlock() => $_ensure(2);

  /// The last finalized block when this block was baked.
  @$pb.TagNumber(4)
  BlockHash get lastFinalizedBlock => $_getN(3);
  @$pb.TagNumber(4)
  set lastFinalizedBlock(BlockHash v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasLastFinalizedBlock() => $_has(3);
  @$pb.TagNumber(4)
  void clearLastFinalizedBlock() => clearField(4);
  @$pb.TagNumber(4)
  BlockHash ensureLastFinalizedBlock() => $_ensure(3);

  /// The genesis index for this block. This counts the number of protocol updates that have
  /// preceded this block, and defines the era of the block.
  @$pb.TagNumber(5)
  GenesisIndex get genesisIndex => $_getN(4);
  @$pb.TagNumber(5)
  set genesisIndex(GenesisIndex v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasGenesisIndex() => $_has(4);
  @$pb.TagNumber(5)
  void clearGenesisIndex() => clearField(5);
  @$pb.TagNumber(5)
  GenesisIndex ensureGenesisIndex() => $_ensure(4);

  /// The height of this block relative to the (re)genesis block of its era.
  @$pb.TagNumber(6)
  BlockHeight get eraBlockHeight => $_getN(5);
  @$pb.TagNumber(6)
  set eraBlockHeight(BlockHeight v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasEraBlockHeight() => $_has(5);
  @$pb.TagNumber(6)
  void clearEraBlockHeight() => clearField(6);
  @$pb.TagNumber(6)
  BlockHeight ensureEraBlockHeight() => $_ensure(5);

  /// The time the block was received.
  @$pb.TagNumber(7)
  Timestamp get receiveTime => $_getN(6);
  @$pb.TagNumber(7)
  set receiveTime(Timestamp v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasReceiveTime() => $_has(6);
  @$pb.TagNumber(7)
  void clearReceiveTime() => clearField(7);
  @$pb.TagNumber(7)
  Timestamp ensureReceiveTime() => $_ensure(6);

  /// The time the block was verified.
  @$pb.TagNumber(8)
  Timestamp get arriveTime => $_getN(7);
  @$pb.TagNumber(8)
  set arriveTime(Timestamp v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasArriveTime() => $_has(7);
  @$pb.TagNumber(8)
  void clearArriveTime() => clearField(8);
  @$pb.TagNumber(8)
  Timestamp ensureArriveTime() => $_ensure(7);

  /// The slot number in which the block was baked. Present in protocol versions 1-5.
  @$pb.TagNumber(9)
  Slot get slotNumber => $_getN(8);
  @$pb.TagNumber(9)
  set slotNumber(Slot v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasSlotNumber() => $_has(8);
  @$pb.TagNumber(9)
  void clearSlotNumber() => clearField(9);
  @$pb.TagNumber(9)
  Slot ensureSlotNumber() => $_ensure(8);

  /// The time of the slot in which the block was baked.
  @$pb.TagNumber(10)
  Timestamp get slotTime => $_getN(9);
  @$pb.TagNumber(10)
  set slotTime(Timestamp v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasSlotTime() => $_has(9);
  @$pb.TagNumber(10)
  void clearSlotTime() => clearField(10);
  @$pb.TagNumber(10)
  Timestamp ensureSlotTime() => $_ensure(9);

  /// The baker id of account baking this block. Not provided for a genesis block.
  @$pb.TagNumber(11)
  BakerId get baker => $_getN(10);
  @$pb.TagNumber(11)
  set baker(BakerId v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasBaker() => $_has(10);
  @$pb.TagNumber(11)
  void clearBaker() => clearField(11);
  @$pb.TagNumber(11)
  BakerId ensureBaker() => $_ensure(10);

  /// Whether the block is finalized.
  @$pb.TagNumber(12)
  $core.bool get finalized => $_getBF(11);
  @$pb.TagNumber(12)
  set finalized($core.bool v) { $_setBool(11, v); }
  @$pb.TagNumber(12)
  $core.bool hasFinalized() => $_has(11);
  @$pb.TagNumber(12)
  void clearFinalized() => clearField(12);

  /// The number of transactions in the block.
  @$pb.TagNumber(13)
  $core.int get transactionCount => $_getIZ(12);
  @$pb.TagNumber(13)
  set transactionCount($core.int v) { $_setUnsignedInt32(12, v); }
  @$pb.TagNumber(13)
  $core.bool hasTransactionCount() => $_has(12);
  @$pb.TagNumber(13)
  void clearTransactionCount() => clearField(13);

  /// The energy cost of the transactions in the block.
  @$pb.TagNumber(14)
  Energy get transactionsEnergyCost => $_getN(13);
  @$pb.TagNumber(14)
  set transactionsEnergyCost(Energy v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasTransactionsEnergyCost() => $_has(13);
  @$pb.TagNumber(14)
  void clearTransactionsEnergyCost() => clearField(14);
  @$pb.TagNumber(14)
  Energy ensureTransactionsEnergyCost() => $_ensure(13);

  /// The total byte size of all transactions in the block.
  @$pb.TagNumber(15)
  $core.int get transactionsSize => $_getIZ(14);
  @$pb.TagNumber(15)
  set transactionsSize($core.int v) { $_setUnsignedInt32(14, v); }
  @$pb.TagNumber(15)
  $core.bool hasTransactionsSize() => $_has(14);
  @$pb.TagNumber(15)
  void clearTransactionsSize() => clearField(15);

  /// The hash of the block state after this block.
  @$pb.TagNumber(16)
  StateHash get stateHash => $_getN(15);
  @$pb.TagNumber(16)
  set stateHash(StateHash v) { setField(16, v); }
  @$pb.TagNumber(16)
  $core.bool hasStateHash() => $_has(15);
  @$pb.TagNumber(16)
  void clearStateHash() => clearField(16);
  @$pb.TagNumber(16)
  StateHash ensureStateHash() => $_ensure(15);

  /// Protocol version to which the block belongs.
  @$pb.TagNumber(17)
  ProtocolVersion get protocolVersion => $_getN(16);
  @$pb.TagNumber(17)
  set protocolVersion(ProtocolVersion v) { setField(17, v); }
  @$pb.TagNumber(17)
  $core.bool hasProtocolVersion() => $_has(16);
  @$pb.TagNumber(17)
  void clearProtocolVersion() => clearField(17);

  /// Block round. Present from protocol version 6.
  @$pb.TagNumber(18)
  Round get round => $_getN(17);
  @$pb.TagNumber(18)
  set round(Round v) { setField(18, v); }
  @$pb.TagNumber(18)
  $core.bool hasRound() => $_has(17);
  @$pb.TagNumber(18)
  void clearRound() => clearField(18);
  @$pb.TagNumber(18)
  Round ensureRound() => $_ensure(17);

  /// Block epoch. Present from protocol version 6.
  @$pb.TagNumber(19)
  Epoch get epoch => $_getN(18);
  @$pb.TagNumber(19)
  set epoch(Epoch v) { setField(19, v); }
  @$pb.TagNumber(19)
  $core.bool hasEpoch() => $_has(18);
  @$pb.TagNumber(19)
  void clearEpoch() => clearField(19);
  @$pb.TagNumber(19)
  Epoch ensureEpoch() => $_ensure(18);
}

/// Request for GetPoolInfo.
class PoolInfoRequest extends $pb.GeneratedMessage {
  factory PoolInfoRequest({
    BlockHashInput? blockHash,
    BakerId? baker,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (baker != null) {
      $result.baker = baker;
    }
    return $result;
  }
  PoolInfoRequest._() : super();
  factory PoolInfoRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PoolInfoRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PoolInfoRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..aOM<BakerId>(2, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PoolInfoRequest clone() => PoolInfoRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PoolInfoRequest copyWith(void Function(PoolInfoRequest) updates) => super.copyWith((message) => updates(message as PoolInfoRequest)) as PoolInfoRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PoolInfoRequest create() => PoolInfoRequest._();
  PoolInfoRequest createEmptyInstance() => create();
  static $pb.PbList<PoolInfoRequest> createRepeated() => $pb.PbList<PoolInfoRequest>();
  @$core.pragma('dart2js:noInline')
  static PoolInfoRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PoolInfoRequest>(create);
  static PoolInfoRequest? _defaultInstance;

  /// Block in which to query the pool information.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// The 'BakerId' of the pool owner.
  @$pb.TagNumber(2)
  BakerId get baker => $_getN(1);
  @$pb.TagNumber(2)
  set baker(BakerId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBaker() => $_has(1);
  @$pb.TagNumber(2)
  void clearBaker() => clearField(2);
  @$pb.TagNumber(2)
  BakerId ensureBaker() => $_ensure(1);
}

/// A reduction in baker equity capital is pending.
class PoolPendingChange_Reduce extends $pb.GeneratedMessage {
  factory PoolPendingChange_Reduce({
    Amount? reducedEquityCapital,
    Timestamp? effectiveTime,
  }) {
    final $result = create();
    if (reducedEquityCapital != null) {
      $result.reducedEquityCapital = reducedEquityCapital;
    }
    if (effectiveTime != null) {
      $result.effectiveTime = effectiveTime;
    }
    return $result;
  }
  PoolPendingChange_Reduce._() : super();
  factory PoolPendingChange_Reduce.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PoolPendingChange_Reduce.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PoolPendingChange.Reduce', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'reducedEquityCapital', subBuilder: Amount.create)
    ..aOM<Timestamp>(2, _omitFieldNames ? '' : 'effectiveTime', subBuilder: Timestamp.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PoolPendingChange_Reduce clone() => PoolPendingChange_Reduce()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PoolPendingChange_Reduce copyWith(void Function(PoolPendingChange_Reduce) updates) => super.copyWith((message) => updates(message as PoolPendingChange_Reduce)) as PoolPendingChange_Reduce;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PoolPendingChange_Reduce create() => PoolPendingChange_Reduce._();
  PoolPendingChange_Reduce createEmptyInstance() => create();
  static $pb.PbList<PoolPendingChange_Reduce> createRepeated() => $pb.PbList<PoolPendingChange_Reduce>();
  @$core.pragma('dart2js:noInline')
  static PoolPendingChange_Reduce getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PoolPendingChange_Reduce>(create);
  static PoolPendingChange_Reduce? _defaultInstance;

  /// New baker equity capital.
  @$pb.TagNumber(1)
  Amount get reducedEquityCapital => $_getN(0);
  @$pb.TagNumber(1)
  set reducedEquityCapital(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasReducedEquityCapital() => $_has(0);
  @$pb.TagNumber(1)
  void clearReducedEquityCapital() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureReducedEquityCapital() => $_ensure(0);

  /// Timestamp when the change takes effect.
  @$pb.TagNumber(2)
  Timestamp get effectiveTime => $_getN(1);
  @$pb.TagNumber(2)
  set effectiveTime(Timestamp v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEffectiveTime() => $_has(1);
  @$pb.TagNumber(2)
  void clearEffectiveTime() => clearField(2);
  @$pb.TagNumber(2)
  Timestamp ensureEffectiveTime() => $_ensure(1);
}

/// Removal of the pool is pending.
class PoolPendingChange_Remove extends $pb.GeneratedMessage {
  factory PoolPendingChange_Remove({
    Timestamp? effectiveTime,
  }) {
    final $result = create();
    if (effectiveTime != null) {
      $result.effectiveTime = effectiveTime;
    }
    return $result;
  }
  PoolPendingChange_Remove._() : super();
  factory PoolPendingChange_Remove.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PoolPendingChange_Remove.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PoolPendingChange.Remove', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Timestamp>(1, _omitFieldNames ? '' : 'effectiveTime', subBuilder: Timestamp.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PoolPendingChange_Remove clone() => PoolPendingChange_Remove()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PoolPendingChange_Remove copyWith(void Function(PoolPendingChange_Remove) updates) => super.copyWith((message) => updates(message as PoolPendingChange_Remove)) as PoolPendingChange_Remove;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PoolPendingChange_Remove create() => PoolPendingChange_Remove._();
  PoolPendingChange_Remove createEmptyInstance() => create();
  static $pb.PbList<PoolPendingChange_Remove> createRepeated() => $pb.PbList<PoolPendingChange_Remove>();
  @$core.pragma('dart2js:noInline')
  static PoolPendingChange_Remove getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PoolPendingChange_Remove>(create);
  static PoolPendingChange_Remove? _defaultInstance;

  /// Timestamp when the change takes effect.
  @$pb.TagNumber(1)
  Timestamp get effectiveTime => $_getN(0);
  @$pb.TagNumber(1)
  set effectiveTime(Timestamp v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasEffectiveTime() => $_has(0);
  @$pb.TagNumber(1)
  void clearEffectiveTime() => clearField(1);
  @$pb.TagNumber(1)
  Timestamp ensureEffectiveTime() => $_ensure(0);
}

enum PoolPendingChange_Change {
  reduce, 
  remove, 
  notSet
}

/// A pending change to a baker pool.
class PoolPendingChange extends $pb.GeneratedMessage {
  factory PoolPendingChange({
    PoolPendingChange_Reduce? reduce,
    PoolPendingChange_Remove? remove,
  }) {
    final $result = create();
    if (reduce != null) {
      $result.reduce = reduce;
    }
    if (remove != null) {
      $result.remove = remove;
    }
    return $result;
  }
  PoolPendingChange._() : super();
  factory PoolPendingChange.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PoolPendingChange.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, PoolPendingChange_Change> _PoolPendingChange_ChangeByTag = {
    1 : PoolPendingChange_Change.reduce,
    2 : PoolPendingChange_Change.remove,
    0 : PoolPendingChange_Change.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PoolPendingChange', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<PoolPendingChange_Reduce>(1, _omitFieldNames ? '' : 'reduce', subBuilder: PoolPendingChange_Reduce.create)
    ..aOM<PoolPendingChange_Remove>(2, _omitFieldNames ? '' : 'remove', subBuilder: PoolPendingChange_Remove.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PoolPendingChange clone() => PoolPendingChange()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PoolPendingChange copyWith(void Function(PoolPendingChange) updates) => super.copyWith((message) => updates(message as PoolPendingChange)) as PoolPendingChange;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PoolPendingChange create() => PoolPendingChange._();
  PoolPendingChange createEmptyInstance() => create();
  static $pb.PbList<PoolPendingChange> createRepeated() => $pb.PbList<PoolPendingChange>();
  @$core.pragma('dart2js:noInline')
  static PoolPendingChange getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PoolPendingChange>(create);
  static PoolPendingChange? _defaultInstance;

  PoolPendingChange_Change whichChange() => _PoolPendingChange_ChangeByTag[$_whichOneof(0)]!;
  void clearChange() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  PoolPendingChange_Reduce get reduce => $_getN(0);
  @$pb.TagNumber(1)
  set reduce(PoolPendingChange_Reduce v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasReduce() => $_has(0);
  @$pb.TagNumber(1)
  void clearReduce() => clearField(1);
  @$pb.TagNumber(1)
  PoolPendingChange_Reduce ensureReduce() => $_ensure(0);

  @$pb.TagNumber(2)
  PoolPendingChange_Remove get remove => $_getN(1);
  @$pb.TagNumber(2)
  set remove(PoolPendingChange_Remove v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRemove() => $_has(1);
  @$pb.TagNumber(2)
  void clearRemove() => clearField(2);
  @$pb.TagNumber(2)
  PoolPendingChange_Remove ensureRemove() => $_ensure(1);
}

/// Information about a baker pool in the current reward period.
class PoolCurrentPaydayInfo extends $pb.GeneratedMessage {
  factory PoolCurrentPaydayInfo({
    $fixnum.Int64? blocksBaked,
    $core.bool? finalizationLive,
    Amount? transactionFeesEarned,
    Amount? effectiveStake,
    $core.double? lotteryPower,
    Amount? bakerEquityCapital,
    Amount? delegatedCapital,
    CommissionRates? commissionRates,
  }) {
    final $result = create();
    if (blocksBaked != null) {
      $result.blocksBaked = blocksBaked;
    }
    if (finalizationLive != null) {
      $result.finalizationLive = finalizationLive;
    }
    if (transactionFeesEarned != null) {
      $result.transactionFeesEarned = transactionFeesEarned;
    }
    if (effectiveStake != null) {
      $result.effectiveStake = effectiveStake;
    }
    if (lotteryPower != null) {
      $result.lotteryPower = lotteryPower;
    }
    if (bakerEquityCapital != null) {
      $result.bakerEquityCapital = bakerEquityCapital;
    }
    if (delegatedCapital != null) {
      $result.delegatedCapital = delegatedCapital;
    }
    if (commissionRates != null) {
      $result.commissionRates = commissionRates;
    }
    return $result;
  }
  PoolCurrentPaydayInfo._() : super();
  factory PoolCurrentPaydayInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PoolCurrentPaydayInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PoolCurrentPaydayInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'blocksBaked', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..aOB(2, _omitFieldNames ? '' : 'finalizationLive')
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'transactionFeesEarned', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'effectiveStake', subBuilder: Amount.create)
    ..a<$core.double>(5, _omitFieldNames ? '' : 'lotteryPower', $pb.PbFieldType.OD)
    ..aOM<Amount>(6, _omitFieldNames ? '' : 'bakerEquityCapital', subBuilder: Amount.create)
    ..aOM<Amount>(7, _omitFieldNames ? '' : 'delegatedCapital', subBuilder: Amount.create)
    ..aOM<CommissionRates>(8, _omitFieldNames ? '' : 'commissionRates', subBuilder: CommissionRates.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PoolCurrentPaydayInfo clone() => PoolCurrentPaydayInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PoolCurrentPaydayInfo copyWith(void Function(PoolCurrentPaydayInfo) updates) => super.copyWith((message) => updates(message as PoolCurrentPaydayInfo)) as PoolCurrentPaydayInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PoolCurrentPaydayInfo create() => PoolCurrentPaydayInfo._();
  PoolCurrentPaydayInfo createEmptyInstance() => create();
  static $pb.PbList<PoolCurrentPaydayInfo> createRepeated() => $pb.PbList<PoolCurrentPaydayInfo>();
  @$core.pragma('dart2js:noInline')
  static PoolCurrentPaydayInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PoolCurrentPaydayInfo>(create);
  static PoolCurrentPaydayInfo? _defaultInstance;

  /// The number of blocks baked in the current reward period.
  @$pb.TagNumber(1)
  $fixnum.Int64 get blocksBaked => $_getI64(0);
  @$pb.TagNumber(1)
  set blocksBaked($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlocksBaked() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlocksBaked() => clearField(1);

  /// Whether the baker has contributed a finalization proof in the current reward period.
  @$pb.TagNumber(2)
  $core.bool get finalizationLive => $_getBF(1);
  @$pb.TagNumber(2)
  set finalizationLive($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasFinalizationLive() => $_has(1);
  @$pb.TagNumber(2)
  void clearFinalizationLive() => clearField(2);

  /// The transaction fees accruing to the pool in the current reward period.
  @$pb.TagNumber(3)
  Amount get transactionFeesEarned => $_getN(2);
  @$pb.TagNumber(3)
  set transactionFeesEarned(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasTransactionFeesEarned() => $_has(2);
  @$pb.TagNumber(3)
  void clearTransactionFeesEarned() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureTransactionFeesEarned() => $_ensure(2);

  /// The effective stake of the baker in the current reward period.
  @$pb.TagNumber(4)
  Amount get effectiveStake => $_getN(3);
  @$pb.TagNumber(4)
  set effectiveStake(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasEffectiveStake() => $_has(3);
  @$pb.TagNumber(4)
  void clearEffectiveStake() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureEffectiveStake() => $_ensure(3);

  /// The lottery power of the baker in the current reward period.
  @$pb.TagNumber(5)
  $core.double get lotteryPower => $_getN(4);
  @$pb.TagNumber(5)
  set lotteryPower($core.double v) { $_setDouble(4, v); }
  @$pb.TagNumber(5)
  $core.bool hasLotteryPower() => $_has(4);
  @$pb.TagNumber(5)
  void clearLotteryPower() => clearField(5);

  /// The effective equity capital of the baker for the current reward period.
  @$pb.TagNumber(6)
  Amount get bakerEquityCapital => $_getN(5);
  @$pb.TagNumber(6)
  set bakerEquityCapital(Amount v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasBakerEquityCapital() => $_has(5);
  @$pb.TagNumber(6)
  void clearBakerEquityCapital() => clearField(6);
  @$pb.TagNumber(6)
  Amount ensureBakerEquityCapital() => $_ensure(5);

  /// The effective delegated capital to the pool for the current reward period.
  @$pb.TagNumber(7)
  Amount get delegatedCapital => $_getN(6);
  @$pb.TagNumber(7)
  set delegatedCapital(Amount v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasDelegatedCapital() => $_has(6);
  @$pb.TagNumber(7)
  void clearDelegatedCapital() => clearField(7);
  @$pb.TagNumber(7)
  Amount ensureDelegatedCapital() => $_ensure(6);

  /// The commission rates that apply for the current reward period.
  @$pb.TagNumber(8)
  CommissionRates get commissionRates => $_getN(7);
  @$pb.TagNumber(8)
  set commissionRates(CommissionRates v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasCommissionRates() => $_has(7);
  @$pb.TagNumber(8)
  void clearCommissionRates() => clearField(8);
  @$pb.TagNumber(8)
  CommissionRates ensureCommissionRates() => $_ensure(7);
}

/// Type for the response of GetPoolInfo.
/// Contains information about a given pool at the end of a given block.
class PoolInfoResponse extends $pb.GeneratedMessage {
  factory PoolInfoResponse({
    BakerId? baker,
    AccountAddress? address,
    Amount? equityCapital,
    Amount? delegatedCapital,
    Amount? delegatedCapitalCap,
    BakerPoolInfo? poolInfo,
    PoolPendingChange? equityPendingChange,
    PoolCurrentPaydayInfo? currentPaydayInfo,
    Amount? allPoolTotalCapital,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (address != null) {
      $result.address = address;
    }
    if (equityCapital != null) {
      $result.equityCapital = equityCapital;
    }
    if (delegatedCapital != null) {
      $result.delegatedCapital = delegatedCapital;
    }
    if (delegatedCapitalCap != null) {
      $result.delegatedCapitalCap = delegatedCapitalCap;
    }
    if (poolInfo != null) {
      $result.poolInfo = poolInfo;
    }
    if (equityPendingChange != null) {
      $result.equityPendingChange = equityPendingChange;
    }
    if (currentPaydayInfo != null) {
      $result.currentPaydayInfo = currentPaydayInfo;
    }
    if (allPoolTotalCapital != null) {
      $result.allPoolTotalCapital = allPoolTotalCapital;
    }
    return $result;
  }
  PoolInfoResponse._() : super();
  factory PoolInfoResponse.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PoolInfoResponse.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PoolInfoResponse', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'address', subBuilder: AccountAddress.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'equityCapital', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'delegatedCapital', subBuilder: Amount.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'delegatedCapitalCap', subBuilder: Amount.create)
    ..aOM<BakerPoolInfo>(6, _omitFieldNames ? '' : 'poolInfo', subBuilder: BakerPoolInfo.create)
    ..aOM<PoolPendingChange>(7, _omitFieldNames ? '' : 'equityPendingChange', subBuilder: PoolPendingChange.create)
    ..aOM<PoolCurrentPaydayInfo>(8, _omitFieldNames ? '' : 'currentPaydayInfo', subBuilder: PoolCurrentPaydayInfo.create)
    ..aOM<Amount>(9, _omitFieldNames ? '' : 'allPoolTotalCapital', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PoolInfoResponse clone() => PoolInfoResponse()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PoolInfoResponse copyWith(void Function(PoolInfoResponse) updates) => super.copyWith((message) => updates(message as PoolInfoResponse)) as PoolInfoResponse;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PoolInfoResponse create() => PoolInfoResponse._();
  PoolInfoResponse createEmptyInstance() => create();
  static $pb.PbList<PoolInfoResponse> createRepeated() => $pb.PbList<PoolInfoResponse>();
  @$core.pragma('dart2js:noInline')
  static PoolInfoResponse getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PoolInfoResponse>(create);
  static PoolInfoResponse? _defaultInstance;

  /// The 'BakerId' of the pool owner.
  @$pb.TagNumber(1)
  BakerId get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBaker() => $_ensure(0);

  /// The account address of the pool owner.
  @$pb.TagNumber(2)
  AccountAddress get address => $_getN(1);
  @$pb.TagNumber(2)
  set address(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearAddress() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureAddress() => $_ensure(1);

  /// The equity capital provided by the pool owner.
  @$pb.TagNumber(3)
  Amount get equityCapital => $_getN(2);
  @$pb.TagNumber(3)
  set equityCapital(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEquityCapital() => $_has(2);
  @$pb.TagNumber(3)
  void clearEquityCapital() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureEquityCapital() => $_ensure(2);

  /// The capital delegated to the pool by other accounts.
  @$pb.TagNumber(4)
  Amount get delegatedCapital => $_getN(3);
  @$pb.TagNumber(4)
  set delegatedCapital(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasDelegatedCapital() => $_has(3);
  @$pb.TagNumber(4)
  void clearDelegatedCapital() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureDelegatedCapital() => $_ensure(3);

  /// The maximum amount that may be delegated to the pool, accounting for leverage and stake limits.
  @$pb.TagNumber(5)
  Amount get delegatedCapitalCap => $_getN(4);
  @$pb.TagNumber(5)
  set delegatedCapitalCap(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasDelegatedCapitalCap() => $_has(4);
  @$pb.TagNumber(5)
  void clearDelegatedCapitalCap() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensureDelegatedCapitalCap() => $_ensure(4);

  /// The pool info associated with the pool: open status, metadata URL and commission rates.
  @$pb.TagNumber(6)
  BakerPoolInfo get poolInfo => $_getN(5);
  @$pb.TagNumber(6)
  set poolInfo(BakerPoolInfo v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasPoolInfo() => $_has(5);
  @$pb.TagNumber(6)
  void clearPoolInfo() => clearField(6);
  @$pb.TagNumber(6)
  BakerPoolInfo ensurePoolInfo() => $_ensure(5);

  /// Any pending change to the equity carpital.
  @$pb.TagNumber(7)
  PoolPendingChange get equityPendingChange => $_getN(6);
  @$pb.TagNumber(7)
  set equityPendingChange(PoolPendingChange v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasEquityPendingChange() => $_has(6);
  @$pb.TagNumber(7)
  void clearEquityPendingChange() => clearField(7);
  @$pb.TagNumber(7)
  PoolPendingChange ensureEquityPendingChange() => $_ensure(6);

  /// Information of the pool in the current reward period.
  @$pb.TagNumber(8)
  PoolCurrentPaydayInfo get currentPaydayInfo => $_getN(7);
  @$pb.TagNumber(8)
  set currentPaydayInfo(PoolCurrentPaydayInfo v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasCurrentPaydayInfo() => $_has(7);
  @$pb.TagNumber(8)
  void clearCurrentPaydayInfo() => clearField(8);
  @$pb.TagNumber(8)
  PoolCurrentPaydayInfo ensureCurrentPaydayInfo() => $_ensure(7);

  /// Total capital staked across all pools, including passive delegation.
  @$pb.TagNumber(9)
  Amount get allPoolTotalCapital => $_getN(8);
  @$pb.TagNumber(9)
  set allPoolTotalCapital(Amount v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasAllPoolTotalCapital() => $_has(8);
  @$pb.TagNumber(9)
  void clearAllPoolTotalCapital() => clearField(9);
  @$pb.TagNumber(9)
  Amount ensureAllPoolTotalCapital() => $_ensure(8);
}

/// Type for the response of GetPassiveDelegationInfo.
/// Contains information about passive delegators at the end of a given block.
class PassiveDelegationInfo extends $pb.GeneratedMessage {
  factory PassiveDelegationInfo({
    Amount? delegatedCapital,
    CommissionRates? commissionRates,
    Amount? currentPaydayTransactionFeesEarned,
    Amount? currentPaydayDelegatedCapital,
    Amount? allPoolTotalCapital,
  }) {
    final $result = create();
    if (delegatedCapital != null) {
      $result.delegatedCapital = delegatedCapital;
    }
    if (commissionRates != null) {
      $result.commissionRates = commissionRates;
    }
    if (currentPaydayTransactionFeesEarned != null) {
      $result.currentPaydayTransactionFeesEarned = currentPaydayTransactionFeesEarned;
    }
    if (currentPaydayDelegatedCapital != null) {
      $result.currentPaydayDelegatedCapital = currentPaydayDelegatedCapital;
    }
    if (allPoolTotalCapital != null) {
      $result.allPoolTotalCapital = allPoolTotalCapital;
    }
    return $result;
  }
  PassiveDelegationInfo._() : super();
  factory PassiveDelegationInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PassiveDelegationInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PassiveDelegationInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'delegatedCapital', subBuilder: Amount.create)
    ..aOM<CommissionRates>(2, _omitFieldNames ? '' : 'commissionRates', subBuilder: CommissionRates.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'currentPaydayTransactionFeesEarned', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'currentPaydayDelegatedCapital', subBuilder: Amount.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'allPoolTotalCapital', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PassiveDelegationInfo clone() => PassiveDelegationInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PassiveDelegationInfo copyWith(void Function(PassiveDelegationInfo) updates) => super.copyWith((message) => updates(message as PassiveDelegationInfo)) as PassiveDelegationInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PassiveDelegationInfo create() => PassiveDelegationInfo._();
  PassiveDelegationInfo createEmptyInstance() => create();
  static $pb.PbList<PassiveDelegationInfo> createRepeated() => $pb.PbList<PassiveDelegationInfo>();
  @$core.pragma('dart2js:noInline')
  static PassiveDelegationInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PassiveDelegationInfo>(create);
  static PassiveDelegationInfo? _defaultInstance;

  /// The total capital delegated passively.
  @$pb.TagNumber(1)
  Amount get delegatedCapital => $_getN(0);
  @$pb.TagNumber(1)
  set delegatedCapital(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDelegatedCapital() => $_has(0);
  @$pb.TagNumber(1)
  void clearDelegatedCapital() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureDelegatedCapital() => $_ensure(0);

  /// The passive delegation commission rates.
  @$pb.TagNumber(2)
  CommissionRates get commissionRates => $_getN(1);
  @$pb.TagNumber(2)
  set commissionRates(CommissionRates v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCommissionRates() => $_has(1);
  @$pb.TagNumber(2)
  void clearCommissionRates() => clearField(2);
  @$pb.TagNumber(2)
  CommissionRates ensureCommissionRates() => $_ensure(1);

  /// The transaction fees accruing to the passive delegators in the current reward period.
  @$pb.TagNumber(3)
  Amount get currentPaydayTransactionFeesEarned => $_getN(2);
  @$pb.TagNumber(3)
  set currentPaydayTransactionFeesEarned(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasCurrentPaydayTransactionFeesEarned() => $_has(2);
  @$pb.TagNumber(3)
  void clearCurrentPaydayTransactionFeesEarned() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureCurrentPaydayTransactionFeesEarned() => $_ensure(2);

  /// The effective delegated capital of passive delegators for the current reward period.
  @$pb.TagNumber(4)
  Amount get currentPaydayDelegatedCapital => $_getN(3);
  @$pb.TagNumber(4)
  set currentPaydayDelegatedCapital(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasCurrentPaydayDelegatedCapital() => $_has(3);
  @$pb.TagNumber(4)
  void clearCurrentPaydayDelegatedCapital() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureCurrentPaydayDelegatedCapital() => $_ensure(3);

  /// Total capital staked across all pools, including passive delegation.
  @$pb.TagNumber(5)
  Amount get allPoolTotalCapital => $_getN(4);
  @$pb.TagNumber(5)
  set allPoolTotalCapital(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasAllPoolTotalCapital() => $_has(4);
  @$pb.TagNumber(5)
  void clearAllPoolTotalCapital() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensureAllPoolTotalCapital() => $_ensure(4);
}

/// Request using an absolute block height.
class BlocksAtHeightRequest_Absolute extends $pb.GeneratedMessage {
  factory BlocksAtHeightRequest_Absolute({
    AbsoluteBlockHeight? height,
  }) {
    final $result = create();
    if (height != null) {
      $result.height = height;
    }
    return $result;
  }
  BlocksAtHeightRequest_Absolute._() : super();
  factory BlocksAtHeightRequest_Absolute.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlocksAtHeightRequest_Absolute.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlocksAtHeightRequest.Absolute', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AbsoluteBlockHeight>(1, _omitFieldNames ? '' : 'height', subBuilder: AbsoluteBlockHeight.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlocksAtHeightRequest_Absolute clone() => BlocksAtHeightRequest_Absolute()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlocksAtHeightRequest_Absolute copyWith(void Function(BlocksAtHeightRequest_Absolute) updates) => super.copyWith((message) => updates(message as BlocksAtHeightRequest_Absolute)) as BlocksAtHeightRequest_Absolute;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightRequest_Absolute create() => BlocksAtHeightRequest_Absolute._();
  BlocksAtHeightRequest_Absolute createEmptyInstance() => create();
  static $pb.PbList<BlocksAtHeightRequest_Absolute> createRepeated() => $pb.PbList<BlocksAtHeightRequest_Absolute>();
  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightRequest_Absolute getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlocksAtHeightRequest_Absolute>(create);
  static BlocksAtHeightRequest_Absolute? _defaultInstance;

  /// The absolute block height.
  @$pb.TagNumber(1)
  AbsoluteBlockHeight get height => $_getN(0);
  @$pb.TagNumber(1)
  set height(AbsoluteBlockHeight v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasHeight() => $_has(0);
  @$pb.TagNumber(1)
  void clearHeight() => clearField(1);
  @$pb.TagNumber(1)
  AbsoluteBlockHeight ensureHeight() => $_ensure(0);
}

/// Request using a relative block height.
class BlocksAtHeightRequest_Relative extends $pb.GeneratedMessage {
  factory BlocksAtHeightRequest_Relative({
    GenesisIndex? genesisIndex,
    BlockHeight? height,
    $core.bool? restrict,
  }) {
    final $result = create();
    if (genesisIndex != null) {
      $result.genesisIndex = genesisIndex;
    }
    if (height != null) {
      $result.height = height;
    }
    if (restrict != null) {
      $result.restrict = restrict;
    }
    return $result;
  }
  BlocksAtHeightRequest_Relative._() : super();
  factory BlocksAtHeightRequest_Relative.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlocksAtHeightRequest_Relative.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlocksAtHeightRequest.Relative', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<GenesisIndex>(1, _omitFieldNames ? '' : 'genesisIndex', subBuilder: GenesisIndex.create)
    ..aOM<BlockHeight>(2, _omitFieldNames ? '' : 'height', subBuilder: BlockHeight.create)
    ..aOB(3, _omitFieldNames ? '' : 'restrict')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlocksAtHeightRequest_Relative clone() => BlocksAtHeightRequest_Relative()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlocksAtHeightRequest_Relative copyWith(void Function(BlocksAtHeightRequest_Relative) updates) => super.copyWith((message) => updates(message as BlocksAtHeightRequest_Relative)) as BlocksAtHeightRequest_Relative;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightRequest_Relative create() => BlocksAtHeightRequest_Relative._();
  BlocksAtHeightRequest_Relative createEmptyInstance() => create();
  static $pb.PbList<BlocksAtHeightRequest_Relative> createRepeated() => $pb.PbList<BlocksAtHeightRequest_Relative>();
  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightRequest_Relative getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlocksAtHeightRequest_Relative>(create);
  static BlocksAtHeightRequest_Relative? _defaultInstance;

  /// Genesis index to start from.
  @$pb.TagNumber(1)
  GenesisIndex get genesisIndex => $_getN(0);
  @$pb.TagNumber(1)
  set genesisIndex(GenesisIndex v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasGenesisIndex() => $_has(0);
  @$pb.TagNumber(1)
  void clearGenesisIndex() => clearField(1);
  @$pb.TagNumber(1)
  GenesisIndex ensureGenesisIndex() => $_ensure(0);

  /// Height starting from the genesis block at the genesis index.
  @$pb.TagNumber(2)
  BlockHeight get height => $_getN(1);
  @$pb.TagNumber(2)
  set height(BlockHeight v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasHeight() => $_has(1);
  @$pb.TagNumber(2)
  void clearHeight() => clearField(2);
  @$pb.TagNumber(2)
  BlockHeight ensureHeight() => $_ensure(1);

  /// Whether to return results only from the specified genesis index (`true`),
  /// or allow results from more recent genesis indices as well (`false`).
  @$pb.TagNumber(3)
  $core.bool get restrict => $_getBF(2);
  @$pb.TagNumber(3)
  set restrict($core.bool v) { $_setBool(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasRestrict() => $_has(2);
  @$pb.TagNumber(3)
  void clearRestrict() => clearField(3);
}

enum BlocksAtHeightRequest_BlocksAtHeight {
  absolute, 
  relative, 
  notSet
}

/// Request for GetBlocksAtHeight.
class BlocksAtHeightRequest extends $pb.GeneratedMessage {
  factory BlocksAtHeightRequest({
    BlocksAtHeightRequest_Absolute? absolute,
    BlocksAtHeightRequest_Relative? relative,
  }) {
    final $result = create();
    if (absolute != null) {
      $result.absolute = absolute;
    }
    if (relative != null) {
      $result.relative = relative;
    }
    return $result;
  }
  BlocksAtHeightRequest._() : super();
  factory BlocksAtHeightRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlocksAtHeightRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BlocksAtHeightRequest_BlocksAtHeight> _BlocksAtHeightRequest_BlocksAtHeightByTag = {
    1 : BlocksAtHeightRequest_BlocksAtHeight.absolute,
    2 : BlocksAtHeightRequest_BlocksAtHeight.relative,
    0 : BlocksAtHeightRequest_BlocksAtHeight.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlocksAtHeightRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<BlocksAtHeightRequest_Absolute>(1, _omitFieldNames ? '' : 'absolute', subBuilder: BlocksAtHeightRequest_Absolute.create)
    ..aOM<BlocksAtHeightRequest_Relative>(2, _omitFieldNames ? '' : 'relative', subBuilder: BlocksAtHeightRequest_Relative.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlocksAtHeightRequest clone() => BlocksAtHeightRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlocksAtHeightRequest copyWith(void Function(BlocksAtHeightRequest) updates) => super.copyWith((message) => updates(message as BlocksAtHeightRequest)) as BlocksAtHeightRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightRequest create() => BlocksAtHeightRequest._();
  BlocksAtHeightRequest createEmptyInstance() => create();
  static $pb.PbList<BlocksAtHeightRequest> createRepeated() => $pb.PbList<BlocksAtHeightRequest>();
  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlocksAtHeightRequest>(create);
  static BlocksAtHeightRequest? _defaultInstance;

  BlocksAtHeightRequest_BlocksAtHeight whichBlocksAtHeight() => _BlocksAtHeightRequest_BlocksAtHeightByTag[$_whichOneof(0)]!;
  void clearBlocksAtHeight() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  BlocksAtHeightRequest_Absolute get absolute => $_getN(0);
  @$pb.TagNumber(1)
  set absolute(BlocksAtHeightRequest_Absolute v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAbsolute() => $_has(0);
  @$pb.TagNumber(1)
  void clearAbsolute() => clearField(1);
  @$pb.TagNumber(1)
  BlocksAtHeightRequest_Absolute ensureAbsolute() => $_ensure(0);

  @$pb.TagNumber(2)
  BlocksAtHeightRequest_Relative get relative => $_getN(1);
  @$pb.TagNumber(2)
  set relative(BlocksAtHeightRequest_Relative v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRelative() => $_has(1);
  @$pb.TagNumber(2)
  void clearRelative() => clearField(2);
  @$pb.TagNumber(2)
  BlocksAtHeightRequest_Relative ensureRelative() => $_ensure(1);
}

/// Response for GetBlocksAtHeight.
class BlocksAtHeightResponse extends $pb.GeneratedMessage {
  factory BlocksAtHeightResponse({
    $core.Iterable<BlockHash>? blocks,
  }) {
    final $result = create();
    if (blocks != null) {
      $result.blocks.addAll(blocks);
    }
    return $result;
  }
  BlocksAtHeightResponse._() : super();
  factory BlocksAtHeightResponse.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlocksAtHeightResponse.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlocksAtHeightResponse', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<BlockHash>(1, _omitFieldNames ? '' : 'blocks', $pb.PbFieldType.PM, subBuilder: BlockHash.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlocksAtHeightResponse clone() => BlocksAtHeightResponse()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlocksAtHeightResponse copyWith(void Function(BlocksAtHeightResponse) updates) => super.copyWith((message) => updates(message as BlocksAtHeightResponse)) as BlocksAtHeightResponse;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightResponse create() => BlocksAtHeightResponse._();
  BlocksAtHeightResponse createEmptyInstance() => create();
  static $pb.PbList<BlocksAtHeightResponse> createRepeated() => $pb.PbList<BlocksAtHeightResponse>();
  @$core.pragma('dart2js:noInline')
  static BlocksAtHeightResponse getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlocksAtHeightResponse>(create);
  static BlocksAtHeightResponse? _defaultInstance;

  /// Live blocks at the given height.
  @$pb.TagNumber(1)
  $core.List<BlockHash> get blocks => $_getList(0);
}

/// Version 0 tokenomics.
class TokenomicsInfo_V0 extends $pb.GeneratedMessage {
  factory TokenomicsInfo_V0({
    Amount? totalAmount,
    Amount? totalEncryptedAmount,
    Amount? bakingRewardAccount,
    Amount? finalizationRewardAccount,
    Amount? gasAccount,
    ProtocolVersion? protocolVersion,
  }) {
    final $result = create();
    if (totalAmount != null) {
      $result.totalAmount = totalAmount;
    }
    if (totalEncryptedAmount != null) {
      $result.totalEncryptedAmount = totalEncryptedAmount;
    }
    if (bakingRewardAccount != null) {
      $result.bakingRewardAccount = bakingRewardAccount;
    }
    if (finalizationRewardAccount != null) {
      $result.finalizationRewardAccount = finalizationRewardAccount;
    }
    if (gasAccount != null) {
      $result.gasAccount = gasAccount;
    }
    if (protocolVersion != null) {
      $result.protocolVersion = protocolVersion;
    }
    return $result;
  }
  TokenomicsInfo_V0._() : super();
  factory TokenomicsInfo_V0.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TokenomicsInfo_V0.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TokenomicsInfo.V0', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'totalAmount', subBuilder: Amount.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'totalEncryptedAmount', subBuilder: Amount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'bakingRewardAccount', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'finalizationRewardAccount', subBuilder: Amount.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'gasAccount', subBuilder: Amount.create)
    ..e<ProtocolVersion>(6, _omitFieldNames ? '' : 'protocolVersion', $pb.PbFieldType.OE, defaultOrMaker: ProtocolVersion.PROTOCOL_VERSION_1, valueOf: ProtocolVersion.valueOf, enumValues: ProtocolVersion.values)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TokenomicsInfo_V0 clone() => TokenomicsInfo_V0()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TokenomicsInfo_V0 copyWith(void Function(TokenomicsInfo_V0) updates) => super.copyWith((message) => updates(message as TokenomicsInfo_V0)) as TokenomicsInfo_V0;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TokenomicsInfo_V0 create() => TokenomicsInfo_V0._();
  TokenomicsInfo_V0 createEmptyInstance() => create();
  static $pb.PbList<TokenomicsInfo_V0> createRepeated() => $pb.PbList<TokenomicsInfo_V0>();
  @$core.pragma('dart2js:noInline')
  static TokenomicsInfo_V0 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TokenomicsInfo_V0>(create);
  static TokenomicsInfo_V0? _defaultInstance;

  /// The total CCD in existence.
  @$pb.TagNumber(1)
  Amount get totalAmount => $_getN(0);
  @$pb.TagNumber(1)
  set totalAmount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTotalAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearTotalAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureTotalAmount() => $_ensure(0);

  /// The total CCD in encrypted balances.
  @$pb.TagNumber(2)
  Amount get totalEncryptedAmount => $_getN(1);
  @$pb.TagNumber(2)
  set totalEncryptedAmount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTotalEncryptedAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearTotalEncryptedAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureTotalEncryptedAmount() => $_ensure(1);

  /// The amount in the baking reward account.
  @$pb.TagNumber(3)
  Amount get bakingRewardAccount => $_getN(2);
  @$pb.TagNumber(3)
  set bakingRewardAccount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasBakingRewardAccount() => $_has(2);
  @$pb.TagNumber(3)
  void clearBakingRewardAccount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureBakingRewardAccount() => $_ensure(2);

  /// The amount in the finalization reward account.
  @$pb.TagNumber(4)
  Amount get finalizationRewardAccount => $_getN(3);
  @$pb.TagNumber(4)
  set finalizationRewardAccount(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasFinalizationRewardAccount() => $_has(3);
  @$pb.TagNumber(4)
  void clearFinalizationRewardAccount() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureFinalizationRewardAccount() => $_ensure(3);

  /// The amount in the GAS account.
  @$pb.TagNumber(5)
  Amount get gasAccount => $_getN(4);
  @$pb.TagNumber(5)
  set gasAccount(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasGasAccount() => $_has(4);
  @$pb.TagNumber(5)
  void clearGasAccount() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensureGasAccount() => $_ensure(4);

  /// The protocol version.
  @$pb.TagNumber(6)
  ProtocolVersion get protocolVersion => $_getN(5);
  @$pb.TagNumber(6)
  set protocolVersion(ProtocolVersion v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasProtocolVersion() => $_has(5);
  @$pb.TagNumber(6)
  void clearProtocolVersion() => clearField(6);
}

/// Version 1 tokenomics.
class TokenomicsInfo_V1 extends $pb.GeneratedMessage {
  factory TokenomicsInfo_V1({
    Amount? totalAmount,
    Amount? totalEncryptedAmount,
    Amount? bakingRewardAccount,
    Amount? finalizationRewardAccount,
    Amount? gasAccount,
    Amount? foundationTransactionRewards,
    Timestamp? nextPaydayTime,
    MintRate? nextPaydayMintRate,
    Amount? totalStakedCapital,
    ProtocolVersion? protocolVersion,
  }) {
    final $result = create();
    if (totalAmount != null) {
      $result.totalAmount = totalAmount;
    }
    if (totalEncryptedAmount != null) {
      $result.totalEncryptedAmount = totalEncryptedAmount;
    }
    if (bakingRewardAccount != null) {
      $result.bakingRewardAccount = bakingRewardAccount;
    }
    if (finalizationRewardAccount != null) {
      $result.finalizationRewardAccount = finalizationRewardAccount;
    }
    if (gasAccount != null) {
      $result.gasAccount = gasAccount;
    }
    if (foundationTransactionRewards != null) {
      $result.foundationTransactionRewards = foundationTransactionRewards;
    }
    if (nextPaydayTime != null) {
      $result.nextPaydayTime = nextPaydayTime;
    }
    if (nextPaydayMintRate != null) {
      $result.nextPaydayMintRate = nextPaydayMintRate;
    }
    if (totalStakedCapital != null) {
      $result.totalStakedCapital = totalStakedCapital;
    }
    if (protocolVersion != null) {
      $result.protocolVersion = protocolVersion;
    }
    return $result;
  }
  TokenomicsInfo_V1._() : super();
  factory TokenomicsInfo_V1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TokenomicsInfo_V1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TokenomicsInfo.V1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'totalAmount', subBuilder: Amount.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'totalEncryptedAmount', subBuilder: Amount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'bakingRewardAccount', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'finalizationRewardAccount', subBuilder: Amount.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'gasAccount', subBuilder: Amount.create)
    ..aOM<Amount>(6, _omitFieldNames ? '' : 'foundationTransactionRewards', subBuilder: Amount.create)
    ..aOM<Timestamp>(7, _omitFieldNames ? '' : 'nextPaydayTime', subBuilder: Timestamp.create)
    ..aOM<MintRate>(8, _omitFieldNames ? '' : 'nextPaydayMintRate', subBuilder: MintRate.create)
    ..aOM<Amount>(9, _omitFieldNames ? '' : 'totalStakedCapital', subBuilder: Amount.create)
    ..e<ProtocolVersion>(10, _omitFieldNames ? '' : 'protocolVersion', $pb.PbFieldType.OE, defaultOrMaker: ProtocolVersion.PROTOCOL_VERSION_1, valueOf: ProtocolVersion.valueOf, enumValues: ProtocolVersion.values)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TokenomicsInfo_V1 clone() => TokenomicsInfo_V1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TokenomicsInfo_V1 copyWith(void Function(TokenomicsInfo_V1) updates) => super.copyWith((message) => updates(message as TokenomicsInfo_V1)) as TokenomicsInfo_V1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TokenomicsInfo_V1 create() => TokenomicsInfo_V1._();
  TokenomicsInfo_V1 createEmptyInstance() => create();
  static $pb.PbList<TokenomicsInfo_V1> createRepeated() => $pb.PbList<TokenomicsInfo_V1>();
  @$core.pragma('dart2js:noInline')
  static TokenomicsInfo_V1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TokenomicsInfo_V1>(create);
  static TokenomicsInfo_V1? _defaultInstance;

  /// The total CCD in existence.
  @$pb.TagNumber(1)
  Amount get totalAmount => $_getN(0);
  @$pb.TagNumber(1)
  set totalAmount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTotalAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearTotalAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureTotalAmount() => $_ensure(0);

  /// The total CCD in encrypted balances.
  @$pb.TagNumber(2)
  Amount get totalEncryptedAmount => $_getN(1);
  @$pb.TagNumber(2)
  set totalEncryptedAmount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTotalEncryptedAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearTotalEncryptedAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureTotalEncryptedAmount() => $_ensure(1);

  /// The amount in the baking reward account.
  @$pb.TagNumber(3)
  Amount get bakingRewardAccount => $_getN(2);
  @$pb.TagNumber(3)
  set bakingRewardAccount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasBakingRewardAccount() => $_has(2);
  @$pb.TagNumber(3)
  void clearBakingRewardAccount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureBakingRewardAccount() => $_ensure(2);

  /// The amount in the finalization reward account.
  @$pb.TagNumber(4)
  Amount get finalizationRewardAccount => $_getN(3);
  @$pb.TagNumber(4)
  set finalizationRewardAccount(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasFinalizationRewardAccount() => $_has(3);
  @$pb.TagNumber(4)
  void clearFinalizationRewardAccount() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureFinalizationRewardAccount() => $_ensure(3);

  /// The amount in the GAS account.
  @$pb.TagNumber(5)
  Amount get gasAccount => $_getN(4);
  @$pb.TagNumber(5)
  set gasAccount(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasGasAccount() => $_has(4);
  @$pb.TagNumber(5)
  void clearGasAccount() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensureGasAccount() => $_ensure(4);

  /// The transaction reward fraction accruing to the foundation (to be paid at next payday).
  @$pb.TagNumber(6)
  Amount get foundationTransactionRewards => $_getN(5);
  @$pb.TagNumber(6)
  set foundationTransactionRewards(Amount v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasFoundationTransactionRewards() => $_has(5);
  @$pb.TagNumber(6)
  void clearFoundationTransactionRewards() => clearField(6);
  @$pb.TagNumber(6)
  Amount ensureFoundationTransactionRewards() => $_ensure(5);

  /// The time of the next payday.
  @$pb.TagNumber(7)
  Timestamp get nextPaydayTime => $_getN(6);
  @$pb.TagNumber(7)
  set nextPaydayTime(Timestamp v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasNextPaydayTime() => $_has(6);
  @$pb.TagNumber(7)
  void clearNextPaydayTime() => clearField(7);
  @$pb.TagNumber(7)
  Timestamp ensureNextPaydayTime() => $_ensure(6);

  /// The rate at which CCD will be minted (as a proportion of the total supply) at the next payday.
  @$pb.TagNumber(8)
  MintRate get nextPaydayMintRate => $_getN(7);
  @$pb.TagNumber(8)
  set nextPaydayMintRate(MintRate v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasNextPaydayMintRate() => $_has(7);
  @$pb.TagNumber(8)
  void clearNextPaydayMintRate() => clearField(8);
  @$pb.TagNumber(8)
  MintRate ensureNextPaydayMintRate() => $_ensure(7);

  /// The total capital put up as stake by bakers and delegators.
  @$pb.TagNumber(9)
  Amount get totalStakedCapital => $_getN(8);
  @$pb.TagNumber(9)
  set totalStakedCapital(Amount v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasTotalStakedCapital() => $_has(8);
  @$pb.TagNumber(9)
  void clearTotalStakedCapital() => clearField(9);
  @$pb.TagNumber(9)
  Amount ensureTotalStakedCapital() => $_ensure(8);

  /// The protocol version.
  @$pb.TagNumber(10)
  ProtocolVersion get protocolVersion => $_getN(9);
  @$pb.TagNumber(10)
  set protocolVersion(ProtocolVersion v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasProtocolVersion() => $_has(9);
  @$pb.TagNumber(10)
  void clearProtocolVersion() => clearField(10);
}

enum TokenomicsInfo_Tokenomics {
  v0, 
  v1, 
  notSet
}

/// Type for the response of GetTokenomicsInfo.
/// Contains information related to tokenomics at the end of a given block.
class TokenomicsInfo extends $pb.GeneratedMessage {
  factory TokenomicsInfo({
    TokenomicsInfo_V0? v0,
    TokenomicsInfo_V1? v1,
  }) {
    final $result = create();
    if (v0 != null) {
      $result.v0 = v0;
    }
    if (v1 != null) {
      $result.v1 = v1;
    }
    return $result;
  }
  TokenomicsInfo._() : super();
  factory TokenomicsInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TokenomicsInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, TokenomicsInfo_Tokenomics> _TokenomicsInfo_TokenomicsByTag = {
    1 : TokenomicsInfo_Tokenomics.v0,
    2 : TokenomicsInfo_Tokenomics.v1,
    0 : TokenomicsInfo_Tokenomics.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TokenomicsInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<TokenomicsInfo_V0>(1, _omitFieldNames ? '' : 'v0', subBuilder: TokenomicsInfo_V0.create)
    ..aOM<TokenomicsInfo_V1>(2, _omitFieldNames ? '' : 'v1', subBuilder: TokenomicsInfo_V1.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TokenomicsInfo clone() => TokenomicsInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TokenomicsInfo copyWith(void Function(TokenomicsInfo) updates) => super.copyWith((message) => updates(message as TokenomicsInfo)) as TokenomicsInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TokenomicsInfo create() => TokenomicsInfo._();
  TokenomicsInfo createEmptyInstance() => create();
  static $pb.PbList<TokenomicsInfo> createRepeated() => $pb.PbList<TokenomicsInfo>();
  @$core.pragma('dart2js:noInline')
  static TokenomicsInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TokenomicsInfo>(create);
  static TokenomicsInfo? _defaultInstance;

  TokenomicsInfo_Tokenomics whichTokenomics() => _TokenomicsInfo_TokenomicsByTag[$_whichOneof(0)]!;
  void clearTokenomics() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  TokenomicsInfo_V0 get v0 => $_getN(0);
  @$pb.TagNumber(1)
  set v0(TokenomicsInfo_V0 v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasV0() => $_has(0);
  @$pb.TagNumber(1)
  void clearV0() => clearField(1);
  @$pb.TagNumber(1)
  TokenomicsInfo_V0 ensureV0() => $_ensure(0);

  @$pb.TagNumber(2)
  TokenomicsInfo_V1 get v1 => $_getN(1);
  @$pb.TagNumber(2)
  set v1(TokenomicsInfo_V1 v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasV1() => $_has(1);
  @$pb.TagNumber(2)
  void clearV1() => clearField(2);
  @$pb.TagNumber(2)
  TokenomicsInfo_V1 ensureV1() => $_ensure(1);
}

/// Request for InvokeInstance.
class InvokeInstanceRequest extends $pb.GeneratedMessage {
  factory InvokeInstanceRequest({
    BlockHashInput? blockHash,
    Address? invoker,
    ContractAddress? instance,
    Amount? amount,
    ReceiveName? entrypoint,
    Parameter? parameter,
    Energy? energy,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (invoker != null) {
      $result.invoker = invoker;
    }
    if (instance != null) {
      $result.instance = instance;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (entrypoint != null) {
      $result.entrypoint = entrypoint;
    }
    if (parameter != null) {
      $result.parameter = parameter;
    }
    if (energy != null) {
      $result.energy = energy;
    }
    return $result;
  }
  InvokeInstanceRequest._() : super();
  factory InvokeInstanceRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InvokeInstanceRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InvokeInstanceRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..aOM<Address>(2, _omitFieldNames ? '' : 'invoker', subBuilder: Address.create)
    ..aOM<ContractAddress>(3, _omitFieldNames ? '' : 'instance', subBuilder: ContractAddress.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<ReceiveName>(5, _omitFieldNames ? '' : 'entrypoint', subBuilder: ReceiveName.create)
    ..aOM<Parameter>(6, _omitFieldNames ? '' : 'parameter', subBuilder: Parameter.create)
    ..aOM<Energy>(7, _omitFieldNames ? '' : 'energy', subBuilder: Energy.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InvokeInstanceRequest clone() => InvokeInstanceRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InvokeInstanceRequest copyWith(void Function(InvokeInstanceRequest) updates) => super.copyWith((message) => updates(message as InvokeInstanceRequest)) as InvokeInstanceRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InvokeInstanceRequest create() => InvokeInstanceRequest._();
  InvokeInstanceRequest createEmptyInstance() => create();
  static $pb.PbList<InvokeInstanceRequest> createRepeated() => $pb.PbList<InvokeInstanceRequest>();
  @$core.pragma('dart2js:noInline')
  static InvokeInstanceRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InvokeInstanceRequest>(create);
  static InvokeInstanceRequest? _defaultInstance;

  /// Block to invoke the contract. The invocation will be at the end of the given block.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// Invoker of the contract. If this is not supplied then the contract will be
  /// invoked by an account with address 0, no credentials and sufficient amount
  /// of CCD to cover the transfer amount. If given, the relevant address (either
  /// account or contract) must exist in the blockstate.
  @$pb.TagNumber(2)
  Address get invoker => $_getN(1);
  @$pb.TagNumber(2)
  set invoker(Address v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasInvoker() => $_has(1);
  @$pb.TagNumber(2)
  void clearInvoker() => clearField(2);
  @$pb.TagNumber(2)
  Address ensureInvoker() => $_ensure(1);

  /// Address of the contract instance to invoke.
  @$pb.TagNumber(3)
  ContractAddress get instance => $_getN(2);
  @$pb.TagNumber(3)
  set instance(ContractAddress v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInstance() => $_has(2);
  @$pb.TagNumber(3)
  void clearInstance() => clearField(3);
  @$pb.TagNumber(3)
  ContractAddress ensureInstance() => $_ensure(2);

  /// Amount to invoke the smart contract instance with.
  @$pb.TagNumber(4)
  Amount get amount => $_getN(3);
  @$pb.TagNumber(4)
  set amount(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasAmount() => $_has(3);
  @$pb.TagNumber(4)
  void clearAmount() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureAmount() => $_ensure(3);

  /// The entrypoint of the smart contract instance to invoke.
  @$pb.TagNumber(5)
  ReceiveName get entrypoint => $_getN(4);
  @$pb.TagNumber(5)
  set entrypoint(ReceiveName v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasEntrypoint() => $_has(4);
  @$pb.TagNumber(5)
  void clearEntrypoint() => clearField(5);
  @$pb.TagNumber(5)
  ReceiveName ensureEntrypoint() => $_ensure(4);

  /// The parameter bytes to include in the invocation of the entrypoint.
  @$pb.TagNumber(6)
  Parameter get parameter => $_getN(5);
  @$pb.TagNumber(6)
  set parameter(Parameter v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasParameter() => $_has(5);
  @$pb.TagNumber(6)
  void clearParameter() => clearField(6);
  @$pb.TagNumber(6)
  Parameter ensureParameter() => $_ensure(5);

  /// And what amount of energy to allow for execution. This cannot exceed
  /// `100_000_000_000`, but in practice it should be much less. The maximum
  /// block energy is typically in the range of a few million.
  @$pb.TagNumber(7)
  Energy get energy => $_getN(6);
  @$pb.TagNumber(7)
  set energy(Energy v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasEnergy() => $_has(6);
  @$pb.TagNumber(7)
  void clearEnergy() => clearField(7);
  @$pb.TagNumber(7)
  Energy ensureEnergy() => $_ensure(6);
}

/// Contract execution failed.
class InvokeInstanceResponse_Failure extends $pb.GeneratedMessage {
  factory InvokeInstanceResponse_Failure({
    $core.List<$core.int>? returnValue,
    Energy? usedEnergy,
    RejectReason? reason,
  }) {
    final $result = create();
    if (returnValue != null) {
      $result.returnValue = returnValue;
    }
    if (usedEnergy != null) {
      $result.usedEnergy = usedEnergy;
    }
    if (reason != null) {
      $result.reason = reason;
    }
    return $result;
  }
  InvokeInstanceResponse_Failure._() : super();
  factory InvokeInstanceResponse_Failure.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InvokeInstanceResponse_Failure.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InvokeInstanceResponse.Failure', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'returnValue', $pb.PbFieldType.OY)
    ..aOM<Energy>(2, _omitFieldNames ? '' : 'usedEnergy', subBuilder: Energy.create)
    ..aOM<RejectReason>(3, _omitFieldNames ? '' : 'reason', subBuilder: RejectReason.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InvokeInstanceResponse_Failure clone() => InvokeInstanceResponse_Failure()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InvokeInstanceResponse_Failure copyWith(void Function(InvokeInstanceResponse_Failure) updates) => super.copyWith((message) => updates(message as InvokeInstanceResponse_Failure)) as InvokeInstanceResponse_Failure;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InvokeInstanceResponse_Failure create() => InvokeInstanceResponse_Failure._();
  InvokeInstanceResponse_Failure createEmptyInstance() => create();
  static $pb.PbList<InvokeInstanceResponse_Failure> createRepeated() => $pb.PbList<InvokeInstanceResponse_Failure>();
  @$core.pragma('dart2js:noInline')
  static InvokeInstanceResponse_Failure getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InvokeInstanceResponse_Failure>(create);
  static InvokeInstanceResponse_Failure? _defaultInstance;

  /// If invoking a V0 contract this is not provided, otherwise it is
  /// potentially return value produced by the call unless the call failed with
  /// out of energy or runtime error. If the V1 contract terminated with a
  /// logic error then the return value is present.
  @$pb.TagNumber(1)
  $core.List<$core.int> get returnValue => $_getN(0);
  @$pb.TagNumber(1)
  set returnValue($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasReturnValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearReturnValue() => clearField(1);

  /// Energy used by the execution.
  @$pb.TagNumber(2)
  Energy get usedEnergy => $_getN(1);
  @$pb.TagNumber(2)
  set usedEnergy(Energy v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasUsedEnergy() => $_has(1);
  @$pb.TagNumber(2)
  void clearUsedEnergy() => clearField(2);
  @$pb.TagNumber(2)
  Energy ensureUsedEnergy() => $_ensure(1);

  /// Contract execution failed for the given reason.
  @$pb.TagNumber(3)
  RejectReason get reason => $_getN(2);
  @$pb.TagNumber(3)
  set reason(RejectReason v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasReason() => $_has(2);
  @$pb.TagNumber(3)
  void clearReason() => clearField(3);
  @$pb.TagNumber(3)
  RejectReason ensureReason() => $_ensure(2);
}

/// Contract execution succeeded.
class InvokeInstanceResponse_Success extends $pb.GeneratedMessage {
  factory InvokeInstanceResponse_Success({
    $core.List<$core.int>? returnValue,
    Energy? usedEnergy,
    $core.Iterable<ContractTraceElement>? effects,
  }) {
    final $result = create();
    if (returnValue != null) {
      $result.returnValue = returnValue;
    }
    if (usedEnergy != null) {
      $result.usedEnergy = usedEnergy;
    }
    if (effects != null) {
      $result.effects.addAll(effects);
    }
    return $result;
  }
  InvokeInstanceResponse_Success._() : super();
  factory InvokeInstanceResponse_Success.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InvokeInstanceResponse_Success.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InvokeInstanceResponse.Success', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'returnValue', $pb.PbFieldType.OY)
    ..aOM<Energy>(2, _omitFieldNames ? '' : 'usedEnergy', subBuilder: Energy.create)
    ..pc<ContractTraceElement>(3, _omitFieldNames ? '' : 'effects', $pb.PbFieldType.PM, subBuilder: ContractTraceElement.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InvokeInstanceResponse_Success clone() => InvokeInstanceResponse_Success()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InvokeInstanceResponse_Success copyWith(void Function(InvokeInstanceResponse_Success) updates) => super.copyWith((message) => updates(message as InvokeInstanceResponse_Success)) as InvokeInstanceResponse_Success;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InvokeInstanceResponse_Success create() => InvokeInstanceResponse_Success._();
  InvokeInstanceResponse_Success createEmptyInstance() => create();
  static $pb.PbList<InvokeInstanceResponse_Success> createRepeated() => $pb.PbList<InvokeInstanceResponse_Success>();
  @$core.pragma('dart2js:noInline')
  static InvokeInstanceResponse_Success getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InvokeInstanceResponse_Success>(create);
  static InvokeInstanceResponse_Success? _defaultInstance;

  /// If invoking a V0 contract this is absent. Otherwise it is the return
  /// value produced by the contract.
  @$pb.TagNumber(1)
  $core.List<$core.int> get returnValue => $_getN(0);
  @$pb.TagNumber(1)
  set returnValue($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasReturnValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearReturnValue() => clearField(1);

  /// Energy used by the execution.
  @$pb.TagNumber(2)
  Energy get usedEnergy => $_getN(1);
  @$pb.TagNumber(2)
  set usedEnergy(Energy v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasUsedEnergy() => $_has(1);
  @$pb.TagNumber(2)
  void clearUsedEnergy() => clearField(2);
  @$pb.TagNumber(2)
  Energy ensureUsedEnergy() => $_ensure(1);

  /// Effects produced by contract execution.
  @$pb.TagNumber(3)
  $core.List<ContractTraceElement> get effects => $_getList(2);
}

enum InvokeInstanceResponse_Result {
  success, 
  failure, 
  notSet
}

/// Response type for InvokeInstance.
class InvokeInstanceResponse extends $pb.GeneratedMessage {
  factory InvokeInstanceResponse({
    InvokeInstanceResponse_Success? success,
    InvokeInstanceResponse_Failure? failure,
  }) {
    final $result = create();
    if (success != null) {
      $result.success = success;
    }
    if (failure != null) {
      $result.failure = failure;
    }
    return $result;
  }
  InvokeInstanceResponse._() : super();
  factory InvokeInstanceResponse.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InvokeInstanceResponse.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, InvokeInstanceResponse_Result> _InvokeInstanceResponse_ResultByTag = {
    1 : InvokeInstanceResponse_Result.success,
    2 : InvokeInstanceResponse_Result.failure,
    0 : InvokeInstanceResponse_Result.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InvokeInstanceResponse', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<InvokeInstanceResponse_Success>(1, _omitFieldNames ? '' : 'success', subBuilder: InvokeInstanceResponse_Success.create)
    ..aOM<InvokeInstanceResponse_Failure>(2, _omitFieldNames ? '' : 'failure', subBuilder: InvokeInstanceResponse_Failure.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InvokeInstanceResponse clone() => InvokeInstanceResponse()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InvokeInstanceResponse copyWith(void Function(InvokeInstanceResponse) updates) => super.copyWith((message) => updates(message as InvokeInstanceResponse)) as InvokeInstanceResponse;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InvokeInstanceResponse create() => InvokeInstanceResponse._();
  InvokeInstanceResponse createEmptyInstance() => create();
  static $pb.PbList<InvokeInstanceResponse> createRepeated() => $pb.PbList<InvokeInstanceResponse>();
  @$core.pragma('dart2js:noInline')
  static InvokeInstanceResponse getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InvokeInstanceResponse>(create);
  static InvokeInstanceResponse? _defaultInstance;

  InvokeInstanceResponse_Result whichResult() => _InvokeInstanceResponse_ResultByTag[$_whichOneof(0)]!;
  void clearResult() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  InvokeInstanceResponse_Success get success => $_getN(0);
  @$pb.TagNumber(1)
  set success(InvokeInstanceResponse_Success v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSuccess() => $_has(0);
  @$pb.TagNumber(1)
  void clearSuccess() => clearField(1);
  @$pb.TagNumber(1)
  InvokeInstanceResponse_Success ensureSuccess() => $_ensure(0);

  @$pb.TagNumber(2)
  InvokeInstanceResponse_Failure get failure => $_getN(1);
  @$pb.TagNumber(2)
  set failure(InvokeInstanceResponse_Failure v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasFailure() => $_has(1);
  @$pb.TagNumber(2)
  void clearFailure() => clearField(2);
  @$pb.TagNumber(2)
  InvokeInstanceResponse_Failure ensureFailure() => $_ensure(1);
}

/// Request for GetPoolDelegators and GetPoolDelegatorsRewardPeriod.
class GetPoolDelegatorsRequest extends $pb.GeneratedMessage {
  factory GetPoolDelegatorsRequest({
    BlockHashInput? blockHash,
    BakerId? baker,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (baker != null) {
      $result.baker = baker;
    }
    return $result;
  }
  GetPoolDelegatorsRequest._() : super();
  factory GetPoolDelegatorsRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory GetPoolDelegatorsRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'GetPoolDelegatorsRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHashInput.create)
    ..aOM<BakerId>(2, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  GetPoolDelegatorsRequest clone() => GetPoolDelegatorsRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  GetPoolDelegatorsRequest copyWith(void Function(GetPoolDelegatorsRequest) updates) => super.copyWith((message) => updates(message as GetPoolDelegatorsRequest)) as GetPoolDelegatorsRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static GetPoolDelegatorsRequest create() => GetPoolDelegatorsRequest._();
  GetPoolDelegatorsRequest createEmptyInstance() => create();
  static $pb.PbList<GetPoolDelegatorsRequest> createRepeated() => $pb.PbList<GetPoolDelegatorsRequest>();
  @$core.pragma('dart2js:noInline')
  static GetPoolDelegatorsRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<GetPoolDelegatorsRequest>(create);
  static GetPoolDelegatorsRequest? _defaultInstance;

  /// Block in which to query the delegators.
  @$pb.TagNumber(1)
  BlockHashInput get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureBlockHash() => $_ensure(0);

  /// The 'BakerId' of the pool owner.
  @$pb.TagNumber(2)
  BakerId get baker => $_getN(1);
  @$pb.TagNumber(2)
  set baker(BakerId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBaker() => $_has(1);
  @$pb.TagNumber(2)
  void clearBaker() => clearField(2);
  @$pb.TagNumber(2)
  BakerId ensureBaker() => $_ensure(1);
}

/// Stream item for GetPoolDelegators and GetPassiveDelegators.
class DelegatorInfo extends $pb.GeneratedMessage {
  factory DelegatorInfo({
    AccountAddress? account,
    Amount? stake,
    StakePendingChange? pendingChange,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (stake != null) {
      $result.stake = stake;
    }
    if (pendingChange != null) {
      $result.pendingChange = pendingChange;
    }
    return $result;
  }
  DelegatorInfo._() : super();
  factory DelegatorInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegatorInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegatorInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'stake', subBuilder: Amount.create)
    ..aOM<StakePendingChange>(3, _omitFieldNames ? '' : 'pendingChange', subBuilder: StakePendingChange.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegatorInfo clone() => DelegatorInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegatorInfo copyWith(void Function(DelegatorInfo) updates) => super.copyWith((message) => updates(message as DelegatorInfo)) as DelegatorInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegatorInfo create() => DelegatorInfo._();
  DelegatorInfo createEmptyInstance() => create();
  static $pb.PbList<DelegatorInfo> createRepeated() => $pb.PbList<DelegatorInfo>();
  @$core.pragma('dart2js:noInline')
  static DelegatorInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegatorInfo>(create);
  static DelegatorInfo? _defaultInstance;

  /// The delegator account address.
  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  /// The amount of stake currently staked to the pool.
  @$pb.TagNumber(2)
  Amount get stake => $_getN(1);
  @$pb.TagNumber(2)
  set stake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureStake() => $_ensure(1);

  /// Pending change to the current stake of the delegator.
  @$pb.TagNumber(3)
  StakePendingChange get pendingChange => $_getN(2);
  @$pb.TagNumber(3)
  set pendingChange(StakePendingChange v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasPendingChange() => $_has(2);
  @$pb.TagNumber(3)
  void clearPendingChange() => clearField(3);
  @$pb.TagNumber(3)
  StakePendingChange ensurePendingChange() => $_ensure(2);
}

/// Stream item for GetPoolDelegatorsRewardPeriod and GetPassiveDelegatorsRewardPeriod.
class DelegatorRewardPeriodInfo extends $pb.GeneratedMessage {
  factory DelegatorRewardPeriodInfo({
    AccountAddress? account,
    Amount? stake,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (stake != null) {
      $result.stake = stake;
    }
    return $result;
  }
  DelegatorRewardPeriodInfo._() : super();
  factory DelegatorRewardPeriodInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DelegatorRewardPeriodInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DelegatorRewardPeriodInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'stake', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DelegatorRewardPeriodInfo clone() => DelegatorRewardPeriodInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DelegatorRewardPeriodInfo copyWith(void Function(DelegatorRewardPeriodInfo) updates) => super.copyWith((message) => updates(message as DelegatorRewardPeriodInfo)) as DelegatorRewardPeriodInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DelegatorRewardPeriodInfo create() => DelegatorRewardPeriodInfo._();
  DelegatorRewardPeriodInfo createEmptyInstance() => create();
  static $pb.PbList<DelegatorRewardPeriodInfo> createRepeated() => $pb.PbList<DelegatorRewardPeriodInfo>();
  @$core.pragma('dart2js:noInline')
  static DelegatorRewardPeriodInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DelegatorRewardPeriodInfo>(create);
  static DelegatorRewardPeriodInfo? _defaultInstance;

  /// The delegator account address.
  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  /// The amount of stake currently staked to the pool.
  @$pb.TagNumber(2)
  Amount get stake => $_getN(1);
  @$pb.TagNumber(2)
  set stake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureStake() => $_ensure(1);
}

/// Response type for GetBranches.
class Branch extends $pb.GeneratedMessage {
  factory Branch({
    BlockHash? blockHash,
    $core.Iterable<Branch>? children,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (children != null) {
      $result.children.addAll(children);
    }
    return $result;
  }
  Branch._() : super();
  factory Branch.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Branch.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Branch', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHash.create)
    ..pc<Branch>(2, _omitFieldNames ? '' : 'children', $pb.PbFieldType.PM, subBuilder: Branch.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Branch clone() => Branch()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Branch copyWith(void Function(Branch) updates) => super.copyWith((message) => updates(message as Branch)) as Branch;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Branch create() => Branch._();
  Branch createEmptyInstance() => create();
  static $pb.PbList<Branch> createRepeated() => $pb.PbList<Branch>();
  @$core.pragma('dart2js:noInline')
  static Branch getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Branch>(create);
  static Branch? _defaultInstance;

  /// The hash of the block.
  @$pb.TagNumber(1)
  BlockHash get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureBlockHash() => $_ensure(0);

  /// Further blocks branching of this block.
  @$pb.TagNumber(2)
  $core.List<Branch> get children => $_getList(1);
}

/// The leadership election nonce is an unpredictable value updated once an
/// epoch to make sure that bakers cannot predict too far in the future when
/// they will win the right to bake blocks.
class LeadershipElectionNonce extends $pb.GeneratedMessage {
  factory LeadershipElectionNonce({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  LeadershipElectionNonce._() : super();
  factory LeadershipElectionNonce.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory LeadershipElectionNonce.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'LeadershipElectionNonce', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  LeadershipElectionNonce clone() => LeadershipElectionNonce()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  LeadershipElectionNonce copyWith(void Function(LeadershipElectionNonce) updates) => super.copyWith((message) => updates(message as LeadershipElectionNonce)) as LeadershipElectionNonce;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static LeadershipElectionNonce create() => LeadershipElectionNonce._();
  LeadershipElectionNonce createEmptyInstance() => create();
  static $pb.PbList<LeadershipElectionNonce> createRepeated() => $pb.PbList<LeadershipElectionNonce>();
  @$core.pragma('dart2js:noInline')
  static LeadershipElectionNonce getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<LeadershipElectionNonce>(create);
  static LeadershipElectionNonce? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

class ElectionInfo_Baker extends $pb.GeneratedMessage {
  factory ElectionInfo_Baker({
    BakerId? baker,
    AccountAddress? account,
    $core.double? lotteryPower,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (account != null) {
      $result.account = account;
    }
    if (lotteryPower != null) {
      $result.lotteryPower = lotteryPower;
    }
    return $result;
  }
  ElectionInfo_Baker._() : super();
  factory ElectionInfo_Baker.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ElectionInfo_Baker.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ElectionInfo.Baker', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..a<$core.double>(3, _omitFieldNames ? '' : 'lotteryPower', $pb.PbFieldType.OD)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ElectionInfo_Baker clone() => ElectionInfo_Baker()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ElectionInfo_Baker copyWith(void Function(ElectionInfo_Baker) updates) => super.copyWith((message) => updates(message as ElectionInfo_Baker)) as ElectionInfo_Baker;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ElectionInfo_Baker create() => ElectionInfo_Baker._();
  ElectionInfo_Baker createEmptyInstance() => create();
  static $pb.PbList<ElectionInfo_Baker> createRepeated() => $pb.PbList<ElectionInfo_Baker>();
  @$core.pragma('dart2js:noInline')
  static ElectionInfo_Baker getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ElectionInfo_Baker>(create);
  static ElectionInfo_Baker? _defaultInstance;

  /// The ID of the baker.
  @$pb.TagNumber(1)
  BakerId get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBaker() => $_ensure(0);

  /// The account address of the baker.
  @$pb.TagNumber(2)
  AccountAddress get account => $_getN(1);
  @$pb.TagNumber(2)
  set account(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAccount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAccount() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureAccount() => $_ensure(1);

  /// The lottery power of the baker, rounded to the nearest representable "double".
  @$pb.TagNumber(3)
  $core.double get lotteryPower => $_getN(2);
  @$pb.TagNumber(3)
  set lotteryPower($core.double v) { $_setDouble(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasLotteryPower() => $_has(2);
  @$pb.TagNumber(3)
  void clearLotteryPower() => clearField(3);
}

/// Response type for GetElectionInfo.
/// Contains information related to baker election for a perticular block.
class ElectionInfo extends $pb.GeneratedMessage {
  factory ElectionInfo({
    ElectionDifficulty? electionDifficulty,
    LeadershipElectionNonce? electionNonce,
    $core.Iterable<ElectionInfo_Baker>? bakerElectionInfo,
  }) {
    final $result = create();
    if (electionDifficulty != null) {
      $result.electionDifficulty = electionDifficulty;
    }
    if (electionNonce != null) {
      $result.electionNonce = electionNonce;
    }
    if (bakerElectionInfo != null) {
      $result.bakerElectionInfo.addAll(bakerElectionInfo);
    }
    return $result;
  }
  ElectionInfo._() : super();
  factory ElectionInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ElectionInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ElectionInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ElectionDifficulty>(1, _omitFieldNames ? '' : 'electionDifficulty', subBuilder: ElectionDifficulty.create)
    ..aOM<LeadershipElectionNonce>(2, _omitFieldNames ? '' : 'electionNonce', subBuilder: LeadershipElectionNonce.create)
    ..pc<ElectionInfo_Baker>(3, _omitFieldNames ? '' : 'bakerElectionInfo', $pb.PbFieldType.PM, subBuilder: ElectionInfo_Baker.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ElectionInfo clone() => ElectionInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ElectionInfo copyWith(void Function(ElectionInfo) updates) => super.copyWith((message) => updates(message as ElectionInfo)) as ElectionInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ElectionInfo create() => ElectionInfo._();
  ElectionInfo createEmptyInstance() => create();
  static $pb.PbList<ElectionInfo> createRepeated() => $pb.PbList<ElectionInfo>();
  @$core.pragma('dart2js:noInline')
  static ElectionInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ElectionInfo>(create);
  static ElectionInfo? _defaultInstance;

  /// Baking lottery election difficulty. Present only in protocol versions 1-5.
  @$pb.TagNumber(1)
  ElectionDifficulty get electionDifficulty => $_getN(0);
  @$pb.TagNumber(1)
  set electionDifficulty(ElectionDifficulty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasElectionDifficulty() => $_has(0);
  @$pb.TagNumber(1)
  void clearElectionDifficulty() => clearField(1);
  @$pb.TagNumber(1)
  ElectionDifficulty ensureElectionDifficulty() => $_ensure(0);

  /// Current leadership election nonce for the lottery.
  @$pb.TagNumber(2)
  LeadershipElectionNonce get electionNonce => $_getN(1);
  @$pb.TagNumber(2)
  set electionNonce(LeadershipElectionNonce v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasElectionNonce() => $_has(1);
  @$pb.TagNumber(2)
  void clearElectionNonce() => clearField(2);
  @$pb.TagNumber(2)
  LeadershipElectionNonce ensureElectionNonce() => $_ensure(1);

  /// List of the currently eligible bakers.
  @$pb.TagNumber(3)
  $core.List<ElectionInfo_Baker> get bakerElectionInfo => $_getList(2);
}

/// The entry for the map.
class BlockSpecialEvent_AccountAmounts_Entry extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_AccountAmounts_Entry({
    AccountAddress? account,
    Amount? amount,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    return $result;
  }
  BlockSpecialEvent_AccountAmounts_Entry._() : super();
  factory BlockSpecialEvent_AccountAmounts_Entry.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_AccountAmounts_Entry.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.AccountAmounts.Entry', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_AccountAmounts_Entry clone() => BlockSpecialEvent_AccountAmounts_Entry()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_AccountAmounts_Entry copyWith(void Function(BlockSpecialEvent_AccountAmounts_Entry) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_AccountAmounts_Entry)) as BlockSpecialEvent_AccountAmounts_Entry;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_AccountAmounts_Entry create() => BlockSpecialEvent_AccountAmounts_Entry._();
  BlockSpecialEvent_AccountAmounts_Entry createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_AccountAmounts_Entry> createRepeated() => $pb.PbList<BlockSpecialEvent_AccountAmounts_Entry>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_AccountAmounts_Entry getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_AccountAmounts_Entry>(create);
  static BlockSpecialEvent_AccountAmounts_Entry? _defaultInstance;

  /// The key type
  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  /// The value type
  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);
}

/// A representation of a mapping from an account address to an amount.
class BlockSpecialEvent_AccountAmounts extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_AccountAmounts({
    $core.Iterable<BlockSpecialEvent_AccountAmounts_Entry>? entries,
  }) {
    final $result = create();
    if (entries != null) {
      $result.entries.addAll(entries);
    }
    return $result;
  }
  BlockSpecialEvent_AccountAmounts._() : super();
  factory BlockSpecialEvent_AccountAmounts.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_AccountAmounts.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.AccountAmounts', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<BlockSpecialEvent_AccountAmounts_Entry>(1, _omitFieldNames ? '' : 'entries', $pb.PbFieldType.PM, subBuilder: BlockSpecialEvent_AccountAmounts_Entry.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_AccountAmounts clone() => BlockSpecialEvent_AccountAmounts()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_AccountAmounts copyWith(void Function(BlockSpecialEvent_AccountAmounts) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_AccountAmounts)) as BlockSpecialEvent_AccountAmounts;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_AccountAmounts create() => BlockSpecialEvent_AccountAmounts._();
  BlockSpecialEvent_AccountAmounts createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_AccountAmounts> createRepeated() => $pb.PbList<BlockSpecialEvent_AccountAmounts>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_AccountAmounts getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_AccountAmounts>(create);
  static BlockSpecialEvent_AccountAmounts? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<BlockSpecialEvent_AccountAmounts_Entry> get entries => $_getList(0);
}

/// Payment to each baker of a previous epoch, in proportion to the number
/// of blocks they contributed.
class BlockSpecialEvent_BakingRewards extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_BakingRewards({
    BlockSpecialEvent_AccountAmounts? bakerRewards,
    Amount? remainder,
  }) {
    final $result = create();
    if (bakerRewards != null) {
      $result.bakerRewards = bakerRewards;
    }
    if (remainder != null) {
      $result.remainder = remainder;
    }
    return $result;
  }
  BlockSpecialEvent_BakingRewards._() : super();
  factory BlockSpecialEvent_BakingRewards.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_BakingRewards.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.BakingRewards', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockSpecialEvent_AccountAmounts>(1, _omitFieldNames ? '' : 'bakerRewards', subBuilder: BlockSpecialEvent_AccountAmounts.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'remainder', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_BakingRewards clone() => BlockSpecialEvent_BakingRewards()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_BakingRewards copyWith(void Function(BlockSpecialEvent_BakingRewards) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_BakingRewards)) as BlockSpecialEvent_BakingRewards;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_BakingRewards create() => BlockSpecialEvent_BakingRewards._();
  BlockSpecialEvent_BakingRewards createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_BakingRewards> createRepeated() => $pb.PbList<BlockSpecialEvent_BakingRewards>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_BakingRewards getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_BakingRewards>(create);
  static BlockSpecialEvent_BakingRewards? _defaultInstance;

  /// The amount awarded to each baker.
  @$pb.TagNumber(1)
  BlockSpecialEvent_AccountAmounts get bakerRewards => $_getN(0);
  @$pb.TagNumber(1)
  set bakerRewards(BlockSpecialEvent_AccountAmounts v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerRewards() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerRewards() => clearField(1);
  @$pb.TagNumber(1)
  BlockSpecialEvent_AccountAmounts ensureBakerRewards() => $_ensure(0);

  /// The remaining balance of the baker reward account.
  @$pb.TagNumber(2)
  Amount get remainder => $_getN(1);
  @$pb.TagNumber(2)
  set remainder(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRemainder() => $_has(1);
  @$pb.TagNumber(2)
  void clearRemainder() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureRemainder() => $_ensure(1);
}

/// Minting of new CCD.
class BlockSpecialEvent_Mint extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_Mint({
    Amount? mintBakingReward,
    Amount? mintFinalizationReward,
    Amount? mintPlatformDevelopmentCharge,
    AccountAddress? foundationAccount,
  }) {
    final $result = create();
    if (mintBakingReward != null) {
      $result.mintBakingReward = mintBakingReward;
    }
    if (mintFinalizationReward != null) {
      $result.mintFinalizationReward = mintFinalizationReward;
    }
    if (mintPlatformDevelopmentCharge != null) {
      $result.mintPlatformDevelopmentCharge = mintPlatformDevelopmentCharge;
    }
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    return $result;
  }
  BlockSpecialEvent_Mint._() : super();
  factory BlockSpecialEvent_Mint.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_Mint.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.Mint', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'mintBakingReward', subBuilder: Amount.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'mintFinalizationReward', subBuilder: Amount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'mintPlatformDevelopmentCharge', subBuilder: Amount.create)
    ..aOM<AccountAddress>(4, _omitFieldNames ? '' : 'foundationAccount', subBuilder: AccountAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_Mint clone() => BlockSpecialEvent_Mint()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_Mint copyWith(void Function(BlockSpecialEvent_Mint) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_Mint)) as BlockSpecialEvent_Mint;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_Mint create() => BlockSpecialEvent_Mint._();
  BlockSpecialEvent_Mint createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_Mint> createRepeated() => $pb.PbList<BlockSpecialEvent_Mint>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_Mint getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_Mint>(create);
  static BlockSpecialEvent_Mint? _defaultInstance;

  /// The amount allocated to the banking reward account.
  @$pb.TagNumber(1)
  Amount get mintBakingReward => $_getN(0);
  @$pb.TagNumber(1)
  set mintBakingReward(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasMintBakingReward() => $_has(0);
  @$pb.TagNumber(1)
  void clearMintBakingReward() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureMintBakingReward() => $_ensure(0);

  /// The amount allocated to the finalization reward account.
  @$pb.TagNumber(2)
  Amount get mintFinalizationReward => $_getN(1);
  @$pb.TagNumber(2)
  set mintFinalizationReward(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasMintFinalizationReward() => $_has(1);
  @$pb.TagNumber(2)
  void clearMintFinalizationReward() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureMintFinalizationReward() => $_ensure(1);

  /// The amount allocated as the platform development charge.
  @$pb.TagNumber(3)
  Amount get mintPlatformDevelopmentCharge => $_getN(2);
  @$pb.TagNumber(3)
  set mintPlatformDevelopmentCharge(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMintPlatformDevelopmentCharge() => $_has(2);
  @$pb.TagNumber(3)
  void clearMintPlatformDevelopmentCharge() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureMintPlatformDevelopmentCharge() => $_ensure(2);

  /// The account to which the platform development charge is paid.
  @$pb.TagNumber(4)
  AccountAddress get foundationAccount => $_getN(3);
  @$pb.TagNumber(4)
  set foundationAccount(AccountAddress v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasFoundationAccount() => $_has(3);
  @$pb.TagNumber(4)
  void clearFoundationAccount() => clearField(4);
  @$pb.TagNumber(4)
  AccountAddress ensureFoundationAccount() => $_ensure(3);
}

/// Payment to each finalizer on inclusion of a finalization record in a block.
class BlockSpecialEvent_FinalizationRewards extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_FinalizationRewards({
    BlockSpecialEvent_AccountAmounts? finalizationRewards,
    Amount? remainder,
  }) {
    final $result = create();
    if (finalizationRewards != null) {
      $result.finalizationRewards = finalizationRewards;
    }
    if (remainder != null) {
      $result.remainder = remainder;
    }
    return $result;
  }
  BlockSpecialEvent_FinalizationRewards._() : super();
  factory BlockSpecialEvent_FinalizationRewards.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_FinalizationRewards.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.FinalizationRewards', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockSpecialEvent_AccountAmounts>(1, _omitFieldNames ? '' : 'finalizationRewards', subBuilder: BlockSpecialEvent_AccountAmounts.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'remainder', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_FinalizationRewards clone() => BlockSpecialEvent_FinalizationRewards()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_FinalizationRewards copyWith(void Function(BlockSpecialEvent_FinalizationRewards) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_FinalizationRewards)) as BlockSpecialEvent_FinalizationRewards;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_FinalizationRewards create() => BlockSpecialEvent_FinalizationRewards._();
  BlockSpecialEvent_FinalizationRewards createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_FinalizationRewards> createRepeated() => $pb.PbList<BlockSpecialEvent_FinalizationRewards>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_FinalizationRewards getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_FinalizationRewards>(create);
  static BlockSpecialEvent_FinalizationRewards? _defaultInstance;

  /// The amount awarded to each finalizer.
  @$pb.TagNumber(1)
  BlockSpecialEvent_AccountAmounts get finalizationRewards => $_getN(0);
  @$pb.TagNumber(1)
  set finalizationRewards(BlockSpecialEvent_AccountAmounts v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasFinalizationRewards() => $_has(0);
  @$pb.TagNumber(1)
  void clearFinalizationRewards() => clearField(1);
  @$pb.TagNumber(1)
  BlockSpecialEvent_AccountAmounts ensureFinalizationRewards() => $_ensure(0);

  /// The remaining balance of the finalization reward account.
  @$pb.TagNumber(2)
  Amount get remainder => $_getN(1);
  @$pb.TagNumber(2)
  set remainder(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRemainder() => $_has(1);
  @$pb.TagNumber(2)
  void clearRemainder() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureRemainder() => $_ensure(1);
}

///  Disbursement of fees from a block between the GAS account,
///  the baker, and the foundation. It should always be that:
///
///  ```transaction_fees + old_gas_account = new_gas_account + baker_reward + foundation_charge```
class BlockSpecialEvent_BlockReward extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_BlockReward({
    Amount? transactionFees,
    Amount? oldGasAccount,
    Amount? newGasAccount,
    Amount? bakerReward,
    Amount? foundationCharge,
    AccountAddress? baker,
    AccountAddress? foundationAccount,
  }) {
    final $result = create();
    if (transactionFees != null) {
      $result.transactionFees = transactionFees;
    }
    if (oldGasAccount != null) {
      $result.oldGasAccount = oldGasAccount;
    }
    if (newGasAccount != null) {
      $result.newGasAccount = newGasAccount;
    }
    if (bakerReward != null) {
      $result.bakerReward = bakerReward;
    }
    if (foundationCharge != null) {
      $result.foundationCharge = foundationCharge;
    }
    if (baker != null) {
      $result.baker = baker;
    }
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    return $result;
  }
  BlockSpecialEvent_BlockReward._() : super();
  factory BlockSpecialEvent_BlockReward.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_BlockReward.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.BlockReward', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'transactionFees', subBuilder: Amount.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'oldGasAccount', subBuilder: Amount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'newGasAccount', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'bakerReward', subBuilder: Amount.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'foundationCharge', subBuilder: Amount.create)
    ..aOM<AccountAddress>(6, _omitFieldNames ? '' : 'baker', subBuilder: AccountAddress.create)
    ..aOM<AccountAddress>(7, _omitFieldNames ? '' : 'foundationAccount', subBuilder: AccountAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_BlockReward clone() => BlockSpecialEvent_BlockReward()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_BlockReward copyWith(void Function(BlockSpecialEvent_BlockReward) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_BlockReward)) as BlockSpecialEvent_BlockReward;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_BlockReward create() => BlockSpecialEvent_BlockReward._();
  BlockSpecialEvent_BlockReward createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_BlockReward> createRepeated() => $pb.PbList<BlockSpecialEvent_BlockReward>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_BlockReward getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_BlockReward>(create);
  static BlockSpecialEvent_BlockReward? _defaultInstance;

  /// The total fees paid for transactions in the block.
  @$pb.TagNumber(1)
  Amount get transactionFees => $_getN(0);
  @$pb.TagNumber(1)
  set transactionFees(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTransactionFees() => $_has(0);
  @$pb.TagNumber(1)
  void clearTransactionFees() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureTransactionFees() => $_ensure(0);

  /// The old balance of the GAS account.
  @$pb.TagNumber(2)
  Amount get oldGasAccount => $_getN(1);
  @$pb.TagNumber(2)
  set oldGasAccount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOldGasAccount() => $_has(1);
  @$pb.TagNumber(2)
  void clearOldGasAccount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureOldGasAccount() => $_ensure(1);

  /// The new balance of the GAS account.
  @$pb.TagNumber(3)
  Amount get newGasAccount => $_getN(2);
  @$pb.TagNumber(3)
  set newGasAccount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasNewGasAccount() => $_has(2);
  @$pb.TagNumber(3)
  void clearNewGasAccount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureNewGasAccount() => $_ensure(2);

  /// The amount awarded to the baker.
  @$pb.TagNumber(4)
  Amount get bakerReward => $_getN(3);
  @$pb.TagNumber(4)
  set bakerReward(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasBakerReward() => $_has(3);
  @$pb.TagNumber(4)
  void clearBakerReward() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureBakerReward() => $_ensure(3);

  /// The amount awarded to the foundation.
  @$pb.TagNumber(5)
  Amount get foundationCharge => $_getN(4);
  @$pb.TagNumber(5)
  set foundationCharge(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasFoundationCharge() => $_has(4);
  @$pb.TagNumber(5)
  void clearFoundationCharge() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensureFoundationCharge() => $_ensure(4);

  /// The baker of the block, who receives the award.
  @$pb.TagNumber(6)
  AccountAddress get baker => $_getN(5);
  @$pb.TagNumber(6)
  set baker(AccountAddress v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasBaker() => $_has(5);
  @$pb.TagNumber(6)
  void clearBaker() => clearField(6);
  @$pb.TagNumber(6)
  AccountAddress ensureBaker() => $_ensure(5);

  /// The foundation account.
  @$pb.TagNumber(7)
  AccountAddress get foundationAccount => $_getN(6);
  @$pb.TagNumber(7)
  set foundationAccount(AccountAddress v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasFoundationAccount() => $_has(6);
  @$pb.TagNumber(7)
  void clearFoundationAccount() => clearField(7);
  @$pb.TagNumber(7)
  AccountAddress ensureFoundationAccount() => $_ensure(6);
}

/// Foundation tax.
class BlockSpecialEvent_PaydayFoundationReward extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_PaydayFoundationReward({
    AccountAddress? foundationAccount,
    Amount? developmentCharge,
  }) {
    final $result = create();
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    if (developmentCharge != null) {
      $result.developmentCharge = developmentCharge;
    }
    return $result;
  }
  BlockSpecialEvent_PaydayFoundationReward._() : super();
  factory BlockSpecialEvent_PaydayFoundationReward.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_PaydayFoundationReward.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.PaydayFoundationReward', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'foundationAccount', subBuilder: AccountAddress.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'developmentCharge', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_PaydayFoundationReward clone() => BlockSpecialEvent_PaydayFoundationReward()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_PaydayFoundationReward copyWith(void Function(BlockSpecialEvent_PaydayFoundationReward) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_PaydayFoundationReward)) as BlockSpecialEvent_PaydayFoundationReward;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_PaydayFoundationReward create() => BlockSpecialEvent_PaydayFoundationReward._();
  BlockSpecialEvent_PaydayFoundationReward createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_PaydayFoundationReward> createRepeated() => $pb.PbList<BlockSpecialEvent_PaydayFoundationReward>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_PaydayFoundationReward getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_PaydayFoundationReward>(create);
  static BlockSpecialEvent_PaydayFoundationReward? _defaultInstance;

  /// The account that got rewarded.
  @$pb.TagNumber(1)
  AccountAddress get foundationAccount => $_getN(0);
  @$pb.TagNumber(1)
  set foundationAccount(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasFoundationAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearFoundationAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureFoundationAccount() => $_ensure(0);

  /// The transaction fee reward at payday to the account.
  @$pb.TagNumber(2)
  Amount get developmentCharge => $_getN(1);
  @$pb.TagNumber(2)
  set developmentCharge(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDevelopmentCharge() => $_has(1);
  @$pb.TagNumber(2)
  void clearDevelopmentCharge() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureDevelopmentCharge() => $_ensure(1);
}

/// Reward payment to the given account.
class BlockSpecialEvent_PaydayAccountReward extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_PaydayAccountReward({
    AccountAddress? account,
    Amount? transactionFees,
    Amount? bakerReward,
    Amount? finalizationReward,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (transactionFees != null) {
      $result.transactionFees = transactionFees;
    }
    if (bakerReward != null) {
      $result.bakerReward = bakerReward;
    }
    if (finalizationReward != null) {
      $result.finalizationReward = finalizationReward;
    }
    return $result;
  }
  BlockSpecialEvent_PaydayAccountReward._() : super();
  factory BlockSpecialEvent_PaydayAccountReward.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_PaydayAccountReward.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.PaydayAccountReward', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'transactionFees', subBuilder: Amount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'bakerReward', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'finalizationReward', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_PaydayAccountReward clone() => BlockSpecialEvent_PaydayAccountReward()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_PaydayAccountReward copyWith(void Function(BlockSpecialEvent_PaydayAccountReward) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_PaydayAccountReward)) as BlockSpecialEvent_PaydayAccountReward;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_PaydayAccountReward create() => BlockSpecialEvent_PaydayAccountReward._();
  BlockSpecialEvent_PaydayAccountReward createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_PaydayAccountReward> createRepeated() => $pb.PbList<BlockSpecialEvent_PaydayAccountReward>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_PaydayAccountReward getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_PaydayAccountReward>(create);
  static BlockSpecialEvent_PaydayAccountReward? _defaultInstance;

  /// The account that got rewarded.
  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  /// The transaction fee reward at payday to the account.
  @$pb.TagNumber(2)
  Amount get transactionFees => $_getN(1);
  @$pb.TagNumber(2)
  set transactionFees(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTransactionFees() => $_has(1);
  @$pb.TagNumber(2)
  void clearTransactionFees() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureTransactionFees() => $_ensure(1);

  /// The baking reward at payday to the account.
  @$pb.TagNumber(3)
  Amount get bakerReward => $_getN(2);
  @$pb.TagNumber(3)
  set bakerReward(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasBakerReward() => $_has(2);
  @$pb.TagNumber(3)
  void clearBakerReward() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureBakerReward() => $_ensure(2);

  /// The finalization reward at payday to the account.
  @$pb.TagNumber(4)
  Amount get finalizationReward => $_getN(3);
  @$pb.TagNumber(4)
  set finalizationReward(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasFinalizationReward() => $_has(3);
  @$pb.TagNumber(4)
  void clearFinalizationReward() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureFinalizationReward() => $_ensure(3);
}

/// Amounts accrued to accounts for each baked block.
class BlockSpecialEvent_BlockAccrueReward extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_BlockAccrueReward({
    Amount? transactionFees,
    Amount? oldGasAccount,
    Amount? newGasAccount,
    Amount? bakerReward,
    Amount? passiveReward,
    Amount? foundationCharge,
    BakerId? baker,
  }) {
    final $result = create();
    if (transactionFees != null) {
      $result.transactionFees = transactionFees;
    }
    if (oldGasAccount != null) {
      $result.oldGasAccount = oldGasAccount;
    }
    if (newGasAccount != null) {
      $result.newGasAccount = newGasAccount;
    }
    if (bakerReward != null) {
      $result.bakerReward = bakerReward;
    }
    if (passiveReward != null) {
      $result.passiveReward = passiveReward;
    }
    if (foundationCharge != null) {
      $result.foundationCharge = foundationCharge;
    }
    if (baker != null) {
      $result.baker = baker;
    }
    return $result;
  }
  BlockSpecialEvent_BlockAccrueReward._() : super();
  factory BlockSpecialEvent_BlockAccrueReward.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_BlockAccrueReward.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.BlockAccrueReward', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'transactionFees', subBuilder: Amount.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'oldGasAccount', subBuilder: Amount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'newGasAccount', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'bakerReward', subBuilder: Amount.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'passiveReward', subBuilder: Amount.create)
    ..aOM<Amount>(6, _omitFieldNames ? '' : 'foundationCharge', subBuilder: Amount.create)
    ..aOM<BakerId>(7, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_BlockAccrueReward clone() => BlockSpecialEvent_BlockAccrueReward()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_BlockAccrueReward copyWith(void Function(BlockSpecialEvent_BlockAccrueReward) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_BlockAccrueReward)) as BlockSpecialEvent_BlockAccrueReward;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_BlockAccrueReward create() => BlockSpecialEvent_BlockAccrueReward._();
  BlockSpecialEvent_BlockAccrueReward createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_BlockAccrueReward> createRepeated() => $pb.PbList<BlockSpecialEvent_BlockAccrueReward>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_BlockAccrueReward getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_BlockAccrueReward>(create);
  static BlockSpecialEvent_BlockAccrueReward? _defaultInstance;

  /// The total fees paid for transactions in the block.
  @$pb.TagNumber(1)
  Amount get transactionFees => $_getN(0);
  @$pb.TagNumber(1)
  set transactionFees(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasTransactionFees() => $_has(0);
  @$pb.TagNumber(1)
  void clearTransactionFees() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureTransactionFees() => $_ensure(0);

  /// The old balance of the GAS account.
  @$pb.TagNumber(2)
  Amount get oldGasAccount => $_getN(1);
  @$pb.TagNumber(2)
  set oldGasAccount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOldGasAccount() => $_has(1);
  @$pb.TagNumber(2)
  void clearOldGasAccount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureOldGasAccount() => $_ensure(1);

  /// The new balance of the GAS account.
  @$pb.TagNumber(3)
  Amount get newGasAccount => $_getN(2);
  @$pb.TagNumber(3)
  set newGasAccount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasNewGasAccount() => $_has(2);
  @$pb.TagNumber(3)
  void clearNewGasAccount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureNewGasAccount() => $_ensure(2);

  /// The amount awarded to the baker.
  @$pb.TagNumber(4)
  Amount get bakerReward => $_getN(3);
  @$pb.TagNumber(4)
  set bakerReward(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasBakerReward() => $_has(3);
  @$pb.TagNumber(4)
  void clearBakerReward() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureBakerReward() => $_ensure(3);

  /// The amount awarded to the passive delegators.
  @$pb.TagNumber(5)
  Amount get passiveReward => $_getN(4);
  @$pb.TagNumber(5)
  set passiveReward(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasPassiveReward() => $_has(4);
  @$pb.TagNumber(5)
  void clearPassiveReward() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensurePassiveReward() => $_ensure(4);

  /// The amount awarded to the foundation.
  @$pb.TagNumber(6)
  Amount get foundationCharge => $_getN(5);
  @$pb.TagNumber(6)
  set foundationCharge(Amount v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasFoundationCharge() => $_has(5);
  @$pb.TagNumber(6)
  void clearFoundationCharge() => clearField(6);
  @$pb.TagNumber(6)
  Amount ensureFoundationCharge() => $_ensure(5);

  /// The baker of the block, who will receive the award.
  @$pb.TagNumber(7)
  BakerId get baker => $_getN(6);
  @$pb.TagNumber(7)
  set baker(BakerId v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasBaker() => $_has(6);
  @$pb.TagNumber(7)
  void clearBaker() => clearField(7);
  @$pb.TagNumber(7)
  BakerId ensureBaker() => $_ensure(6);
}

/// Payment distributed to a pool or passive delegators.
class BlockSpecialEvent_PaydayPoolReward extends $pb.GeneratedMessage {
  factory BlockSpecialEvent_PaydayPoolReward({
    BakerId? poolOwner,
    Amount? transactionFees,
    Amount? bakerReward,
    Amount? finalizationReward,
  }) {
    final $result = create();
    if (poolOwner != null) {
      $result.poolOwner = poolOwner;
    }
    if (transactionFees != null) {
      $result.transactionFees = transactionFees;
    }
    if (bakerReward != null) {
      $result.bakerReward = bakerReward;
    }
    if (finalizationReward != null) {
      $result.finalizationReward = finalizationReward;
    }
    return $result;
  }
  BlockSpecialEvent_PaydayPoolReward._() : super();
  factory BlockSpecialEvent_PaydayPoolReward.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent_PaydayPoolReward.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent.PaydayPoolReward', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'poolOwner', subBuilder: BakerId.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'transactionFees', subBuilder: Amount.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'bakerReward', subBuilder: Amount.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'finalizationReward', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_PaydayPoolReward clone() => BlockSpecialEvent_PaydayPoolReward()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent_PaydayPoolReward copyWith(void Function(BlockSpecialEvent_PaydayPoolReward) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent_PaydayPoolReward)) as BlockSpecialEvent_PaydayPoolReward;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_PaydayPoolReward create() => BlockSpecialEvent_PaydayPoolReward._();
  BlockSpecialEvent_PaydayPoolReward createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent_PaydayPoolReward> createRepeated() => $pb.PbList<BlockSpecialEvent_PaydayPoolReward>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent_PaydayPoolReward getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent_PaydayPoolReward>(create);
  static BlockSpecialEvent_PaydayPoolReward? _defaultInstance;

  /// The pool owner (passive delegators when not present).
  @$pb.TagNumber(1)
  BakerId get poolOwner => $_getN(0);
  @$pb.TagNumber(1)
  set poolOwner(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasPoolOwner() => $_has(0);
  @$pb.TagNumber(1)
  void clearPoolOwner() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensurePoolOwner() => $_ensure(0);

  /// Accrued transaction fees for pool.
  @$pb.TagNumber(2)
  Amount get transactionFees => $_getN(1);
  @$pb.TagNumber(2)
  set transactionFees(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTransactionFees() => $_has(1);
  @$pb.TagNumber(2)
  void clearTransactionFees() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureTransactionFees() => $_ensure(1);

  /// Accrued baking rewards for pool.
  @$pb.TagNumber(3)
  Amount get bakerReward => $_getN(2);
  @$pb.TagNumber(3)
  set bakerReward(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasBakerReward() => $_has(2);
  @$pb.TagNumber(3)
  void clearBakerReward() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureBakerReward() => $_ensure(2);

  /// Accrued finalization rewards for pool.
  @$pb.TagNumber(4)
  Amount get finalizationReward => $_getN(3);
  @$pb.TagNumber(4)
  set finalizationReward(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasFinalizationReward() => $_has(3);
  @$pb.TagNumber(4)
  void clearFinalizationReward() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureFinalizationReward() => $_ensure(3);
}

enum BlockSpecialEvent_Event {
  bakingRewards, 
  mint, 
  finalizationRewards, 
  blockReward, 
  paydayFoundationReward, 
  paydayAccountReward, 
  blockAccrueReward, 
  paydayPoolReward, 
  notSet
}

/// A protocol generated event that is not directly caused by a transaction. This
/// includes minting new CCD, rewarding different bakers and delegators, etc.
class BlockSpecialEvent extends $pb.GeneratedMessage {
  factory BlockSpecialEvent({
    BlockSpecialEvent_BakingRewards? bakingRewards,
    BlockSpecialEvent_Mint? mint,
    BlockSpecialEvent_FinalizationRewards? finalizationRewards,
    BlockSpecialEvent_BlockReward? blockReward,
    BlockSpecialEvent_PaydayFoundationReward? paydayFoundationReward,
    BlockSpecialEvent_PaydayAccountReward? paydayAccountReward,
    BlockSpecialEvent_BlockAccrueReward? blockAccrueReward,
    BlockSpecialEvent_PaydayPoolReward? paydayPoolReward,
  }) {
    final $result = create();
    if (bakingRewards != null) {
      $result.bakingRewards = bakingRewards;
    }
    if (mint != null) {
      $result.mint = mint;
    }
    if (finalizationRewards != null) {
      $result.finalizationRewards = finalizationRewards;
    }
    if (blockReward != null) {
      $result.blockReward = blockReward;
    }
    if (paydayFoundationReward != null) {
      $result.paydayFoundationReward = paydayFoundationReward;
    }
    if (paydayAccountReward != null) {
      $result.paydayAccountReward = paydayAccountReward;
    }
    if (blockAccrueReward != null) {
      $result.blockAccrueReward = blockAccrueReward;
    }
    if (paydayPoolReward != null) {
      $result.paydayPoolReward = paydayPoolReward;
    }
    return $result;
  }
  BlockSpecialEvent._() : super();
  factory BlockSpecialEvent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockSpecialEvent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BlockSpecialEvent_Event> _BlockSpecialEvent_EventByTag = {
    1 : BlockSpecialEvent_Event.bakingRewards,
    2 : BlockSpecialEvent_Event.mint,
    3 : BlockSpecialEvent_Event.finalizationRewards,
    4 : BlockSpecialEvent_Event.blockReward,
    5 : BlockSpecialEvent_Event.paydayFoundationReward,
    6 : BlockSpecialEvent_Event.paydayAccountReward,
    7 : BlockSpecialEvent_Event.blockAccrueReward,
    8 : BlockSpecialEvent_Event.paydayPoolReward,
    0 : BlockSpecialEvent_Event.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockSpecialEvent', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 7, 8])
    ..aOM<BlockSpecialEvent_BakingRewards>(1, _omitFieldNames ? '' : 'bakingRewards', subBuilder: BlockSpecialEvent_BakingRewards.create)
    ..aOM<BlockSpecialEvent_Mint>(2, _omitFieldNames ? '' : 'mint', subBuilder: BlockSpecialEvent_Mint.create)
    ..aOM<BlockSpecialEvent_FinalizationRewards>(3, _omitFieldNames ? '' : 'finalizationRewards', subBuilder: BlockSpecialEvent_FinalizationRewards.create)
    ..aOM<BlockSpecialEvent_BlockReward>(4, _omitFieldNames ? '' : 'blockReward', subBuilder: BlockSpecialEvent_BlockReward.create)
    ..aOM<BlockSpecialEvent_PaydayFoundationReward>(5, _omitFieldNames ? '' : 'paydayFoundationReward', subBuilder: BlockSpecialEvent_PaydayFoundationReward.create)
    ..aOM<BlockSpecialEvent_PaydayAccountReward>(6, _omitFieldNames ? '' : 'paydayAccountReward', subBuilder: BlockSpecialEvent_PaydayAccountReward.create)
    ..aOM<BlockSpecialEvent_BlockAccrueReward>(7, _omitFieldNames ? '' : 'blockAccrueReward', subBuilder: BlockSpecialEvent_BlockAccrueReward.create)
    ..aOM<BlockSpecialEvent_PaydayPoolReward>(8, _omitFieldNames ? '' : 'paydayPoolReward', subBuilder: BlockSpecialEvent_PaydayPoolReward.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent clone() => BlockSpecialEvent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockSpecialEvent copyWith(void Function(BlockSpecialEvent) updates) => super.copyWith((message) => updates(message as BlockSpecialEvent)) as BlockSpecialEvent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent create() => BlockSpecialEvent._();
  BlockSpecialEvent createEmptyInstance() => create();
  static $pb.PbList<BlockSpecialEvent> createRepeated() => $pb.PbList<BlockSpecialEvent>();
  @$core.pragma('dart2js:noInline')
  static BlockSpecialEvent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockSpecialEvent>(create);
  static BlockSpecialEvent? _defaultInstance;

  BlockSpecialEvent_Event whichEvent() => _BlockSpecialEvent_EventByTag[$_whichOneof(0)]!;
  void clearEvent() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  BlockSpecialEvent_BakingRewards get bakingRewards => $_getN(0);
  @$pb.TagNumber(1)
  set bakingRewards(BlockSpecialEvent_BakingRewards v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakingRewards() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakingRewards() => clearField(1);
  @$pb.TagNumber(1)
  BlockSpecialEvent_BakingRewards ensureBakingRewards() => $_ensure(0);

  @$pb.TagNumber(2)
  BlockSpecialEvent_Mint get mint => $_getN(1);
  @$pb.TagNumber(2)
  set mint(BlockSpecialEvent_Mint v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasMint() => $_has(1);
  @$pb.TagNumber(2)
  void clearMint() => clearField(2);
  @$pb.TagNumber(2)
  BlockSpecialEvent_Mint ensureMint() => $_ensure(1);

  @$pb.TagNumber(3)
  BlockSpecialEvent_FinalizationRewards get finalizationRewards => $_getN(2);
  @$pb.TagNumber(3)
  set finalizationRewards(BlockSpecialEvent_FinalizationRewards v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasFinalizationRewards() => $_has(2);
  @$pb.TagNumber(3)
  void clearFinalizationRewards() => clearField(3);
  @$pb.TagNumber(3)
  BlockSpecialEvent_FinalizationRewards ensureFinalizationRewards() => $_ensure(2);

  @$pb.TagNumber(4)
  BlockSpecialEvent_BlockReward get blockReward => $_getN(3);
  @$pb.TagNumber(4)
  set blockReward(BlockSpecialEvent_BlockReward v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasBlockReward() => $_has(3);
  @$pb.TagNumber(4)
  void clearBlockReward() => clearField(4);
  @$pb.TagNumber(4)
  BlockSpecialEvent_BlockReward ensureBlockReward() => $_ensure(3);

  @$pb.TagNumber(5)
  BlockSpecialEvent_PaydayFoundationReward get paydayFoundationReward => $_getN(4);
  @$pb.TagNumber(5)
  set paydayFoundationReward(BlockSpecialEvent_PaydayFoundationReward v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasPaydayFoundationReward() => $_has(4);
  @$pb.TagNumber(5)
  void clearPaydayFoundationReward() => clearField(5);
  @$pb.TagNumber(5)
  BlockSpecialEvent_PaydayFoundationReward ensurePaydayFoundationReward() => $_ensure(4);

  @$pb.TagNumber(6)
  BlockSpecialEvent_PaydayAccountReward get paydayAccountReward => $_getN(5);
  @$pb.TagNumber(6)
  set paydayAccountReward(BlockSpecialEvent_PaydayAccountReward v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasPaydayAccountReward() => $_has(5);
  @$pb.TagNumber(6)
  void clearPaydayAccountReward() => clearField(6);
  @$pb.TagNumber(6)
  BlockSpecialEvent_PaydayAccountReward ensurePaydayAccountReward() => $_ensure(5);

  @$pb.TagNumber(7)
  BlockSpecialEvent_BlockAccrueReward get blockAccrueReward => $_getN(6);
  @$pb.TagNumber(7)
  set blockAccrueReward(BlockSpecialEvent_BlockAccrueReward v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasBlockAccrueReward() => $_has(6);
  @$pb.TagNumber(7)
  void clearBlockAccrueReward() => clearField(7);
  @$pb.TagNumber(7)
  BlockSpecialEvent_BlockAccrueReward ensureBlockAccrueReward() => $_ensure(6);

  @$pb.TagNumber(8)
  BlockSpecialEvent_PaydayPoolReward get paydayPoolReward => $_getN(7);
  @$pb.TagNumber(8)
  set paydayPoolReward(BlockSpecialEvent_PaydayPoolReward v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasPaydayPoolReward() => $_has(7);
  @$pb.TagNumber(8)
  void clearPaydayPoolReward() => clearField(8);
  @$pb.TagNumber(8)
  BlockSpecialEvent_PaydayPoolReward ensurePaydayPoolReward() => $_ensure(7);
}

enum PendingUpdate_Effect {
  rootKeys, 
  level1Keys, 
  level2KeysCpv0, 
  level2KeysCpv1, 
  protocol, 
  electionDifficulty, 
  euroPerEnergy, 
  microCcdPerEuro, 
  foundationAccount, 
  mintDistributionCpv0, 
  mintDistributionCpv1, 
  transactionFeeDistribution, 
  gasRewards, 
  poolParametersCpv0, 
  poolParametersCpv1, 
  addAnonymityRevoker, 
  addIdentityProvider, 
  cooldownParameters, 
  timeParameters, 
  gasRewardsCpv2, 
  timeoutParameters, 
  minBlockTime, 
  blockEnergyLimit, 
  finalizationCommitteeParameters, 
  notSet
}

/// A pending update.
class PendingUpdate extends $pb.GeneratedMessage {
  factory PendingUpdate({
    TransactionTime? effectiveTime,
    HigherLevelKeys? rootKeys,
    HigherLevelKeys? level1Keys,
    AuthorizationsV0? level2KeysCpv0,
    AuthorizationsV1? level2KeysCpv1,
    ProtocolUpdate? protocol,
    ElectionDifficulty? electionDifficulty,
    ExchangeRate? euroPerEnergy,
    ExchangeRate? microCcdPerEuro,
    AccountAddress? foundationAccount,
    MintDistributionCpv0? mintDistributionCpv0,
    MintDistributionCpv1? mintDistributionCpv1,
    TransactionFeeDistribution? transactionFeeDistribution,
    GasRewards? gasRewards,
    BakerStakeThreshold? poolParametersCpv0,
    PoolParametersCpv1? poolParametersCpv1,
    ArInfo? addAnonymityRevoker,
    IpInfo? addIdentityProvider,
    CooldownParametersCpv1? cooldownParameters,
    TimeParametersCpv1? timeParameters,
    GasRewardsCpv2? gasRewardsCpv2,
    TimeoutParameters? timeoutParameters,
    Duration? minBlockTime,
    Energy? blockEnergyLimit,
    FinalizationCommitteeParameters? finalizationCommitteeParameters,
  }) {
    final $result = create();
    if (effectiveTime != null) {
      $result.effectiveTime = effectiveTime;
    }
    if (rootKeys != null) {
      $result.rootKeys = rootKeys;
    }
    if (level1Keys != null) {
      $result.level1Keys = level1Keys;
    }
    if (level2KeysCpv0 != null) {
      $result.level2KeysCpv0 = level2KeysCpv0;
    }
    if (level2KeysCpv1 != null) {
      $result.level2KeysCpv1 = level2KeysCpv1;
    }
    if (protocol != null) {
      $result.protocol = protocol;
    }
    if (electionDifficulty != null) {
      $result.electionDifficulty = electionDifficulty;
    }
    if (euroPerEnergy != null) {
      $result.euroPerEnergy = euroPerEnergy;
    }
    if (microCcdPerEuro != null) {
      $result.microCcdPerEuro = microCcdPerEuro;
    }
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    if (mintDistributionCpv0 != null) {
      $result.mintDistributionCpv0 = mintDistributionCpv0;
    }
    if (mintDistributionCpv1 != null) {
      $result.mintDistributionCpv1 = mintDistributionCpv1;
    }
    if (transactionFeeDistribution != null) {
      $result.transactionFeeDistribution = transactionFeeDistribution;
    }
    if (gasRewards != null) {
      $result.gasRewards = gasRewards;
    }
    if (poolParametersCpv0 != null) {
      $result.poolParametersCpv0 = poolParametersCpv0;
    }
    if (poolParametersCpv1 != null) {
      $result.poolParametersCpv1 = poolParametersCpv1;
    }
    if (addAnonymityRevoker != null) {
      $result.addAnonymityRevoker = addAnonymityRevoker;
    }
    if (addIdentityProvider != null) {
      $result.addIdentityProvider = addIdentityProvider;
    }
    if (cooldownParameters != null) {
      $result.cooldownParameters = cooldownParameters;
    }
    if (timeParameters != null) {
      $result.timeParameters = timeParameters;
    }
    if (gasRewardsCpv2 != null) {
      $result.gasRewardsCpv2 = gasRewardsCpv2;
    }
    if (timeoutParameters != null) {
      $result.timeoutParameters = timeoutParameters;
    }
    if (minBlockTime != null) {
      $result.minBlockTime = minBlockTime;
    }
    if (blockEnergyLimit != null) {
      $result.blockEnergyLimit = blockEnergyLimit;
    }
    if (finalizationCommitteeParameters != null) {
      $result.finalizationCommitteeParameters = finalizationCommitteeParameters;
    }
    return $result;
  }
  PendingUpdate._() : super();
  factory PendingUpdate.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PendingUpdate.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, PendingUpdate_Effect> _PendingUpdate_EffectByTag = {
    2 : PendingUpdate_Effect.rootKeys,
    3 : PendingUpdate_Effect.level1Keys,
    4 : PendingUpdate_Effect.level2KeysCpv0,
    5 : PendingUpdate_Effect.level2KeysCpv1,
    6 : PendingUpdate_Effect.protocol,
    7 : PendingUpdate_Effect.electionDifficulty,
    8 : PendingUpdate_Effect.euroPerEnergy,
    9 : PendingUpdate_Effect.microCcdPerEuro,
    10 : PendingUpdate_Effect.foundationAccount,
    11 : PendingUpdate_Effect.mintDistributionCpv0,
    12 : PendingUpdate_Effect.mintDistributionCpv1,
    13 : PendingUpdate_Effect.transactionFeeDistribution,
    14 : PendingUpdate_Effect.gasRewards,
    15 : PendingUpdate_Effect.poolParametersCpv0,
    16 : PendingUpdate_Effect.poolParametersCpv1,
    17 : PendingUpdate_Effect.addAnonymityRevoker,
    18 : PendingUpdate_Effect.addIdentityProvider,
    19 : PendingUpdate_Effect.cooldownParameters,
    20 : PendingUpdate_Effect.timeParameters,
    21 : PendingUpdate_Effect.gasRewardsCpv2,
    22 : PendingUpdate_Effect.timeoutParameters,
    23 : PendingUpdate_Effect.minBlockTime,
    24 : PendingUpdate_Effect.blockEnergyLimit,
    25 : PendingUpdate_Effect.finalizationCommitteeParameters,
    0 : PendingUpdate_Effect.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PendingUpdate', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])
    ..aOM<TransactionTime>(1, _omitFieldNames ? '' : 'effectiveTime', subBuilder: TransactionTime.create)
    ..aOM<HigherLevelKeys>(2, _omitFieldNames ? '' : 'rootKeys', subBuilder: HigherLevelKeys.create)
    ..aOM<HigherLevelKeys>(3, _omitFieldNames ? '' : 'level1Keys', subBuilder: HigherLevelKeys.create)
    ..aOM<AuthorizationsV0>(4, _omitFieldNames ? '' : 'level2KeysCpv0', protoName: 'level2_keys_cpv_0', subBuilder: AuthorizationsV0.create)
    ..aOM<AuthorizationsV1>(5, _omitFieldNames ? '' : 'level2KeysCpv1', protoName: 'level2_keys_cpv_1', subBuilder: AuthorizationsV1.create)
    ..aOM<ProtocolUpdate>(6, _omitFieldNames ? '' : 'protocol', subBuilder: ProtocolUpdate.create)
    ..aOM<ElectionDifficulty>(7, _omitFieldNames ? '' : 'electionDifficulty', subBuilder: ElectionDifficulty.create)
    ..aOM<ExchangeRate>(8, _omitFieldNames ? '' : 'euroPerEnergy', subBuilder: ExchangeRate.create)
    ..aOM<ExchangeRate>(9, _omitFieldNames ? '' : 'microCcdPerEuro', subBuilder: ExchangeRate.create)
    ..aOM<AccountAddress>(10, _omitFieldNames ? '' : 'foundationAccount', subBuilder: AccountAddress.create)
    ..aOM<MintDistributionCpv0>(11, _omitFieldNames ? '' : 'mintDistributionCpv0', protoName: 'mint_distribution_cpv_0', subBuilder: MintDistributionCpv0.create)
    ..aOM<MintDistributionCpv1>(12, _omitFieldNames ? '' : 'mintDistributionCpv1', protoName: 'mint_distribution_cpv_1', subBuilder: MintDistributionCpv1.create)
    ..aOM<TransactionFeeDistribution>(13, _omitFieldNames ? '' : 'transactionFeeDistribution', subBuilder: TransactionFeeDistribution.create)
    ..aOM<GasRewards>(14, _omitFieldNames ? '' : 'gasRewards', subBuilder: GasRewards.create)
    ..aOM<BakerStakeThreshold>(15, _omitFieldNames ? '' : 'poolParametersCpv0', protoName: 'pool_parameters_cpv_0', subBuilder: BakerStakeThreshold.create)
    ..aOM<PoolParametersCpv1>(16, _omitFieldNames ? '' : 'poolParametersCpv1', protoName: 'pool_parameters_cpv_1', subBuilder: PoolParametersCpv1.create)
    ..aOM<ArInfo>(17, _omitFieldNames ? '' : 'addAnonymityRevoker', subBuilder: ArInfo.create)
    ..aOM<IpInfo>(18, _omitFieldNames ? '' : 'addIdentityProvider', subBuilder: IpInfo.create)
    ..aOM<CooldownParametersCpv1>(19, _omitFieldNames ? '' : 'cooldownParameters', subBuilder: CooldownParametersCpv1.create)
    ..aOM<TimeParametersCpv1>(20, _omitFieldNames ? '' : 'timeParameters', subBuilder: TimeParametersCpv1.create)
    ..aOM<GasRewardsCpv2>(21, _omitFieldNames ? '' : 'gasRewardsCpv2', protoName: 'gas_rewards_cpv_2', subBuilder: GasRewardsCpv2.create)
    ..aOM<TimeoutParameters>(22, _omitFieldNames ? '' : 'timeoutParameters', subBuilder: TimeoutParameters.create)
    ..aOM<Duration>(23, _omitFieldNames ? '' : 'minBlockTime', subBuilder: Duration.create)
    ..aOM<Energy>(24, _omitFieldNames ? '' : 'blockEnergyLimit', subBuilder: Energy.create)
    ..aOM<FinalizationCommitteeParameters>(25, _omitFieldNames ? '' : 'finalizationCommitteeParameters', subBuilder: FinalizationCommitteeParameters.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PendingUpdate clone() => PendingUpdate()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PendingUpdate copyWith(void Function(PendingUpdate) updates) => super.copyWith((message) => updates(message as PendingUpdate)) as PendingUpdate;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PendingUpdate create() => PendingUpdate._();
  PendingUpdate createEmptyInstance() => create();
  static $pb.PbList<PendingUpdate> createRepeated() => $pb.PbList<PendingUpdate>();
  @$core.pragma('dart2js:noInline')
  static PendingUpdate getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PendingUpdate>(create);
  static PendingUpdate? _defaultInstance;

  PendingUpdate_Effect whichEffect() => _PendingUpdate_EffectByTag[$_whichOneof(0)]!;
  void clearEffect() => clearField($_whichOneof(0));

  /// The effective time of the update.
  @$pb.TagNumber(1)
  TransactionTime get effectiveTime => $_getN(0);
  @$pb.TagNumber(1)
  set effectiveTime(TransactionTime v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasEffectiveTime() => $_has(0);
  @$pb.TagNumber(1)
  void clearEffectiveTime() => clearField(1);
  @$pb.TagNumber(1)
  TransactionTime ensureEffectiveTime() => $_ensure(0);

  /// Updates to the root keys.
  @$pb.TagNumber(2)
  HigherLevelKeys get rootKeys => $_getN(1);
  @$pb.TagNumber(2)
  set rootKeys(HigherLevelKeys v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRootKeys() => $_has(1);
  @$pb.TagNumber(2)
  void clearRootKeys() => clearField(2);
  @$pb.TagNumber(2)
  HigherLevelKeys ensureRootKeys() => $_ensure(1);

  /// Updates to the level 1 keys.
  @$pb.TagNumber(3)
  HigherLevelKeys get level1Keys => $_getN(2);
  @$pb.TagNumber(3)
  set level1Keys(HigherLevelKeys v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasLevel1Keys() => $_has(2);
  @$pb.TagNumber(3)
  void clearLevel1Keys() => clearField(3);
  @$pb.TagNumber(3)
  HigherLevelKeys ensureLevel1Keys() => $_ensure(2);

  /// Updates to the level 2 keys.
  @$pb.TagNumber(4)
  AuthorizationsV0 get level2KeysCpv0 => $_getN(3);
  @$pb.TagNumber(4)
  set level2KeysCpv0(AuthorizationsV0 v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasLevel2KeysCpv0() => $_has(3);
  @$pb.TagNumber(4)
  void clearLevel2KeysCpv0() => clearField(4);
  @$pb.TagNumber(4)
  AuthorizationsV0 ensureLevel2KeysCpv0() => $_ensure(3);

  /// Updates to the level 2 keys.
  @$pb.TagNumber(5)
  AuthorizationsV1 get level2KeysCpv1 => $_getN(4);
  @$pb.TagNumber(5)
  set level2KeysCpv1(AuthorizationsV1 v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasLevel2KeysCpv1() => $_has(4);
  @$pb.TagNumber(5)
  void clearLevel2KeysCpv1() => clearField(5);
  @$pb.TagNumber(5)
  AuthorizationsV1 ensureLevel2KeysCpv1() => $_ensure(4);

  /// Protocol updates.
  @$pb.TagNumber(6)
  ProtocolUpdate get protocol => $_getN(5);
  @$pb.TagNumber(6)
  set protocol(ProtocolUpdate v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasProtocol() => $_has(5);
  @$pb.TagNumber(6)
  void clearProtocol() => clearField(6);
  @$pb.TagNumber(6)
  ProtocolUpdate ensureProtocol() => $_ensure(5);

  /// Updates to the election difficulty parameter.
  @$pb.TagNumber(7)
  ElectionDifficulty get electionDifficulty => $_getN(6);
  @$pb.TagNumber(7)
  set electionDifficulty(ElectionDifficulty v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasElectionDifficulty() => $_has(6);
  @$pb.TagNumber(7)
  void clearElectionDifficulty() => clearField(7);
  @$pb.TagNumber(7)
  ElectionDifficulty ensureElectionDifficulty() => $_ensure(6);

  /// Updates to the euro:energy exchange rate.
  @$pb.TagNumber(8)
  ExchangeRate get euroPerEnergy => $_getN(7);
  @$pb.TagNumber(8)
  set euroPerEnergy(ExchangeRate v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasEuroPerEnergy() => $_has(7);
  @$pb.TagNumber(8)
  void clearEuroPerEnergy() => clearField(8);
  @$pb.TagNumber(8)
  ExchangeRate ensureEuroPerEnergy() => $_ensure(7);

  /// Updates to the CCD:EUR exchange rate.
  @$pb.TagNumber(9)
  ExchangeRate get microCcdPerEuro => $_getN(8);
  @$pb.TagNumber(9)
  set microCcdPerEuro(ExchangeRate v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasMicroCcdPerEuro() => $_has(8);
  @$pb.TagNumber(9)
  void clearMicroCcdPerEuro() => clearField(9);
  @$pb.TagNumber(9)
  ExchangeRate ensureMicroCcdPerEuro() => $_ensure(8);

  /// Updates to the foundation account.
  @$pb.TagNumber(10)
  AccountAddress get foundationAccount => $_getN(9);
  @$pb.TagNumber(10)
  set foundationAccount(AccountAddress v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasFoundationAccount() => $_has(9);
  @$pb.TagNumber(10)
  void clearFoundationAccount() => clearField(10);
  @$pb.TagNumber(10)
  AccountAddress ensureFoundationAccount() => $_ensure(9);

  /// Updates to the mint distribution. Is only relevant prior to protocol version 4.
  @$pb.TagNumber(11)
  MintDistributionCpv0 get mintDistributionCpv0 => $_getN(10);
  @$pb.TagNumber(11)
  set mintDistributionCpv0(MintDistributionCpv0 v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasMintDistributionCpv0() => $_has(10);
  @$pb.TagNumber(11)
  void clearMintDistributionCpv0() => clearField(11);
  @$pb.TagNumber(11)
  MintDistributionCpv0 ensureMintDistributionCpv0() => $_ensure(10);

  /// The mint distribution was updated. Introduced in protocol version 4.
  @$pb.TagNumber(12)
  MintDistributionCpv1 get mintDistributionCpv1 => $_getN(11);
  @$pb.TagNumber(12)
  set mintDistributionCpv1(MintDistributionCpv1 v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasMintDistributionCpv1() => $_has(11);
  @$pb.TagNumber(12)
  void clearMintDistributionCpv1() => clearField(12);
  @$pb.TagNumber(12)
  MintDistributionCpv1 ensureMintDistributionCpv1() => $_ensure(11);

  /// Updates to the transaction fee distribution.
  @$pb.TagNumber(13)
  TransactionFeeDistribution get transactionFeeDistribution => $_getN(12);
  @$pb.TagNumber(13)
  set transactionFeeDistribution(TransactionFeeDistribution v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasTransactionFeeDistribution() => $_has(12);
  @$pb.TagNumber(13)
  void clearTransactionFeeDistribution() => clearField(13);
  @$pb.TagNumber(13)
  TransactionFeeDistribution ensureTransactionFeeDistribution() => $_ensure(12);

  /// Updates to the GAS rewards.
  @$pb.TagNumber(14)
  GasRewards get gasRewards => $_getN(13);
  @$pb.TagNumber(14)
  set gasRewards(GasRewards v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasGasRewards() => $_has(13);
  @$pb.TagNumber(14)
  void clearGasRewards() => clearField(14);
  @$pb.TagNumber(14)
  GasRewards ensureGasRewards() => $_ensure(13);

  /// Updates baker stake threshold. Is only relevant prior to protocol version 4.
  @$pb.TagNumber(15)
  BakerStakeThreshold get poolParametersCpv0 => $_getN(14);
  @$pb.TagNumber(15)
  set poolParametersCpv0(BakerStakeThreshold v) { setField(15, v); }
  @$pb.TagNumber(15)
  $core.bool hasPoolParametersCpv0() => $_has(14);
  @$pb.TagNumber(15)
  void clearPoolParametersCpv0() => clearField(15);
  @$pb.TagNumber(15)
  BakerStakeThreshold ensurePoolParametersCpv0() => $_ensure(14);

  /// Updates pool parameters. Introduced in protocol version 4.
  @$pb.TagNumber(16)
  PoolParametersCpv1 get poolParametersCpv1 => $_getN(15);
  @$pb.TagNumber(16)
  set poolParametersCpv1(PoolParametersCpv1 v) { setField(16, v); }
  @$pb.TagNumber(16)
  $core.bool hasPoolParametersCpv1() => $_has(15);
  @$pb.TagNumber(16)
  void clearPoolParametersCpv1() => clearField(16);
  @$pb.TagNumber(16)
  PoolParametersCpv1 ensurePoolParametersCpv1() => $_ensure(15);

  /// Adds a new anonymity revoker.
  @$pb.TagNumber(17)
  ArInfo get addAnonymityRevoker => $_getN(16);
  @$pb.TagNumber(17)
  set addAnonymityRevoker(ArInfo v) { setField(17, v); }
  @$pb.TagNumber(17)
  $core.bool hasAddAnonymityRevoker() => $_has(16);
  @$pb.TagNumber(17)
  void clearAddAnonymityRevoker() => clearField(17);
  @$pb.TagNumber(17)
  ArInfo ensureAddAnonymityRevoker() => $_ensure(16);

  /// Adds a new identity provider.
  @$pb.TagNumber(18)
  IpInfo get addIdentityProvider => $_getN(17);
  @$pb.TagNumber(18)
  set addIdentityProvider(IpInfo v) { setField(18, v); }
  @$pb.TagNumber(18)
  $core.bool hasAddIdentityProvider() => $_has(17);
  @$pb.TagNumber(18)
  void clearAddIdentityProvider() => clearField(18);
  @$pb.TagNumber(18)
  IpInfo ensureAddIdentityProvider() => $_ensure(17);

  /// Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.
  @$pb.TagNumber(19)
  CooldownParametersCpv1 get cooldownParameters => $_getN(18);
  @$pb.TagNumber(19)
  set cooldownParameters(CooldownParametersCpv1 v) { setField(19, v); }
  @$pb.TagNumber(19)
  $core.bool hasCooldownParameters() => $_has(18);
  @$pb.TagNumber(19)
  void clearCooldownParameters() => clearField(19);
  @$pb.TagNumber(19)
  CooldownParametersCpv1 ensureCooldownParameters() => $_ensure(18);

  /// Updates to time parameters for chain parameters version 1 introduced in protocol version 4.
  @$pb.TagNumber(20)
  TimeParametersCpv1 get timeParameters => $_getN(19);
  @$pb.TagNumber(20)
  set timeParameters(TimeParametersCpv1 v) { setField(20, v); }
  @$pb.TagNumber(20)
  $core.bool hasTimeParameters() => $_has(19);
  @$pb.TagNumber(20)
  void clearTimeParameters() => clearField(20);
  @$pb.TagNumber(20)
  TimeParametersCpv1 ensureTimeParameters() => $_ensure(19);

  /// Updates to the GAS rewards effective from protocol version 6 (chain parameters version 2).
  @$pb.TagNumber(21)
  GasRewardsCpv2 get gasRewardsCpv2 => $_getN(20);
  @$pb.TagNumber(21)
  set gasRewardsCpv2(GasRewardsCpv2 v) { setField(21, v); }
  @$pb.TagNumber(21)
  $core.bool hasGasRewardsCpv2() => $_has(20);
  @$pb.TagNumber(21)
  void clearGasRewardsCpv2() => clearField(21);
  @$pb.TagNumber(21)
  GasRewardsCpv2 ensureGasRewardsCpv2() => $_ensure(20);

  /// Updates to the consensus timeouts for chain parameters version 2.
  @$pb.TagNumber(22)
  TimeoutParameters get timeoutParameters => $_getN(21);
  @$pb.TagNumber(22)
  set timeoutParameters(TimeoutParameters v) { setField(22, v); }
  @$pb.TagNumber(22)
  $core.bool hasTimeoutParameters() => $_has(21);
  @$pb.TagNumber(22)
  void clearTimeoutParameters() => clearField(22);
  @$pb.TagNumber(22)
  TimeoutParameters ensureTimeoutParameters() => $_ensure(21);

  /// Updates to the the minimum time between blocks for chain parameters version 2.
  @$pb.TagNumber(23)
  Duration get minBlockTime => $_getN(22);
  @$pb.TagNumber(23)
  set minBlockTime(Duration v) { setField(23, v); }
  @$pb.TagNumber(23)
  $core.bool hasMinBlockTime() => $_has(22);
  @$pb.TagNumber(23)
  void clearMinBlockTime() => clearField(23);
  @$pb.TagNumber(23)
  Duration ensureMinBlockTime() => $_ensure(22);

  /// Updates to the block energy limit for chain parameters version 2.
  @$pb.TagNumber(24)
  Energy get blockEnergyLimit => $_getN(23);
  @$pb.TagNumber(24)
  set blockEnergyLimit(Energy v) { setField(24, v); }
  @$pb.TagNumber(24)
  $core.bool hasBlockEnergyLimit() => $_has(23);
  @$pb.TagNumber(24)
  void clearBlockEnergyLimit() => clearField(24);
  @$pb.TagNumber(24)
  Energy ensureBlockEnergyLimit() => $_ensure(23);

  /// Updates to the finalization committee for for chain parameters version 2.
  @$pb.TagNumber(25)
  FinalizationCommitteeParameters get finalizationCommitteeParameters => $_getN(24);
  @$pb.TagNumber(25)
  set finalizationCommitteeParameters(FinalizationCommitteeParameters v) { setField(25, v); }
  @$pb.TagNumber(25)
  $core.bool hasFinalizationCommitteeParameters() => $_has(24);
  @$pb.TagNumber(25)
  void clearFinalizationCommitteeParameters() => clearField(25);
  @$pb.TagNumber(25)
  FinalizationCommitteeParameters ensureFinalizationCommitteeParameters() => $_ensure(24);
}

/// The response for `GetNextUpdateSequenceNumbers`.
class NextUpdateSequenceNumbers extends $pb.GeneratedMessage {
  factory NextUpdateSequenceNumbers({
    SequenceNumber? rootKeys,
    SequenceNumber? level1Keys,
    SequenceNumber? level2Keys,
    SequenceNumber? protocol,
    SequenceNumber? electionDifficulty,
    SequenceNumber? euroPerEnergy,
    SequenceNumber? microCcdPerEuro,
    SequenceNumber? foundationAccount,
    SequenceNumber? mintDistribution,
    SequenceNumber? transactionFeeDistribution,
    SequenceNumber? gasRewards,
    SequenceNumber? poolParameters,
    SequenceNumber? addAnonymityRevoker,
    SequenceNumber? addIdentityProvider,
    SequenceNumber? cooldownParameters,
    SequenceNumber? timeParameters,
    SequenceNumber? timeoutParameters,
    SequenceNumber? minBlockTime,
    SequenceNumber? blockEnergyLimit,
    SequenceNumber? finalizationCommitteeParameters,
  }) {
    final $result = create();
    if (rootKeys != null) {
      $result.rootKeys = rootKeys;
    }
    if (level1Keys != null) {
      $result.level1Keys = level1Keys;
    }
    if (level2Keys != null) {
      $result.level2Keys = level2Keys;
    }
    if (protocol != null) {
      $result.protocol = protocol;
    }
    if (electionDifficulty != null) {
      $result.electionDifficulty = electionDifficulty;
    }
    if (euroPerEnergy != null) {
      $result.euroPerEnergy = euroPerEnergy;
    }
    if (microCcdPerEuro != null) {
      $result.microCcdPerEuro = microCcdPerEuro;
    }
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    if (mintDistribution != null) {
      $result.mintDistribution = mintDistribution;
    }
    if (transactionFeeDistribution != null) {
      $result.transactionFeeDistribution = transactionFeeDistribution;
    }
    if (gasRewards != null) {
      $result.gasRewards = gasRewards;
    }
    if (poolParameters != null) {
      $result.poolParameters = poolParameters;
    }
    if (addAnonymityRevoker != null) {
      $result.addAnonymityRevoker = addAnonymityRevoker;
    }
    if (addIdentityProvider != null) {
      $result.addIdentityProvider = addIdentityProvider;
    }
    if (cooldownParameters != null) {
      $result.cooldownParameters = cooldownParameters;
    }
    if (timeParameters != null) {
      $result.timeParameters = timeParameters;
    }
    if (timeoutParameters != null) {
      $result.timeoutParameters = timeoutParameters;
    }
    if (minBlockTime != null) {
      $result.minBlockTime = minBlockTime;
    }
    if (blockEnergyLimit != null) {
      $result.blockEnergyLimit = blockEnergyLimit;
    }
    if (finalizationCommitteeParameters != null) {
      $result.finalizationCommitteeParameters = finalizationCommitteeParameters;
    }
    return $result;
  }
  NextUpdateSequenceNumbers._() : super();
  factory NextUpdateSequenceNumbers.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NextUpdateSequenceNumbers.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NextUpdateSequenceNumbers', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<SequenceNumber>(1, _omitFieldNames ? '' : 'rootKeys', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(2, _omitFieldNames ? '' : 'level1Keys', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(3, _omitFieldNames ? '' : 'level2Keys', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(4, _omitFieldNames ? '' : 'protocol', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(5, _omitFieldNames ? '' : 'electionDifficulty', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(6, _omitFieldNames ? '' : 'euroPerEnergy', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(7, _omitFieldNames ? '' : 'microCcdPerEuro', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(8, _omitFieldNames ? '' : 'foundationAccount', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(9, _omitFieldNames ? '' : 'mintDistribution', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(10, _omitFieldNames ? '' : 'transactionFeeDistribution', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(11, _omitFieldNames ? '' : 'gasRewards', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(12, _omitFieldNames ? '' : 'poolParameters', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(13, _omitFieldNames ? '' : 'addAnonymityRevoker', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(14, _omitFieldNames ? '' : 'addIdentityProvider', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(15, _omitFieldNames ? '' : 'cooldownParameters', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(16, _omitFieldNames ? '' : 'timeParameters', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(17, _omitFieldNames ? '' : 'timeoutParameters', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(18, _omitFieldNames ? '' : 'minBlockTime', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(19, _omitFieldNames ? '' : 'blockEnergyLimit', subBuilder: SequenceNumber.create)
    ..aOM<SequenceNumber>(20, _omitFieldNames ? '' : 'finalizationCommitteeParameters', subBuilder: SequenceNumber.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NextUpdateSequenceNumbers clone() => NextUpdateSequenceNumbers()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NextUpdateSequenceNumbers copyWith(void Function(NextUpdateSequenceNumbers) updates) => super.copyWith((message) => updates(message as NextUpdateSequenceNumbers)) as NextUpdateSequenceNumbers;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NextUpdateSequenceNumbers create() => NextUpdateSequenceNumbers._();
  NextUpdateSequenceNumbers createEmptyInstance() => create();
  static $pb.PbList<NextUpdateSequenceNumbers> createRepeated() => $pb.PbList<NextUpdateSequenceNumbers>();
  @$core.pragma('dart2js:noInline')
  static NextUpdateSequenceNumbers getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NextUpdateSequenceNumbers>(create);
  static NextUpdateSequenceNumbers? _defaultInstance;

  /// Updates to the root keys.
  @$pb.TagNumber(1)
  SequenceNumber get rootKeys => $_getN(0);
  @$pb.TagNumber(1)
  set rootKeys(SequenceNumber v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRootKeys() => $_has(0);
  @$pb.TagNumber(1)
  void clearRootKeys() => clearField(1);
  @$pb.TagNumber(1)
  SequenceNumber ensureRootKeys() => $_ensure(0);

  /// Updates to the level 1 keys.
  @$pb.TagNumber(2)
  SequenceNumber get level1Keys => $_getN(1);
  @$pb.TagNumber(2)
  set level1Keys(SequenceNumber v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasLevel1Keys() => $_has(1);
  @$pb.TagNumber(2)
  void clearLevel1Keys() => clearField(2);
  @$pb.TagNumber(2)
  SequenceNumber ensureLevel1Keys() => $_ensure(1);

  /// Updates to the level 2 keys.
  @$pb.TagNumber(3)
  SequenceNumber get level2Keys => $_getN(2);
  @$pb.TagNumber(3)
  set level2Keys(SequenceNumber v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasLevel2Keys() => $_has(2);
  @$pb.TagNumber(3)
  void clearLevel2Keys() => clearField(3);
  @$pb.TagNumber(3)
  SequenceNumber ensureLevel2Keys() => $_ensure(2);

  /// Protocol updates.
  @$pb.TagNumber(4)
  SequenceNumber get protocol => $_getN(3);
  @$pb.TagNumber(4)
  set protocol(SequenceNumber v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasProtocol() => $_has(3);
  @$pb.TagNumber(4)
  void clearProtocol() => clearField(4);
  @$pb.TagNumber(4)
  SequenceNumber ensureProtocol() => $_ensure(3);

  /// Updates to the election difficulty parameter.
  @$pb.TagNumber(5)
  SequenceNumber get electionDifficulty => $_getN(4);
  @$pb.TagNumber(5)
  set electionDifficulty(SequenceNumber v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasElectionDifficulty() => $_has(4);
  @$pb.TagNumber(5)
  void clearElectionDifficulty() => clearField(5);
  @$pb.TagNumber(5)
  SequenceNumber ensureElectionDifficulty() => $_ensure(4);

  /// Updates to the euro:energy exchange rate.
  @$pb.TagNumber(6)
  SequenceNumber get euroPerEnergy => $_getN(5);
  @$pb.TagNumber(6)
  set euroPerEnergy(SequenceNumber v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasEuroPerEnergy() => $_has(5);
  @$pb.TagNumber(6)
  void clearEuroPerEnergy() => clearField(6);
  @$pb.TagNumber(6)
  SequenceNumber ensureEuroPerEnergy() => $_ensure(5);

  /// Updates to the CCD:EUR exchange rate.
  @$pb.TagNumber(7)
  SequenceNumber get microCcdPerEuro => $_getN(6);
  @$pb.TagNumber(7)
  set microCcdPerEuro(SequenceNumber v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasMicroCcdPerEuro() => $_has(6);
  @$pb.TagNumber(7)
  void clearMicroCcdPerEuro() => clearField(7);
  @$pb.TagNumber(7)
  SequenceNumber ensureMicroCcdPerEuro() => $_ensure(6);

  /// Updates to the foundation account.
  @$pb.TagNumber(8)
  SequenceNumber get foundationAccount => $_getN(7);
  @$pb.TagNumber(8)
  set foundationAccount(SequenceNumber v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasFoundationAccount() => $_has(7);
  @$pb.TagNumber(8)
  void clearFoundationAccount() => clearField(8);
  @$pb.TagNumber(8)
  SequenceNumber ensureFoundationAccount() => $_ensure(7);

  /// Updates to the mint distribution.
  @$pb.TagNumber(9)
  SequenceNumber get mintDistribution => $_getN(8);
  @$pb.TagNumber(9)
  set mintDistribution(SequenceNumber v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasMintDistribution() => $_has(8);
  @$pb.TagNumber(9)
  void clearMintDistribution() => clearField(9);
  @$pb.TagNumber(9)
  SequenceNumber ensureMintDistribution() => $_ensure(8);

  /// Updates to the transaction fee distribution.
  @$pb.TagNumber(10)
  SequenceNumber get transactionFeeDistribution => $_getN(9);
  @$pb.TagNumber(10)
  set transactionFeeDistribution(SequenceNumber v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasTransactionFeeDistribution() => $_has(9);
  @$pb.TagNumber(10)
  void clearTransactionFeeDistribution() => clearField(10);
  @$pb.TagNumber(10)
  SequenceNumber ensureTransactionFeeDistribution() => $_ensure(9);

  /// Updates to the GAS rewards.
  @$pb.TagNumber(11)
  SequenceNumber get gasRewards => $_getN(10);
  @$pb.TagNumber(11)
  set gasRewards(SequenceNumber v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasGasRewards() => $_has(10);
  @$pb.TagNumber(11)
  void clearGasRewards() => clearField(11);
  @$pb.TagNumber(11)
  SequenceNumber ensureGasRewards() => $_ensure(10);

  /// Updates pool parameters.
  @$pb.TagNumber(12)
  SequenceNumber get poolParameters => $_getN(11);
  @$pb.TagNumber(12)
  set poolParameters(SequenceNumber v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasPoolParameters() => $_has(11);
  @$pb.TagNumber(12)
  void clearPoolParameters() => clearField(12);
  @$pb.TagNumber(12)
  SequenceNumber ensurePoolParameters() => $_ensure(11);

  /// Adds a new anonymity revoker.
  @$pb.TagNumber(13)
  SequenceNumber get addAnonymityRevoker => $_getN(12);
  @$pb.TagNumber(13)
  set addAnonymityRevoker(SequenceNumber v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasAddAnonymityRevoker() => $_has(12);
  @$pb.TagNumber(13)
  void clearAddAnonymityRevoker() => clearField(13);
  @$pb.TagNumber(13)
  SequenceNumber ensureAddAnonymityRevoker() => $_ensure(12);

  /// Adds a new identity provider.
  @$pb.TagNumber(14)
  SequenceNumber get addIdentityProvider => $_getN(13);
  @$pb.TagNumber(14)
  set addIdentityProvider(SequenceNumber v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasAddIdentityProvider() => $_has(13);
  @$pb.TagNumber(14)
  void clearAddIdentityProvider() => clearField(14);
  @$pb.TagNumber(14)
  SequenceNumber ensureAddIdentityProvider() => $_ensure(13);

  /// Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.
  @$pb.TagNumber(15)
  SequenceNumber get cooldownParameters => $_getN(14);
  @$pb.TagNumber(15)
  set cooldownParameters(SequenceNumber v) { setField(15, v); }
  @$pb.TagNumber(15)
  $core.bool hasCooldownParameters() => $_has(14);
  @$pb.TagNumber(15)
  void clearCooldownParameters() => clearField(15);
  @$pb.TagNumber(15)
  SequenceNumber ensureCooldownParameters() => $_ensure(14);

  /// Updates to time parameters for chain parameters version 1 introduced in protocol version 4.
  @$pb.TagNumber(16)
  SequenceNumber get timeParameters => $_getN(15);
  @$pb.TagNumber(16)
  set timeParameters(SequenceNumber v) { setField(16, v); }
  @$pb.TagNumber(16)
  $core.bool hasTimeParameters() => $_has(15);
  @$pb.TagNumber(16)
  void clearTimeParameters() => clearField(16);
  @$pb.TagNumber(16)
  SequenceNumber ensureTimeParameters() => $_ensure(15);

  /// Updates to the timeout parameters
  @$pb.TagNumber(17)
  SequenceNumber get timeoutParameters => $_getN(16);
  @$pb.TagNumber(17)
  set timeoutParameters(SequenceNumber v) { setField(17, v); }
  @$pb.TagNumber(17)
  $core.bool hasTimeoutParameters() => $_has(16);
  @$pb.TagNumber(17)
  void clearTimeoutParameters() => clearField(17);
  @$pb.TagNumber(17)
  SequenceNumber ensureTimeoutParameters() => $_ensure(16);

  /// Updates to the the minimum time between blocks for chain parameters version 2.
  @$pb.TagNumber(18)
  SequenceNumber get minBlockTime => $_getN(17);
  @$pb.TagNumber(18)
  set minBlockTime(SequenceNumber v) { setField(18, v); }
  @$pb.TagNumber(18)
  $core.bool hasMinBlockTime() => $_has(17);
  @$pb.TagNumber(18)
  void clearMinBlockTime() => clearField(18);
  @$pb.TagNumber(18)
  SequenceNumber ensureMinBlockTime() => $_ensure(17);

  /// Updates to the block energy limit for chain parameters version 2.
  @$pb.TagNumber(19)
  SequenceNumber get blockEnergyLimit => $_getN(18);
  @$pb.TagNumber(19)
  set blockEnergyLimit(SequenceNumber v) { setField(19, v); }
  @$pb.TagNumber(19)
  $core.bool hasBlockEnergyLimit() => $_has(18);
  @$pb.TagNumber(19)
  void clearBlockEnergyLimit() => clearField(19);
  @$pb.TagNumber(19)
  SequenceNumber ensureBlockEnergyLimit() => $_ensure(18);

  /// Updates to the finalization committee parameters
  @$pb.TagNumber(20)
  SequenceNumber get finalizationCommitteeParameters => $_getN(19);
  @$pb.TagNumber(20)
  set finalizationCommitteeParameters(SequenceNumber v) { setField(20, v); }
  @$pb.TagNumber(20)
  $core.bool hasFinalizationCommitteeParameters() => $_has(19);
  @$pb.TagNumber(20)
  void clearFinalizationCommitteeParameters() => clearField(20);
  @$pb.TagNumber(20)
  SequenceNumber ensureFinalizationCommitteeParameters() => $_ensure(19);
}

/// A request to send a new block item to the chain.
/// An IP address
class IpAddress extends $pb.GeneratedMessage {
  factory IpAddress({
    $core.String? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  IpAddress._() : super();
  factory IpAddress.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory IpAddress.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'IpAddress', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'value')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  IpAddress clone() => IpAddress()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  IpAddress copyWith(void Function(IpAddress) updates) => super.copyWith((message) => updates(message as IpAddress)) as IpAddress;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static IpAddress create() => IpAddress._();
  IpAddress createEmptyInstance() => create();
  static $pb.PbList<IpAddress> createRepeated() => $pb.PbList<IpAddress>();
  @$core.pragma('dart2js:noInline')
  static IpAddress getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<IpAddress>(create);
  static IpAddress? _defaultInstance;

  @$pb.TagNumber(1)
  $core.String get value => $_getSZ(0);
  @$pb.TagNumber(1)
  set value($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A port
/// Valid port numbers are expected thus
/// the value is expected to be in the range (0..u16::MAX).
class Port extends $pb.GeneratedMessage {
  factory Port({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Port._() : super();
  factory Port.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Port.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Port', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Port clone() => Port()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Port copyWith(void Function(Port) updates) => super.copyWith((message) => updates(message as Port)) as Port;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Port create() => Port._();
  Port createEmptyInstance() => create();
  static $pb.PbList<Port> createRepeated() => $pb.PbList<Port>();
  @$core.pragma('dart2js:noInline')
  static Port getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Port>(create);
  static Port? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A socket address consisting of
/// an IP + port.
class IpSocketAddress extends $pb.GeneratedMessage {
  factory IpSocketAddress({
    IpAddress? ip,
    Port? port,
  }) {
    final $result = create();
    if (ip != null) {
      $result.ip = ip;
    }
    if (port != null) {
      $result.port = port;
    }
    return $result;
  }
  IpSocketAddress._() : super();
  factory IpSocketAddress.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory IpSocketAddress.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'IpSocketAddress', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<IpAddress>(1, _omitFieldNames ? '' : 'ip', subBuilder: IpAddress.create)
    ..aOM<Port>(2, _omitFieldNames ? '' : 'port', subBuilder: Port.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  IpSocketAddress clone() => IpSocketAddress()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  IpSocketAddress copyWith(void Function(IpSocketAddress) updates) => super.copyWith((message) => updates(message as IpSocketAddress)) as IpSocketAddress;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static IpSocketAddress create() => IpSocketAddress._();
  IpSocketAddress createEmptyInstance() => create();
  static $pb.PbList<IpSocketAddress> createRepeated() => $pb.PbList<IpSocketAddress>();
  @$core.pragma('dart2js:noInline')
  static IpSocketAddress getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<IpSocketAddress>(create);
  static IpSocketAddress? _defaultInstance;

  @$pb.TagNumber(1)
  IpAddress get ip => $_getN(0);
  @$pb.TagNumber(1)
  set ip(IpAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasIp() => $_has(0);
  @$pb.TagNumber(1)
  void clearIp() => clearField(1);
  @$pb.TagNumber(1)
  IpAddress ensureIp() => $_ensure(0);

  @$pb.TagNumber(2)
  Port get port => $_getN(1);
  @$pb.TagNumber(2)
  set port(Port v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasPort() => $_has(1);
  @$pb.TagNumber(2)
  void clearPort() => clearField(2);
  @$pb.TagNumber(2)
  Port ensurePort() => $_ensure(1);
}

/// A peer id
/// An identifier that the peer wants to be
/// be recoknized by.
/// The underlying value is simply a u64.
/// Note. There is no authenticity of the peer id and
/// as such it is only used for logging purposes.
class PeerId extends $pb.GeneratedMessage {
  factory PeerId({
    $core.String? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  PeerId._() : super();
  factory PeerId.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PeerId.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PeerId', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'value')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PeerId clone() => PeerId()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PeerId copyWith(void Function(PeerId) updates) => super.copyWith((message) => updates(message as PeerId)) as PeerId;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PeerId create() => PeerId._();
  PeerId createEmptyInstance() => create();
  static $pb.PbList<PeerId> createRepeated() => $pb.PbList<PeerId>();
  @$core.pragma('dart2js:noInline')
  static PeerId getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PeerId>(create);
  static PeerId? _defaultInstance;

  @$pb.TagNumber(1)
  $core.String get value => $_getSZ(0);
  @$pb.TagNumber(1)
  set value($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A banned peer
class BannedPeer extends $pb.GeneratedMessage {
  factory BannedPeer({
    IpAddress? ipAddress,
  }) {
    final $result = create();
    if (ipAddress != null) {
      $result.ipAddress = ipAddress;
    }
    return $result;
  }
  BannedPeer._() : super();
  factory BannedPeer.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BannedPeer.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BannedPeer', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<IpAddress>(1, _omitFieldNames ? '' : 'ipAddress', subBuilder: IpAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BannedPeer clone() => BannedPeer()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BannedPeer copyWith(void Function(BannedPeer) updates) => super.copyWith((message) => updates(message as BannedPeer)) as BannedPeer;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BannedPeer create() => BannedPeer._();
  BannedPeer createEmptyInstance() => create();
  static $pb.PbList<BannedPeer> createRepeated() => $pb.PbList<BannedPeer>();
  @$core.pragma('dart2js:noInline')
  static BannedPeer getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BannedPeer>(create);
  static BannedPeer? _defaultInstance;

  /// The IP address of the banned peer.
  @$pb.TagNumber(1)
  IpAddress get ipAddress => $_getN(0);
  @$pb.TagNumber(1)
  set ipAddress(IpAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasIpAddress() => $_has(0);
  @$pb.TagNumber(1)
  void clearIpAddress() => clearField(1);
  @$pb.TagNumber(1)
  IpAddress ensureIpAddress() => $_ensure(0);
}

/// The banned peers given by
/// their IP addresses.
class BannedPeers extends $pb.GeneratedMessage {
  factory BannedPeers({
    $core.Iterable<BannedPeer>? peers,
  }) {
    final $result = create();
    if (peers != null) {
      $result.peers.addAll(peers);
    }
    return $result;
  }
  BannedPeers._() : super();
  factory BannedPeers.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BannedPeers.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BannedPeers', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<BannedPeer>(1, _omitFieldNames ? '' : 'peers', $pb.PbFieldType.PM, subBuilder: BannedPeer.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BannedPeers clone() => BannedPeers()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BannedPeers copyWith(void Function(BannedPeers) updates) => super.copyWith((message) => updates(message as BannedPeers)) as BannedPeers;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BannedPeers create() => BannedPeers._();
  BannedPeers createEmptyInstance() => create();
  static $pb.PbList<BannedPeers> createRepeated() => $pb.PbList<BannedPeers>();
  @$core.pragma('dart2js:noInline')
  static BannedPeers getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BannedPeers>(create);
  static BannedPeers? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<BannedPeer> get peers => $_getList(0);
}

/// A peer to ban specified by its IP.
/// Note. This will ban all peers located behind the
/// specified IP even though they are using different ports.
class PeerToBan extends $pb.GeneratedMessage {
  factory PeerToBan({
    IpAddress? ipAddress,
  }) {
    final $result = create();
    if (ipAddress != null) {
      $result.ipAddress = ipAddress;
    }
    return $result;
  }
  PeerToBan._() : super();
  factory PeerToBan.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PeerToBan.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PeerToBan', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<IpAddress>(1, _omitFieldNames ? '' : 'ipAddress', subBuilder: IpAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PeerToBan clone() => PeerToBan()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PeerToBan copyWith(void Function(PeerToBan) updates) => super.copyWith((message) => updates(message as PeerToBan)) as PeerToBan;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PeerToBan create() => PeerToBan._();
  PeerToBan createEmptyInstance() => create();
  static $pb.PbList<PeerToBan> createRepeated() => $pb.PbList<PeerToBan>();
  @$core.pragma('dart2js:noInline')
  static PeerToBan getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PeerToBan>(create);
  static PeerToBan? _defaultInstance;

  @$pb.TagNumber(1)
  IpAddress get ipAddress => $_getN(0);
  @$pb.TagNumber(1)
  set ipAddress(IpAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasIpAddress() => $_has(0);
  @$pb.TagNumber(1)
  void clearIpAddress() => clearField(1);
  @$pb.TagNumber(1)
  IpAddress ensureIpAddress() => $_ensure(0);
}

/// Request to enable dumping of network packages.
class DumpRequest extends $pb.GeneratedMessage {
  factory DumpRequest({
    $core.String? file,
    $core.bool? raw,
  }) {
    final $result = create();
    if (file != null) {
      $result.file = file;
    }
    if (raw != null) {
      $result.raw = raw;
    }
    return $result;
  }
  DumpRequest._() : super();
  factory DumpRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DumpRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DumpRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'file')
    ..aOB(2, _omitFieldNames ? '' : 'raw')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DumpRequest clone() => DumpRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DumpRequest copyWith(void Function(DumpRequest) updates) => super.copyWith((message) => updates(message as DumpRequest)) as DumpRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DumpRequest create() => DumpRequest._();
  DumpRequest createEmptyInstance() => create();
  static $pb.PbList<DumpRequest> createRepeated() => $pb.PbList<DumpRequest>();
  @$core.pragma('dart2js:noInline')
  static DumpRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DumpRequest>(create);
  static DumpRequest? _defaultInstance;

  /// Which file to dump the packages into.
  /// Requires a valid path.
  @$pb.TagNumber(1)
  $core.String get file => $_getSZ(0);
  @$pb.TagNumber(1)
  set file($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasFile() => $_has(0);
  @$pb.TagNumber(1)
  void clearFile() => clearField(1);

  /// Whether the node should dump raw packages.
  @$pb.TagNumber(2)
  $core.bool get raw => $_getBF(1);
  @$pb.TagNumber(2)
  set raw($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasRaw() => $_has(1);
  @$pb.TagNumber(2)
  void clearRaw() => clearField(2);
}

/// Network statistics for the peer
class PeersInfo_Peer_NetworkStats extends $pb.GeneratedMessage {
  factory PeersInfo_Peer_NetworkStats({
    $fixnum.Int64? packetsSent,
    $fixnum.Int64? packetsReceived,
    $fixnum.Int64? latency,
  }) {
    final $result = create();
    if (packetsSent != null) {
      $result.packetsSent = packetsSent;
    }
    if (packetsReceived != null) {
      $result.packetsReceived = packetsReceived;
    }
    if (latency != null) {
      $result.latency = latency;
    }
    return $result;
  }
  PeersInfo_Peer_NetworkStats._() : super();
  factory PeersInfo_Peer_NetworkStats.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PeersInfo_Peer_NetworkStats.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PeersInfo.Peer.NetworkStats', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'packetsSent', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..a<$fixnum.Int64>(3, _omitFieldNames ? '' : 'packetsReceived', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..a<$fixnum.Int64>(4, _omitFieldNames ? '' : 'latency', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PeersInfo_Peer_NetworkStats clone() => PeersInfo_Peer_NetworkStats()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PeersInfo_Peer_NetworkStats copyWith(void Function(PeersInfo_Peer_NetworkStats) updates) => super.copyWith((message) => updates(message as PeersInfo_Peer_NetworkStats)) as PeersInfo_Peer_NetworkStats;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PeersInfo_Peer_NetworkStats create() => PeersInfo_Peer_NetworkStats._();
  PeersInfo_Peer_NetworkStats createEmptyInstance() => create();
  static $pb.PbList<PeersInfo_Peer_NetworkStats> createRepeated() => $pb.PbList<PeersInfo_Peer_NetworkStats>();
  @$core.pragma('dart2js:noInline')
  static PeersInfo_Peer_NetworkStats getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PeersInfo_Peer_NetworkStats>(create);
  static PeersInfo_Peer_NetworkStats? _defaultInstance;

  /// The number of messages sent to the peer.
  /// Packets are blocks, transactions, catchup messages, finalization records
  /// and network messages such as pings and peer requests.
  @$pb.TagNumber(2)
  $fixnum.Int64 get packetsSent => $_getI64(0);
  @$pb.TagNumber(2)
  set packetsSent($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(2)
  $core.bool hasPacketsSent() => $_has(0);
  @$pb.TagNumber(2)
  void clearPacketsSent() => clearField(2);

  /// The number of messages received from the peer.
  /// Packets are blocks, transactions, catchup messages, finalization records
  /// and network messages such as pings and peer requests.
  @$pb.TagNumber(3)
  $fixnum.Int64 get packetsReceived => $_getI64(1);
  @$pb.TagNumber(3)
  set packetsReceived($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(3)
  $core.bool hasPacketsReceived() => $_has(1);
  @$pb.TagNumber(3)
  void clearPacketsReceived() => clearField(3);

  /// The connection latency (i.e., ping time) in milliseconds.
  @$pb.TagNumber(4)
  $fixnum.Int64 get latency => $_getI64(2);
  @$pb.TagNumber(4)
  set latency($fixnum.Int64 v) { $_setInt64(2, v); }
  @$pb.TagNumber(4)
  $core.bool hasLatency() => $_has(2);
  @$pb.TagNumber(4)
  void clearLatency() => clearField(4);
}

enum PeersInfo_Peer_ConsensusInfo {
  bootstrapper, 
  nodeCatchupStatus, 
  notSet
}

/// A peer that the node is connected to.
class PeersInfo_Peer extends $pb.GeneratedMessage {
  factory PeersInfo_Peer({
    PeerId? peerId,
    IpSocketAddress? socketAddress,
    PeersInfo_Peer_NetworkStats? networkStats,
    Empty? bootstrapper,
    PeersInfo_Peer_CatchupStatus? nodeCatchupStatus,
  }) {
    final $result = create();
    if (peerId != null) {
      $result.peerId = peerId;
    }
    if (socketAddress != null) {
      $result.socketAddress = socketAddress;
    }
    if (networkStats != null) {
      $result.networkStats = networkStats;
    }
    if (bootstrapper != null) {
      $result.bootstrapper = bootstrapper;
    }
    if (nodeCatchupStatus != null) {
      $result.nodeCatchupStatus = nodeCatchupStatus;
    }
    return $result;
  }
  PeersInfo_Peer._() : super();
  factory PeersInfo_Peer.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PeersInfo_Peer.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, PeersInfo_Peer_ConsensusInfo> _PeersInfo_Peer_ConsensusInfoByTag = {
    4 : PeersInfo_Peer_ConsensusInfo.bootstrapper,
    5 : PeersInfo_Peer_ConsensusInfo.nodeCatchupStatus,
    0 : PeersInfo_Peer_ConsensusInfo.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PeersInfo.Peer', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [4, 5])
    ..aOM<PeerId>(1, _omitFieldNames ? '' : 'peerId', subBuilder: PeerId.create)
    ..aOM<IpSocketAddress>(2, _omitFieldNames ? '' : 'socketAddress', subBuilder: IpSocketAddress.create)
    ..aOM<PeersInfo_Peer_NetworkStats>(3, _omitFieldNames ? '' : 'networkStats', subBuilder: PeersInfo_Peer_NetworkStats.create)
    ..aOM<Empty>(4, _omitFieldNames ? '' : 'bootstrapper', subBuilder: Empty.create)
    ..e<PeersInfo_Peer_CatchupStatus>(5, _omitFieldNames ? '' : 'nodeCatchupStatus', $pb.PbFieldType.OE, defaultOrMaker: PeersInfo_Peer_CatchupStatus.UPTODATE, valueOf: PeersInfo_Peer_CatchupStatus.valueOf, enumValues: PeersInfo_Peer_CatchupStatus.values)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PeersInfo_Peer clone() => PeersInfo_Peer()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PeersInfo_Peer copyWith(void Function(PeersInfo_Peer) updates) => super.copyWith((message) => updates(message as PeersInfo_Peer)) as PeersInfo_Peer;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PeersInfo_Peer create() => PeersInfo_Peer._();
  PeersInfo_Peer createEmptyInstance() => create();
  static $pb.PbList<PeersInfo_Peer> createRepeated() => $pb.PbList<PeersInfo_Peer>();
  @$core.pragma('dart2js:noInline')
  static PeersInfo_Peer getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PeersInfo_Peer>(create);
  static PeersInfo_Peer? _defaultInstance;

  PeersInfo_Peer_ConsensusInfo whichConsensusInfo() => _PeersInfo_Peer_ConsensusInfoByTag[$_whichOneof(0)]!;
  void clearConsensusInfo() => clearField($_whichOneof(0));

  /// The identifier of the peer that it
  /// wishes to be identified by.
  @$pb.TagNumber(1)
  PeerId get peerId => $_getN(0);
  @$pb.TagNumber(1)
  set peerId(PeerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasPeerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearPeerId() => clearField(1);
  @$pb.TagNumber(1)
  PeerId ensurePeerId() => $_ensure(0);

  /// The port of the peer.
  @$pb.TagNumber(2)
  IpSocketAddress get socketAddress => $_getN(1);
  @$pb.TagNumber(2)
  set socketAddress(IpSocketAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasSocketAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearSocketAddress() => clearField(2);
  @$pb.TagNumber(2)
  IpSocketAddress ensureSocketAddress() => $_ensure(1);

  /// Network related statistics for the peer.
  @$pb.TagNumber(3)
  PeersInfo_Peer_NetworkStats get networkStats => $_getN(2);
  @$pb.TagNumber(3)
  set networkStats(PeersInfo_Peer_NetworkStats v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasNetworkStats() => $_has(2);
  @$pb.TagNumber(3)
  void clearNetworkStats() => clearField(3);
  @$pb.TagNumber(3)
  PeersInfo_Peer_NetworkStats ensureNetworkStats() => $_ensure(2);

  /// The peer is of type `Bootstrapper` is not participating in consensus
  /// and thus has no catchup status.
  @$pb.TagNumber(4)
  Empty get bootstrapper => $_getN(3);
  @$pb.TagNumber(4)
  set bootstrapper(Empty v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasBootstrapper() => $_has(3);
  @$pb.TagNumber(4)
  void clearBootstrapper() => clearField(4);
  @$pb.TagNumber(4)
  Empty ensureBootstrapper() => $_ensure(3);

  /// The peer is a regular node and have
  /// an associated catchup status.
  @$pb.TagNumber(5)
  PeersInfo_Peer_CatchupStatus get nodeCatchupStatus => $_getN(4);
  @$pb.TagNumber(5)
  set nodeCatchupStatus(PeersInfo_Peer_CatchupStatus v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasNodeCatchupStatus() => $_has(4);
  @$pb.TagNumber(5)
  void clearNodeCatchupStatus() => clearField(5);
}

/// Peers and their associated network related statistics
class PeersInfo extends $pb.GeneratedMessage {
  factory PeersInfo({
    $core.Iterable<PeersInfo_Peer>? peers,
  }) {
    final $result = create();
    if (peers != null) {
      $result.peers.addAll(peers);
    }
    return $result;
  }
  PeersInfo._() : super();
  factory PeersInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PeersInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PeersInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..pc<PeersInfo_Peer>(1, _omitFieldNames ? '' : 'peers', $pb.PbFieldType.PM, subBuilder: PeersInfo_Peer.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PeersInfo clone() => PeersInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PeersInfo copyWith(void Function(PeersInfo) updates) => super.copyWith((message) => updates(message as PeersInfo)) as PeersInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PeersInfo create() => PeersInfo._();
  PeersInfo createEmptyInstance() => create();
  static $pb.PbList<PeersInfo> createRepeated() => $pb.PbList<PeersInfo>();
  @$core.pragma('dart2js:noInline')
  static PeersInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PeersInfo>(create);
  static PeersInfo? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<PeersInfo_Peer> get peers => $_getList(0);
}

/// Network related information of the node.
class NodeInfo_NetworkInfo extends $pb.GeneratedMessage {
  factory NodeInfo_NetworkInfo({
    PeerId? nodeId,
    $fixnum.Int64? peerTotalSent,
    $fixnum.Int64? peerTotalReceived,
    $fixnum.Int64? avgBpsIn,
    $fixnum.Int64? avgBpsOut,
  }) {
    final $result = create();
    if (nodeId != null) {
      $result.nodeId = nodeId;
    }
    if (peerTotalSent != null) {
      $result.peerTotalSent = peerTotalSent;
    }
    if (peerTotalReceived != null) {
      $result.peerTotalReceived = peerTotalReceived;
    }
    if (avgBpsIn != null) {
      $result.avgBpsIn = avgBpsIn;
    }
    if (avgBpsOut != null) {
      $result.avgBpsOut = avgBpsOut;
    }
    return $result;
  }
  NodeInfo_NetworkInfo._() : super();
  factory NodeInfo_NetworkInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NodeInfo_NetworkInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NodeInfo.NetworkInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<PeerId>(1, _omitFieldNames ? '' : 'nodeId', subBuilder: PeerId.create)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'peerTotalSent', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..a<$fixnum.Int64>(3, _omitFieldNames ? '' : 'peerTotalReceived', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..a<$fixnum.Int64>(4, _omitFieldNames ? '' : 'avgBpsIn', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..a<$fixnum.Int64>(5, _omitFieldNames ? '' : 'avgBpsOut', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NodeInfo_NetworkInfo clone() => NodeInfo_NetworkInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NodeInfo_NetworkInfo copyWith(void Function(NodeInfo_NetworkInfo) updates) => super.copyWith((message) => updates(message as NodeInfo_NetworkInfo)) as NodeInfo_NetworkInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NodeInfo_NetworkInfo create() => NodeInfo_NetworkInfo._();
  NodeInfo_NetworkInfo createEmptyInstance() => create();
  static $pb.PbList<NodeInfo_NetworkInfo> createRepeated() => $pb.PbList<NodeInfo_NetworkInfo>();
  @$core.pragma('dart2js:noInline')
  static NodeInfo_NetworkInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NodeInfo_NetworkInfo>(create);
  static NodeInfo_NetworkInfo? _defaultInstance;

  /// The node id.
  @$pb.TagNumber(1)
  PeerId get nodeId => $_getN(0);
  @$pb.TagNumber(1)
  set nodeId(PeerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasNodeId() => $_has(0);
  @$pb.TagNumber(1)
  void clearNodeId() => clearField(1);
  @$pb.TagNumber(1)
  PeerId ensureNodeId() => $_ensure(0);

  /// Total number of packets sent by the node.
  @$pb.TagNumber(2)
  $fixnum.Int64 get peerTotalSent => $_getI64(1);
  @$pb.TagNumber(2)
  set peerTotalSent($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasPeerTotalSent() => $_has(1);
  @$pb.TagNumber(2)
  void clearPeerTotalSent() => clearField(2);

  /// Total number of packets received by the node.
  @$pb.TagNumber(3)
  $fixnum.Int64 get peerTotalReceived => $_getI64(2);
  @$pb.TagNumber(3)
  set peerTotalReceived($fixnum.Int64 v) { $_setInt64(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasPeerTotalReceived() => $_has(2);
  @$pb.TagNumber(3)
  void clearPeerTotalReceived() => clearField(3);

  /// Average outbound throughput in bytes per second.
  @$pb.TagNumber(4)
  $fixnum.Int64 get avgBpsIn => $_getI64(3);
  @$pb.TagNumber(4)
  set avgBpsIn($fixnum.Int64 v) { $_setInt64(3, v); }
  @$pb.TagNumber(4)
  $core.bool hasAvgBpsIn() => $_has(3);
  @$pb.TagNumber(4)
  void clearAvgBpsIn() => clearField(4);

  /// Average inbound throughput in bytes per second.
  @$pb.TagNumber(5)
  $fixnum.Int64 get avgBpsOut => $_getI64(4);
  @$pb.TagNumber(5)
  set avgBpsOut($fixnum.Int64 v) { $_setInt64(4, v); }
  @$pb.TagNumber(5)
  $core.bool hasAvgBpsOut() => $_has(4);
  @$pb.TagNumber(5)
  void clearAvgBpsOut() => clearField(5);
}

/// Tagging message type for a node that
/// is configured with baker keys and active in
/// the current baking committee
class NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo extends $pb.GeneratedMessage {
  factory NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo() => create();
  NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo._() : super();
  factory NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo clone() => NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo copyWith(void Function(NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo) updates) => super.copyWith((message) => updates(message as NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo)) as NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo create() => NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo._();
  NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo createEmptyInstance() => create();
  static $pb.PbList<NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo> createRepeated() => $pb.PbList<NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo>();
  @$core.pragma('dart2js:noInline')
  static NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo>(create);
  static NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo? _defaultInstance;
}

/// Tagging message type for a node that
/// is configured with baker keys and active in
/// the current finalizer committee (and also baking committee).
class NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo extends $pb.GeneratedMessage {
  factory NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo() => create();
  NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo._() : super();
  factory NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo clone() => NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo copyWith(void Function(NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo) updates) => super.copyWith((message) => updates(message as NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo)) as NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo create() => NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo._();
  NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo createEmptyInstance() => create();
  static $pb.PbList<NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo> createRepeated() => $pb.PbList<NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo>();
  @$core.pragma('dart2js:noInline')
  static NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo>(create);
  static NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo? _defaultInstance;
}

enum NodeInfo_BakerConsensusInfo_Status {
  passiveCommitteeInfo, 
  activeBakerCommitteeInfo, 
  activeFinalizerCommitteeInfo, 
  notSet
}

/// Consensus info for a node configured with baker keys.
class NodeInfo_BakerConsensusInfo extends $pb.GeneratedMessage {
  factory NodeInfo_BakerConsensusInfo({
    BakerId? bakerId,
    NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo? passiveCommitteeInfo,
    NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo? activeBakerCommitteeInfo,
    NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo? activeFinalizerCommitteeInfo,
  }) {
    final $result = create();
    if (bakerId != null) {
      $result.bakerId = bakerId;
    }
    if (passiveCommitteeInfo != null) {
      $result.passiveCommitteeInfo = passiveCommitteeInfo;
    }
    if (activeBakerCommitteeInfo != null) {
      $result.activeBakerCommitteeInfo = activeBakerCommitteeInfo;
    }
    if (activeFinalizerCommitteeInfo != null) {
      $result.activeFinalizerCommitteeInfo = activeFinalizerCommitteeInfo;
    }
    return $result;
  }
  NodeInfo_BakerConsensusInfo._() : super();
  factory NodeInfo_BakerConsensusInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NodeInfo_BakerConsensusInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, NodeInfo_BakerConsensusInfo_Status> _NodeInfo_BakerConsensusInfo_StatusByTag = {
    2 : NodeInfo_BakerConsensusInfo_Status.passiveCommitteeInfo,
    3 : NodeInfo_BakerConsensusInfo_Status.activeBakerCommitteeInfo,
    4 : NodeInfo_BakerConsensusInfo_Status.activeFinalizerCommitteeInfo,
    0 : NodeInfo_BakerConsensusInfo_Status.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NodeInfo.BakerConsensusInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [2, 3, 4])
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'bakerId', subBuilder: BakerId.create)
    ..e<NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo>(2, _omitFieldNames ? '' : 'passiveCommitteeInfo', $pb.PbFieldType.OE, defaultOrMaker: NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo.NOT_IN_COMMITTEE, valueOf: NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo.valueOf, enumValues: NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo.values)
    ..aOM<NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo>(3, _omitFieldNames ? '' : 'activeBakerCommitteeInfo', subBuilder: NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo.create)
    ..aOM<NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo>(4, _omitFieldNames ? '' : 'activeFinalizerCommitteeInfo', subBuilder: NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NodeInfo_BakerConsensusInfo clone() => NodeInfo_BakerConsensusInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NodeInfo_BakerConsensusInfo copyWith(void Function(NodeInfo_BakerConsensusInfo) updates) => super.copyWith((message) => updates(message as NodeInfo_BakerConsensusInfo)) as NodeInfo_BakerConsensusInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NodeInfo_BakerConsensusInfo create() => NodeInfo_BakerConsensusInfo._();
  NodeInfo_BakerConsensusInfo createEmptyInstance() => create();
  static $pb.PbList<NodeInfo_BakerConsensusInfo> createRepeated() => $pb.PbList<NodeInfo_BakerConsensusInfo>();
  @$core.pragma('dart2js:noInline')
  static NodeInfo_BakerConsensusInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NodeInfo_BakerConsensusInfo>(create);
  static NodeInfo_BakerConsensusInfo? _defaultInstance;

  NodeInfo_BakerConsensusInfo_Status whichStatus() => _NodeInfo_BakerConsensusInfo_StatusByTag[$_whichOneof(0)]!;
  void clearStatus() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  BakerId get bakerId => $_getN(0);
  @$pb.TagNumber(1)
  set bakerId(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBakerId() => $_has(0);
  @$pb.TagNumber(1)
  void clearBakerId() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBakerId() => $_ensure(0);

  /// The node is currently not baking.
  @$pb.TagNumber(2)
  NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo get passiveCommitteeInfo => $_getN(1);
  @$pb.TagNumber(2)
  set passiveCommitteeInfo(NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasPassiveCommitteeInfo() => $_has(1);
  @$pb.TagNumber(2)
  void clearPassiveCommitteeInfo() => clearField(2);

  /// The node is configured with baker keys and
  /// is member of the baking committee.
  @$pb.TagNumber(3)
  NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo get activeBakerCommitteeInfo => $_getN(2);
  @$pb.TagNumber(3)
  set activeBakerCommitteeInfo(NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasActiveBakerCommitteeInfo() => $_has(2);
  @$pb.TagNumber(3)
  void clearActiveBakerCommitteeInfo() => clearField(3);
  @$pb.TagNumber(3)
  NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo ensureActiveBakerCommitteeInfo() => $_ensure(2);

  /// The node is configured with baker keys and
  /// is member of the baking and finalization committees.
  @$pb.TagNumber(4)
  NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo get activeFinalizerCommitteeInfo => $_getN(3);
  @$pb.TagNumber(4)
  set activeFinalizerCommitteeInfo(NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasActiveFinalizerCommitteeInfo() => $_has(3);
  @$pb.TagNumber(4)
  void clearActiveFinalizerCommitteeInfo() => clearField(4);
  @$pb.TagNumber(4)
  NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo ensureActiveFinalizerCommitteeInfo() => $_ensure(3);
}

enum NodeInfo_Node_ConsensusStatus {
  notRunning, 
  passive, 
  active, 
  notSet
}

/// The node is a regular node.
class NodeInfo_Node extends $pb.GeneratedMessage {
  factory NodeInfo_Node({
    Empty? notRunning,
    Empty? passive,
    NodeInfo_BakerConsensusInfo? active,
  }) {
    final $result = create();
    if (notRunning != null) {
      $result.notRunning = notRunning;
    }
    if (passive != null) {
      $result.passive = passive;
    }
    if (active != null) {
      $result.active = active;
    }
    return $result;
  }
  NodeInfo_Node._() : super();
  factory NodeInfo_Node.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NodeInfo_Node.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, NodeInfo_Node_ConsensusStatus> _NodeInfo_Node_ConsensusStatusByTag = {
    1 : NodeInfo_Node_ConsensusStatus.notRunning,
    2 : NodeInfo_Node_ConsensusStatus.passive,
    3 : NodeInfo_Node_ConsensusStatus.active,
    0 : NodeInfo_Node_ConsensusStatus.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NodeInfo.Node', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<Empty>(1, _omitFieldNames ? '' : 'notRunning', subBuilder: Empty.create)
    ..aOM<Empty>(2, _omitFieldNames ? '' : 'passive', subBuilder: Empty.create)
    ..aOM<NodeInfo_BakerConsensusInfo>(3, _omitFieldNames ? '' : 'active', subBuilder: NodeInfo_BakerConsensusInfo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NodeInfo_Node clone() => NodeInfo_Node()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NodeInfo_Node copyWith(void Function(NodeInfo_Node) updates) => super.copyWith((message) => updates(message as NodeInfo_Node)) as NodeInfo_Node;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NodeInfo_Node create() => NodeInfo_Node._();
  NodeInfo_Node createEmptyInstance() => create();
  static $pb.PbList<NodeInfo_Node> createRepeated() => $pb.PbList<NodeInfo_Node>();
  @$core.pragma('dart2js:noInline')
  static NodeInfo_Node getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NodeInfo_Node>(create);
  static NodeInfo_Node? _defaultInstance;

  NodeInfo_Node_ConsensusStatus whichConsensusStatus() => _NodeInfo_Node_ConsensusStatusByTag[$_whichOneof(0)]!;
  void clearConsensusStatus() => clearField($_whichOneof(0));

  /// The node is not running consensus.
  /// This is the case only when the node is
  /// not supporting the protocol on the chain.
  /// The node does not process blocks.
  @$pb.TagNumber(1)
  Empty get notRunning => $_getN(0);
  @$pb.TagNumber(1)
  set notRunning(Empty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasNotRunning() => $_has(0);
  @$pb.TagNumber(1)
  void clearNotRunning() => clearField(1);
  @$pb.TagNumber(1)
  Empty ensureNotRunning() => $_ensure(0);

  /// Consensus info for a node that is
  /// not configured with baker keys.
  /// The node is only processing blocks and
  /// relaying blocks and transactions and responding to
  /// catchup messages.
  @$pb.TagNumber(2)
  Empty get passive => $_getN(1);
  @$pb.TagNumber(2)
  set passive(Empty v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasPassive() => $_has(1);
  @$pb.TagNumber(2)
  void clearPassive() => clearField(2);
  @$pb.TagNumber(2)
  Empty ensurePassive() => $_ensure(1);

  /// The node is configured with baker credentials and consensus is running.
  @$pb.TagNumber(3)
  NodeInfo_BakerConsensusInfo get active => $_getN(2);
  @$pb.TagNumber(3)
  set active(NodeInfo_BakerConsensusInfo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasActive() => $_has(2);
  @$pb.TagNumber(3)
  void clearActive() => clearField(3);
  @$pb.TagNumber(3)
  NodeInfo_BakerConsensusInfo ensureActive() => $_ensure(2);
}

enum NodeInfo_Details {
  bootstrapper, 
  node, 
  notSet
}

/// Node info response
/// Contains various information of the
/// enquired node.
class NodeInfo extends $pb.GeneratedMessage {
  factory NodeInfo({
    $core.String? peerVersion,
    Timestamp? localTime,
    Duration? peerUptime,
    NodeInfo_NetworkInfo? networkInfo,
    Empty? bootstrapper,
    NodeInfo_Node? node,
  }) {
    final $result = create();
    if (peerVersion != null) {
      $result.peerVersion = peerVersion;
    }
    if (localTime != null) {
      $result.localTime = localTime;
    }
    if (peerUptime != null) {
      $result.peerUptime = peerUptime;
    }
    if (networkInfo != null) {
      $result.networkInfo = networkInfo;
    }
    if (bootstrapper != null) {
      $result.bootstrapper = bootstrapper;
    }
    if (node != null) {
      $result.node = node;
    }
    return $result;
  }
  NodeInfo._() : super();
  factory NodeInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory NodeInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, NodeInfo_Details> _NodeInfo_DetailsByTag = {
    6 : NodeInfo_Details.bootstrapper,
    7 : NodeInfo_Details.node,
    0 : NodeInfo_Details.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'NodeInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [6, 7])
    ..aOS(1, _omitFieldNames ? '' : 'peerVersion')
    ..aOM<Timestamp>(3, _omitFieldNames ? '' : 'localTime', subBuilder: Timestamp.create)
    ..aOM<Duration>(4, _omitFieldNames ? '' : 'peerUptime', subBuilder: Duration.create)
    ..aOM<NodeInfo_NetworkInfo>(5, _omitFieldNames ? '' : 'networkInfo', subBuilder: NodeInfo_NetworkInfo.create)
    ..aOM<Empty>(6, _omitFieldNames ? '' : 'bootstrapper', subBuilder: Empty.create)
    ..aOM<NodeInfo_Node>(7, _omitFieldNames ? '' : 'node', subBuilder: NodeInfo_Node.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  NodeInfo clone() => NodeInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  NodeInfo copyWith(void Function(NodeInfo) updates) => super.copyWith((message) => updates(message as NodeInfo)) as NodeInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static NodeInfo create() => NodeInfo._();
  NodeInfo createEmptyInstance() => create();
  static $pb.PbList<NodeInfo> createRepeated() => $pb.PbList<NodeInfo>();
  @$core.pragma('dart2js:noInline')
  static NodeInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<NodeInfo>(create);
  static NodeInfo? _defaultInstance;

  NodeInfo_Details whichDetails() => _NodeInfo_DetailsByTag[$_whichOneof(0)]!;
  void clearDetails() => clearField($_whichOneof(0));

  /// The version of the node.
  @$pb.TagNumber(1)
  $core.String get peerVersion => $_getSZ(0);
  @$pb.TagNumber(1)
  set peerVersion($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasPeerVersion() => $_has(0);
  @$pb.TagNumber(1)
  void clearPeerVersion() => clearField(1);

  /// local time of the node.
  @$pb.TagNumber(3)
  Timestamp get localTime => $_getN(1);
  @$pb.TagNumber(3)
  set localTime(Timestamp v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasLocalTime() => $_has(1);
  @$pb.TagNumber(3)
  void clearLocalTime() => clearField(3);
  @$pb.TagNumber(3)
  Timestamp ensureLocalTime() => $_ensure(1);

  /// Number of milliseconds that the node
  /// has been alive.
  @$pb.TagNumber(4)
  Duration get peerUptime => $_getN(2);
  @$pb.TagNumber(4)
  set peerUptime(Duration v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasPeerUptime() => $_has(2);
  @$pb.TagNumber(4)
  void clearPeerUptime() => clearField(4);
  @$pb.TagNumber(4)
  Duration ensurePeerUptime() => $_ensure(2);

  /// Information related to the p2p protocol.
  @$pb.TagNumber(5)
  NodeInfo_NetworkInfo get networkInfo => $_getN(3);
  @$pb.TagNumber(5)
  set networkInfo(NodeInfo_NetworkInfo v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasNetworkInfo() => $_has(3);
  @$pb.TagNumber(5)
  void clearNetworkInfo() => clearField(5);
  @$pb.TagNumber(5)
  NodeInfo_NetworkInfo ensureNetworkInfo() => $_ensure(3);

  /// The node is a bootstrapper and is not running consensus.
  @$pb.TagNumber(6)
  Empty get bootstrapper => $_getN(4);
  @$pb.TagNumber(6)
  set bootstrapper(Empty v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasBootstrapper() => $_has(4);
  @$pb.TagNumber(6)
  void clearBootstrapper() => clearField(6);
  @$pb.TagNumber(6)
  Empty ensureBootstrapper() => $_ensure(4);

  /// The node is a regular node and runs the consensus
  /// protocol.
  @$pb.TagNumber(7)
  NodeInfo_Node get node => $_getN(5);
  @$pb.TagNumber(7)
  set node(NodeInfo_Node v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasNode() => $_has(5);
  @$pb.TagNumber(7)
  void clearNode() => clearField(7);
  @$pb.TagNumber(7)
  NodeInfo_Node ensureNode() => $_ensure(5);
}

enum SendBlockItemRequest_BlockItem {
  accountTransaction, 
  credentialDeployment, 
  updateInstruction, 
  notSet
}

class SendBlockItemRequest extends $pb.GeneratedMessage {
  factory SendBlockItemRequest({
    AccountTransaction? accountTransaction,
    CredentialDeployment? credentialDeployment,
    UpdateInstruction? updateInstruction,
  }) {
    final $result = create();
    if (accountTransaction != null) {
      $result.accountTransaction = accountTransaction;
    }
    if (credentialDeployment != null) {
      $result.credentialDeployment = credentialDeployment;
    }
    if (updateInstruction != null) {
      $result.updateInstruction = updateInstruction;
    }
    return $result;
  }
  SendBlockItemRequest._() : super();
  factory SendBlockItemRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory SendBlockItemRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, SendBlockItemRequest_BlockItem> _SendBlockItemRequest_BlockItemByTag = {
    1 : SendBlockItemRequest_BlockItem.accountTransaction,
    2 : SendBlockItemRequest_BlockItem.credentialDeployment,
    3 : SendBlockItemRequest_BlockItem.updateInstruction,
    0 : SendBlockItemRequest_BlockItem.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'SendBlockItemRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<AccountTransaction>(1, _omitFieldNames ? '' : 'accountTransaction', subBuilder: AccountTransaction.create)
    ..aOM<CredentialDeployment>(2, _omitFieldNames ? '' : 'credentialDeployment', subBuilder: CredentialDeployment.create)
    ..aOM<UpdateInstruction>(3, _omitFieldNames ? '' : 'updateInstruction', subBuilder: UpdateInstruction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  SendBlockItemRequest clone() => SendBlockItemRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  SendBlockItemRequest copyWith(void Function(SendBlockItemRequest) updates) => super.copyWith((message) => updates(message as SendBlockItemRequest)) as SendBlockItemRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static SendBlockItemRequest create() => SendBlockItemRequest._();
  SendBlockItemRequest createEmptyInstance() => create();
  static $pb.PbList<SendBlockItemRequest> createRepeated() => $pb.PbList<SendBlockItemRequest>();
  @$core.pragma('dart2js:noInline')
  static SendBlockItemRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<SendBlockItemRequest>(create);
  static SendBlockItemRequest? _defaultInstance;

  SendBlockItemRequest_BlockItem whichBlockItem() => _SendBlockItemRequest_BlockItemByTag[$_whichOneof(0)]!;
  void clearBlockItem() => clearField($_whichOneof(0));

  /// Account transactions are messages which are signed and paid for by an account.
  @$pb.TagNumber(1)
  AccountTransaction get accountTransaction => $_getN(0);
  @$pb.TagNumber(1)
  set accountTransaction(AccountTransaction v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccountTransaction() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccountTransaction() => clearField(1);
  @$pb.TagNumber(1)
  AccountTransaction ensureAccountTransaction() => $_ensure(0);

  /// Credential deployments create new accounts. They are not paid for
  /// directly by the sender. Instead, bakers are rewarded by the protocol for
  /// including them.
  @$pb.TagNumber(2)
  CredentialDeployment get credentialDeployment => $_getN(1);
  @$pb.TagNumber(2)
  set credentialDeployment(CredentialDeployment v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCredentialDeployment() => $_has(1);
  @$pb.TagNumber(2)
  void clearCredentialDeployment() => clearField(2);
  @$pb.TagNumber(2)
  CredentialDeployment ensureCredentialDeployment() => $_ensure(1);

  /// Update instructions are messages which can update the chain parameters. Including which keys are allowed
  /// to make future update instructions.
  @$pb.TagNumber(3)
  UpdateInstruction get updateInstruction => $_getN(2);
  @$pb.TagNumber(3)
  set updateInstruction(UpdateInstruction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasUpdateInstruction() => $_has(2);
  @$pb.TagNumber(3)
  void clearUpdateInstruction() => clearField(3);
  @$pb.TagNumber(3)
  UpdateInstruction ensureUpdateInstruction() => $_ensure(2);
}

enum CredentialDeployment_Payload {
  rawPayload, 
  notSet
}

/// Credential deployments create new accounts. They are not paid for
/// directly by the sender. Instead, bakers are rewarded by the protocol for
/// including them.
class CredentialDeployment extends $pb.GeneratedMessage {
  factory CredentialDeployment({
    TransactionTime? messageExpiry,
    $core.List<$core.int>? rawPayload,
  }) {
    final $result = create();
    if (messageExpiry != null) {
      $result.messageExpiry = messageExpiry;
    }
    if (rawPayload != null) {
      $result.rawPayload = rawPayload;
    }
    return $result;
  }
  CredentialDeployment._() : super();
  factory CredentialDeployment.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CredentialDeployment.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, CredentialDeployment_Payload> _CredentialDeployment_PayloadByTag = {
    2 : CredentialDeployment_Payload.rawPayload,
    0 : CredentialDeployment_Payload.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CredentialDeployment', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [2])
    ..aOM<TransactionTime>(1, _omitFieldNames ? '' : 'messageExpiry', subBuilder: TransactionTime.create)
    ..a<$core.List<$core.int>>(2, _omitFieldNames ? '' : 'rawPayload', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CredentialDeployment clone() => CredentialDeployment()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CredentialDeployment copyWith(void Function(CredentialDeployment) updates) => super.copyWith((message) => updates(message as CredentialDeployment)) as CredentialDeployment;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CredentialDeployment create() => CredentialDeployment._();
  CredentialDeployment createEmptyInstance() => create();
  static $pb.PbList<CredentialDeployment> createRepeated() => $pb.PbList<CredentialDeployment>();
  @$core.pragma('dart2js:noInline')
  static CredentialDeployment getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CredentialDeployment>(create);
  static CredentialDeployment? _defaultInstance;

  CredentialDeployment_Payload whichPayload() => _CredentialDeployment_PayloadByTag[$_whichOneof(0)]!;
  void clearPayload() => clearField($_whichOneof(0));

  @$pb.TagNumber(1)
  TransactionTime get messageExpiry => $_getN(0);
  @$pb.TagNumber(1)
  set messageExpiry(TransactionTime v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasMessageExpiry() => $_has(0);
  @$pb.TagNumber(1)
  void clearMessageExpiry() => clearField(1);
  @$pb.TagNumber(1)
  TransactionTime ensureMessageExpiry() => $_ensure(0);

  /// A raw payload, which is just the encoded payload.
  /// A typed variant might be added in the future.
  @$pb.TagNumber(2)
  $core.List<$core.int> get rawPayload => $_getN(1);
  @$pb.TagNumber(2)
  set rawPayload($core.List<$core.int> v) { $_setBytes(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasRawPayload() => $_has(1);
  @$pb.TagNumber(2)
  void clearRawPayload() => clearField(2);
}

/// A single signature. Used when sending block items to a node with
/// `SendBlockItem`.
class Signature extends $pb.GeneratedMessage {
  factory Signature({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  Signature._() : super();
  factory Signature.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Signature.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Signature', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Signature clone() => Signature()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Signature copyWith(void Function(Signature) updates) => super.copyWith((message) => updates(message as Signature)) as Signature;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Signature create() => Signature._();
  Signature createEmptyInstance() => create();
  static $pb.PbList<Signature> createRepeated() => $pb.PbList<Signature>();
  @$core.pragma('dart2js:noInline')
  static Signature getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Signature>(create);
  static Signature? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A signature on an update instruction.
/// The type `UpdateKeysIndex` is not used directly, as messages cannot be keys in maps.
class SignatureMap extends $pb.GeneratedMessage {
  factory SignatureMap({
    $core.Map<$core.int, Signature>? signatures,
  }) {
    final $result = create();
    if (signatures != null) {
      $result.signatures.addAll(signatures);
    }
    return $result;
  }
  SignatureMap._() : super();
  factory SignatureMap.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory SignatureMap.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'SignatureMap', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..m<$core.int, Signature>(1, _omitFieldNames ? '' : 'signatures', entryClassName: 'SignatureMap.SignaturesEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OM, valueCreator: Signature.create, valueDefaultOrMaker: Signature.getDefault, packageName: const $pb.PackageName('concordium.v2'))
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  SignatureMap clone() => SignatureMap()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  SignatureMap copyWith(void Function(SignatureMap) updates) => super.copyWith((message) => updates(message as SignatureMap)) as SignatureMap;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static SignatureMap create() => SignatureMap._();
  SignatureMap createEmptyInstance() => create();
  static $pb.PbList<SignatureMap> createRepeated() => $pb.PbList<SignatureMap>();
  @$core.pragma('dart2js:noInline')
  static SignatureMap getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<SignatureMap>(create);
  static SignatureMap? _defaultInstance;

  @$pb.TagNumber(1)
  $core.Map<$core.int, Signature> get signatures => $_getMap(0);
}

/// Wrapper for a map from indexes to signatures.
/// Needed because protobuf doesn't allow nested maps directly.
/// The keys in the SignatureMap must not exceed 2^8.
class AccountSignatureMap extends $pb.GeneratedMessage {
  factory AccountSignatureMap({
    $core.Map<$core.int, Signature>? signatures,
  }) {
    final $result = create();
    if (signatures != null) {
      $result.signatures.addAll(signatures);
    }
    return $result;
  }
  AccountSignatureMap._() : super();
  factory AccountSignatureMap.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountSignatureMap.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountSignatureMap', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..m<$core.int, Signature>(1, _omitFieldNames ? '' : 'signatures', entryClassName: 'AccountSignatureMap.SignaturesEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OM, valueCreator: Signature.create, valueDefaultOrMaker: Signature.getDefault, packageName: const $pb.PackageName('concordium.v2'))
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountSignatureMap clone() => AccountSignatureMap()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountSignatureMap copyWith(void Function(AccountSignatureMap) updates) => super.copyWith((message) => updates(message as AccountSignatureMap)) as AccountSignatureMap;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountSignatureMap create() => AccountSignatureMap._();
  AccountSignatureMap createEmptyInstance() => create();
  static $pb.PbList<AccountSignatureMap> createRepeated() => $pb.PbList<AccountSignatureMap>();
  @$core.pragma('dart2js:noInline')
  static AccountSignatureMap getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountSignatureMap>(create);
  static AccountSignatureMap? _defaultInstance;

  @$pb.TagNumber(1)
  $core.Map<$core.int, Signature> get signatures => $_getMap(0);
}

class AccountTransactionSignature extends $pb.GeneratedMessage {
  factory AccountTransactionSignature({
    $core.Map<$core.int, AccountSignatureMap>? signatures,
  }) {
    final $result = create();
    if (signatures != null) {
      $result.signatures.addAll(signatures);
    }
    return $result;
  }
  AccountTransactionSignature._() : super();
  factory AccountTransactionSignature.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionSignature.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionSignature', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..m<$core.int, AccountSignatureMap>(1, _omitFieldNames ? '' : 'signatures', entryClassName: 'AccountTransactionSignature.SignaturesEntry', keyFieldType: $pb.PbFieldType.OU3, valueFieldType: $pb.PbFieldType.OM, valueCreator: AccountSignatureMap.create, valueDefaultOrMaker: AccountSignatureMap.getDefault, packageName: const $pb.PackageName('concordium.v2'))
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionSignature clone() => AccountTransactionSignature()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionSignature copyWith(void Function(AccountTransactionSignature) updates) => super.copyWith((message) => updates(message as AccountTransactionSignature)) as AccountTransactionSignature;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionSignature create() => AccountTransactionSignature._();
  AccountTransactionSignature createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionSignature> createRepeated() => $pb.PbList<AccountTransactionSignature>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionSignature getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionSignature>(create);
  static AccountTransactionSignature? _defaultInstance;

  /// A map from `CredentialIndex` to `SignatureMap`s.
  /// The type `CredentialIndex` is not used directly, as messages cannot be keys in maps.
  /// The map cannot contain more than 2^8 signatures.
  @$pb.TagNumber(1)
  $core.Map<$core.int, AccountSignatureMap> get signatures => $_getMap(0);
}

/// Header of an account transaction that contains basic data to check whether
/// the sender and the transaction are valid. The header is shared by all transaction types.
class AccountTransactionHeader extends $pb.GeneratedMessage {
  factory AccountTransactionHeader({
    AccountAddress? sender,
    SequenceNumber? sequenceNumber,
    Energy? energyAmount,
    TransactionTime? expiry,
  }) {
    final $result = create();
    if (sender != null) {
      $result.sender = sender;
    }
    if (sequenceNumber != null) {
      $result.sequenceNumber = sequenceNumber;
    }
    if (energyAmount != null) {
      $result.energyAmount = energyAmount;
    }
    if (expiry != null) {
      $result.expiry = expiry;
    }
    return $result;
  }
  AccountTransactionHeader._() : super();
  factory AccountTransactionHeader.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionHeader.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionHeader', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'sender', subBuilder: AccountAddress.create)
    ..aOM<SequenceNumber>(2, _omitFieldNames ? '' : 'sequenceNumber', subBuilder: SequenceNumber.create)
    ..aOM<Energy>(3, _omitFieldNames ? '' : 'energyAmount', subBuilder: Energy.create)
    ..aOM<TransactionTime>(5, _omitFieldNames ? '' : 'expiry', subBuilder: TransactionTime.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionHeader clone() => AccountTransactionHeader()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionHeader copyWith(void Function(AccountTransactionHeader) updates) => super.copyWith((message) => updates(message as AccountTransactionHeader)) as AccountTransactionHeader;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionHeader create() => AccountTransactionHeader._();
  AccountTransactionHeader createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionHeader> createRepeated() => $pb.PbList<AccountTransactionHeader>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionHeader getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionHeader>(create);
  static AccountTransactionHeader? _defaultInstance;

  /// Sender of the transaction.
  @$pb.TagNumber(1)
  AccountAddress get sender => $_getN(0);
  @$pb.TagNumber(1)
  set sender(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSender() => $_has(0);
  @$pb.TagNumber(1)
  void clearSender() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureSender() => $_ensure(0);

  /// Sequence number of the transaction.
  @$pb.TagNumber(2)
  SequenceNumber get sequenceNumber => $_getN(1);
  @$pb.TagNumber(2)
  set sequenceNumber(SequenceNumber v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasSequenceNumber() => $_has(1);
  @$pb.TagNumber(2)
  void clearSequenceNumber() => clearField(2);
  @$pb.TagNumber(2)
  SequenceNumber ensureSequenceNumber() => $_ensure(1);

  /// Maximum amount of energy the transaction can take to execute.
  @$pb.TagNumber(3)
  Energy get energyAmount => $_getN(2);
  @$pb.TagNumber(3)
  set energyAmount(Energy v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEnergyAmount() => $_has(2);
  @$pb.TagNumber(3)
  void clearEnergyAmount() => clearField(3);
  @$pb.TagNumber(3)
  Energy ensureEnergyAmount() => $_ensure(2);

  /// Latest time the transaction can included in a block.
  @$pb.TagNumber(5)
  TransactionTime get expiry => $_getN(3);
  @$pb.TagNumber(5)
  set expiry(TransactionTime v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasExpiry() => $_has(3);
  @$pb.TagNumber(5)
  void clearExpiry() => clearField(5);
  @$pb.TagNumber(5)
  TransactionTime ensureExpiry() => $_ensure(3);
}

/// Data required to initialize a new contract instance.
class InitContractPayload extends $pb.GeneratedMessage {
  factory InitContractPayload({
    Amount? amount,
    ModuleRef? moduleRef,
    InitName? initName,
    Parameter? parameter,
  }) {
    final $result = create();
    if (amount != null) {
      $result.amount = amount;
    }
    if (moduleRef != null) {
      $result.moduleRef = moduleRef;
    }
    if (initName != null) {
      $result.initName = initName;
    }
    if (parameter != null) {
      $result.parameter = parameter;
    }
    return $result;
  }
  InitContractPayload._() : super();
  factory InitContractPayload.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InitContractPayload.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InitContractPayload', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<ModuleRef>(2, _omitFieldNames ? '' : 'moduleRef', subBuilder: ModuleRef.create)
    ..aOM<InitName>(3, _omitFieldNames ? '' : 'initName', subBuilder: InitName.create)
    ..aOM<Parameter>(4, _omitFieldNames ? '' : 'parameter', subBuilder: Parameter.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InitContractPayload clone() => InitContractPayload()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InitContractPayload copyWith(void Function(InitContractPayload) updates) => super.copyWith((message) => updates(message as InitContractPayload)) as InitContractPayload;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InitContractPayload create() => InitContractPayload._();
  InitContractPayload createEmptyInstance() => create();
  static $pb.PbList<InitContractPayload> createRepeated() => $pb.PbList<InitContractPayload>();
  @$core.pragma('dart2js:noInline')
  static InitContractPayload getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InitContractPayload>(create);
  static InitContractPayload? _defaultInstance;

  /// Amount of CCD to send to the instance.
  @$pb.TagNumber(1)
  Amount get amount => $_getN(0);
  @$pb.TagNumber(1)
  set amount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureAmount() => $_ensure(0);

  /// Reference to the module from which the instance will be created.
  @$pb.TagNumber(2)
  ModuleRef get moduleRef => $_getN(1);
  @$pb.TagNumber(2)
  set moduleRef(ModuleRef v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasModuleRef() => $_has(1);
  @$pb.TagNumber(2)
  void clearModuleRef() => clearField(2);
  @$pb.TagNumber(2)
  ModuleRef ensureModuleRef() => $_ensure(1);

  /// Name of the contract to initialize. This is expected to be in the format
  /// `init_name`.
  @$pb.TagNumber(3)
  InitName get initName => $_getN(2);
  @$pb.TagNumber(3)
  set initName(InitName v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInitName() => $_has(2);
  @$pb.TagNumber(3)
  void clearInitName() => clearField(3);
  @$pb.TagNumber(3)
  InitName ensureInitName() => $_ensure(2);

  /// Parameter to call the `init` of the contract with.
  @$pb.TagNumber(4)
  Parameter get parameter => $_getN(3);
  @$pb.TagNumber(4)
  set parameter(Parameter v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasParameter() => $_has(3);
  @$pb.TagNumber(4)
  void clearParameter() => clearField(4);
  @$pb.TagNumber(4)
  Parameter ensureParameter() => $_ensure(3);
}

/// Data required to update a contract instance.
class UpdateContractPayload extends $pb.GeneratedMessage {
  factory UpdateContractPayload({
    Amount? amount,
    ContractAddress? address,
    ReceiveName? receiveName,
    Parameter? parameter,
  }) {
    final $result = create();
    if (amount != null) {
      $result.amount = amount;
    }
    if (address != null) {
      $result.address = address;
    }
    if (receiveName != null) {
      $result.receiveName = receiveName;
    }
    if (parameter != null) {
      $result.parameter = parameter;
    }
    return $result;
  }
  UpdateContractPayload._() : super();
  factory UpdateContractPayload.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateContractPayload.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateContractPayload', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'address', subBuilder: ContractAddress.create)
    ..aOM<ReceiveName>(3, _omitFieldNames ? '' : 'receiveName', subBuilder: ReceiveName.create)
    ..aOM<Parameter>(4, _omitFieldNames ? '' : 'parameter', subBuilder: Parameter.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateContractPayload clone() => UpdateContractPayload()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateContractPayload copyWith(void Function(UpdateContractPayload) updates) => super.copyWith((message) => updates(message as UpdateContractPayload)) as UpdateContractPayload;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateContractPayload create() => UpdateContractPayload._();
  UpdateContractPayload createEmptyInstance() => create();
  static $pb.PbList<UpdateContractPayload> createRepeated() => $pb.PbList<UpdateContractPayload>();
  @$core.pragma('dart2js:noInline')
  static UpdateContractPayload getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateContractPayload>(create);
  static UpdateContractPayload? _defaultInstance;

  /// Amount of CCD to send to the instance.
  @$pb.TagNumber(1)
  Amount get amount => $_getN(0);
  @$pb.TagNumber(1)
  set amount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureAmount() => $_ensure(0);

  /// Address of the instance to update.
  @$pb.TagNumber(2)
  ContractAddress get address => $_getN(1);
  @$pb.TagNumber(2)
  set address(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAddress() => $_has(1);
  @$pb.TagNumber(2)
  void clearAddress() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureAddress() => $_ensure(1);

  /// Name of the entrypoint to call to update the instance.
  /// This is expected to be in the format `contractName.entrypointName`.
  @$pb.TagNumber(3)
  ReceiveName get receiveName => $_getN(2);
  @$pb.TagNumber(3)
  set receiveName(ReceiveName v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasReceiveName() => $_has(2);
  @$pb.TagNumber(3)
  void clearReceiveName() => clearField(3);
  @$pb.TagNumber(3)
  ReceiveName ensureReceiveName() => $_ensure(2);

  /// Parameter to pass to the entrypoint.
  @$pb.TagNumber(4)
  Parameter get parameter => $_getN(3);
  @$pb.TagNumber(4)
  set parameter(Parameter v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasParameter() => $_has(3);
  @$pb.TagNumber(4)
  void clearParameter() => clearField(4);
  @$pb.TagNumber(4)
  Parameter ensureParameter() => $_ensure(3);
}

/// Payload of a transfer between two accounts.
class TransferPayload extends $pb.GeneratedMessage {
  factory TransferPayload({
    Amount? amount,
    AccountAddress? receiver,
  }) {
    final $result = create();
    if (amount != null) {
      $result.amount = amount;
    }
    if (receiver != null) {
      $result.receiver = receiver;
    }
    return $result;
  }
  TransferPayload._() : super();
  factory TransferPayload.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TransferPayload.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TransferPayload', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'receiver', subBuilder: AccountAddress.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TransferPayload clone() => TransferPayload()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TransferPayload copyWith(void Function(TransferPayload) updates) => super.copyWith((message) => updates(message as TransferPayload)) as TransferPayload;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TransferPayload create() => TransferPayload._();
  TransferPayload createEmptyInstance() => create();
  static $pb.PbList<TransferPayload> createRepeated() => $pb.PbList<TransferPayload>();
  @$core.pragma('dart2js:noInline')
  static TransferPayload getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TransferPayload>(create);
  static TransferPayload? _defaultInstance;

  /// Amount of CCD to send.
  @$pb.TagNumber(1)
  Amount get amount => $_getN(0);
  @$pb.TagNumber(1)
  set amount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureAmount() => $_ensure(0);

  /// Receiver address.
  @$pb.TagNumber(2)
  AccountAddress get receiver => $_getN(1);
  @$pb.TagNumber(2)
  set receiver(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasReceiver() => $_has(1);
  @$pb.TagNumber(2)
  void clearReceiver() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureReceiver() => $_ensure(1);
}

/// Payload of a transfer between two accounts with a memo.
class TransferWithMemoPayload extends $pb.GeneratedMessage {
  factory TransferWithMemoPayload({
    Amount? amount,
    AccountAddress? receiver,
    Memo? memo,
  }) {
    final $result = create();
    if (amount != null) {
      $result.amount = amount;
    }
    if (receiver != null) {
      $result.receiver = receiver;
    }
    if (memo != null) {
      $result.memo = memo;
    }
    return $result;
  }
  TransferWithMemoPayload._() : super();
  factory TransferWithMemoPayload.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TransferWithMemoPayload.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TransferWithMemoPayload', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<AccountAddress>(2, _omitFieldNames ? '' : 'receiver', subBuilder: AccountAddress.create)
    ..aOM<Memo>(3, _omitFieldNames ? '' : 'memo', subBuilder: Memo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TransferWithMemoPayload clone() => TransferWithMemoPayload()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TransferWithMemoPayload copyWith(void Function(TransferWithMemoPayload) updates) => super.copyWith((message) => updates(message as TransferWithMemoPayload)) as TransferWithMemoPayload;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TransferWithMemoPayload create() => TransferWithMemoPayload._();
  TransferWithMemoPayload createEmptyInstance() => create();
  static $pb.PbList<TransferWithMemoPayload> createRepeated() => $pb.PbList<TransferWithMemoPayload>();
  @$core.pragma('dart2js:noInline')
  static TransferWithMemoPayload getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TransferWithMemoPayload>(create);
  static TransferWithMemoPayload? _defaultInstance;

  /// Amount of CCD to send.
  @$pb.TagNumber(1)
  Amount get amount => $_getN(0);
  @$pb.TagNumber(1)
  set amount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureAmount() => $_ensure(0);

  /// Receiver address.
  @$pb.TagNumber(2)
  AccountAddress get receiver => $_getN(1);
  @$pb.TagNumber(2)
  set receiver(AccountAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasReceiver() => $_has(1);
  @$pb.TagNumber(2)
  void clearReceiver() => clearField(2);
  @$pb.TagNumber(2)
  AccountAddress ensureReceiver() => $_ensure(1);

  /// Memo to include with the transfer.
  @$pb.TagNumber(3)
  Memo get memo => $_getN(2);
  @$pb.TagNumber(3)
  set memo(Memo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMemo() => $_has(2);
  @$pb.TagNumber(3)
  void clearMemo() => clearField(3);
  @$pb.TagNumber(3)
  Memo ensureMemo() => $_ensure(2);
}

enum AccountTransactionPayload_Payload {
  rawPayload, 
  deployModule, 
  initContract, 
  updateContract, 
  transfer, 
  transferWithMemo, 
  registerData, 
  notSet
}

/// The payload for an account transaction.
class AccountTransactionPayload extends $pb.GeneratedMessage {
  factory AccountTransactionPayload({
    $core.List<$core.int>? rawPayload,
    VersionedModuleSource? deployModule,
    InitContractPayload? initContract,
    UpdateContractPayload? updateContract,
    TransferPayload? transfer,
    TransferWithMemoPayload? transferWithMemo,
    RegisteredData? registerData,
  }) {
    final $result = create();
    if (rawPayload != null) {
      $result.rawPayload = rawPayload;
    }
    if (deployModule != null) {
      $result.deployModule = deployModule;
    }
    if (initContract != null) {
      $result.initContract = initContract;
    }
    if (updateContract != null) {
      $result.updateContract = updateContract;
    }
    if (transfer != null) {
      $result.transfer = transfer;
    }
    if (transferWithMemo != null) {
      $result.transferWithMemo = transferWithMemo;
    }
    if (registerData != null) {
      $result.registerData = registerData;
    }
    return $result;
  }
  AccountTransactionPayload._() : super();
  factory AccountTransactionPayload.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionPayload.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, AccountTransactionPayload_Payload> _AccountTransactionPayload_PayloadByTag = {
    1 : AccountTransactionPayload_Payload.rawPayload,
    2 : AccountTransactionPayload_Payload.deployModule,
    3 : AccountTransactionPayload_Payload.initContract,
    4 : AccountTransactionPayload_Payload.updateContract,
    5 : AccountTransactionPayload_Payload.transfer,
    6 : AccountTransactionPayload_Payload.transferWithMemo,
    7 : AccountTransactionPayload_Payload.registerData,
    0 : AccountTransactionPayload_Payload.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionPayload', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 7])
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'rawPayload', $pb.PbFieldType.OY)
    ..aOM<VersionedModuleSource>(2, _omitFieldNames ? '' : 'deployModule', subBuilder: VersionedModuleSource.create)
    ..aOM<InitContractPayload>(3, _omitFieldNames ? '' : 'initContract', subBuilder: InitContractPayload.create)
    ..aOM<UpdateContractPayload>(4, _omitFieldNames ? '' : 'updateContract', subBuilder: UpdateContractPayload.create)
    ..aOM<TransferPayload>(5, _omitFieldNames ? '' : 'transfer', subBuilder: TransferPayload.create)
    ..aOM<TransferWithMemoPayload>(6, _omitFieldNames ? '' : 'transferWithMemo', subBuilder: TransferWithMemoPayload.create)
    ..aOM<RegisteredData>(7, _omitFieldNames ? '' : 'registerData', subBuilder: RegisteredData.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionPayload clone() => AccountTransactionPayload()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionPayload copyWith(void Function(AccountTransactionPayload) updates) => super.copyWith((message) => updates(message as AccountTransactionPayload)) as AccountTransactionPayload;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionPayload create() => AccountTransactionPayload._();
  AccountTransactionPayload createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionPayload> createRepeated() => $pb.PbList<AccountTransactionPayload>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionPayload getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionPayload>(create);
  static AccountTransactionPayload? _defaultInstance;

  AccountTransactionPayload_Payload whichPayload() => _AccountTransactionPayload_PayloadByTag[$_whichOneof(0)]!;
  void clearPayload() => clearField($_whichOneof(0));

  /// A pre-serialized payload in the binary serialization format defined
  /// by the protocol.
  @$pb.TagNumber(1)
  $core.List<$core.int> get rawPayload => $_getN(0);
  @$pb.TagNumber(1)
  set rawPayload($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasRawPayload() => $_has(0);
  @$pb.TagNumber(1)
  void clearRawPayload() => clearField(1);

  /// A transfer between two accounts. With an optional memo.
  @$pb.TagNumber(2)
  VersionedModuleSource get deployModule => $_getN(1);
  @$pb.TagNumber(2)
  set deployModule(VersionedModuleSource v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDeployModule() => $_has(1);
  @$pb.TagNumber(2)
  void clearDeployModule() => clearField(2);
  @$pb.TagNumber(2)
  VersionedModuleSource ensureDeployModule() => $_ensure(1);

  @$pb.TagNumber(3)
  InitContractPayload get initContract => $_getN(2);
  @$pb.TagNumber(3)
  set initContract(InitContractPayload v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInitContract() => $_has(2);
  @$pb.TagNumber(3)
  void clearInitContract() => clearField(3);
  @$pb.TagNumber(3)
  InitContractPayload ensureInitContract() => $_ensure(2);

  @$pb.TagNumber(4)
  UpdateContractPayload get updateContract => $_getN(3);
  @$pb.TagNumber(4)
  set updateContract(UpdateContractPayload v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasUpdateContract() => $_has(3);
  @$pb.TagNumber(4)
  void clearUpdateContract() => clearField(4);
  @$pb.TagNumber(4)
  UpdateContractPayload ensureUpdateContract() => $_ensure(3);

  @$pb.TagNumber(5)
  TransferPayload get transfer => $_getN(4);
  @$pb.TagNumber(5)
  set transfer(TransferPayload v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasTransfer() => $_has(4);
  @$pb.TagNumber(5)
  void clearTransfer() => clearField(5);
  @$pb.TagNumber(5)
  TransferPayload ensureTransfer() => $_ensure(4);

  @$pb.TagNumber(6)
  TransferWithMemoPayload get transferWithMemo => $_getN(5);
  @$pb.TagNumber(6)
  set transferWithMemo(TransferWithMemoPayload v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasTransferWithMemo() => $_has(5);
  @$pb.TagNumber(6)
  void clearTransferWithMemo() => clearField(6);
  @$pb.TagNumber(6)
  TransferWithMemoPayload ensureTransferWithMemo() => $_ensure(5);

  @$pb.TagNumber(7)
  RegisteredData get registerData => $_getN(6);
  @$pb.TagNumber(7)
  set registerData(RegisteredData v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasRegisterData() => $_has(6);
  @$pb.TagNumber(7)
  void clearRegisterData() => clearField(7);
  @$pb.TagNumber(7)
  RegisteredData ensureRegisterData() => $_ensure(6);
}

/// An unsigned account transaction. This is used with the
/// `GetTransactionSignHash` endpoint to obtain the message to sign.
class PreAccountTransaction extends $pb.GeneratedMessage {
  factory PreAccountTransaction({
    AccountTransactionHeader? header,
    AccountTransactionPayload? payload,
  }) {
    final $result = create();
    if (header != null) {
      $result.header = header;
    }
    if (payload != null) {
      $result.payload = payload;
    }
    return $result;
  }
  PreAccountTransaction._() : super();
  factory PreAccountTransaction.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory PreAccountTransaction.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'PreAccountTransaction', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountTransactionHeader>(1, _omitFieldNames ? '' : 'header', subBuilder: AccountTransactionHeader.create)
    ..aOM<AccountTransactionPayload>(2, _omitFieldNames ? '' : 'payload', subBuilder: AccountTransactionPayload.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  PreAccountTransaction clone() => PreAccountTransaction()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  PreAccountTransaction copyWith(void Function(PreAccountTransaction) updates) => super.copyWith((message) => updates(message as PreAccountTransaction)) as PreAccountTransaction;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static PreAccountTransaction create() => PreAccountTransaction._();
  PreAccountTransaction createEmptyInstance() => create();
  static $pb.PbList<PreAccountTransaction> createRepeated() => $pb.PbList<PreAccountTransaction>();
  @$core.pragma('dart2js:noInline')
  static PreAccountTransaction getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<PreAccountTransaction>(create);
  static PreAccountTransaction? _defaultInstance;

  @$pb.TagNumber(1)
  AccountTransactionHeader get header => $_getN(0);
  @$pb.TagNumber(1)
  set header(AccountTransactionHeader v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasHeader() => $_has(0);
  @$pb.TagNumber(1)
  void clearHeader() => clearField(1);
  @$pb.TagNumber(1)
  AccountTransactionHeader ensureHeader() => $_ensure(0);

  @$pb.TagNumber(2)
  AccountTransactionPayload get payload => $_getN(1);
  @$pb.TagNumber(2)
  set payload(AccountTransactionPayload v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasPayload() => $_has(1);
  @$pb.TagNumber(2)
  void clearPayload() => clearField(2);
  @$pb.TagNumber(2)
  AccountTransactionPayload ensurePayload() => $_ensure(1);
}

/// Account transactions are messages which are signed and paid for by the sender
/// account.
class AccountTransaction extends $pb.GeneratedMessage {
  factory AccountTransaction({
    AccountTransactionSignature? signature,
    AccountTransactionHeader? header,
    AccountTransactionPayload? payload,
  }) {
    final $result = create();
    if (signature != null) {
      $result.signature = signature;
    }
    if (header != null) {
      $result.header = header;
    }
    if (payload != null) {
      $result.payload = payload;
    }
    return $result;
  }
  AccountTransaction._() : super();
  factory AccountTransaction.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransaction.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransaction', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountTransactionSignature>(1, _omitFieldNames ? '' : 'signature', subBuilder: AccountTransactionSignature.create)
    ..aOM<AccountTransactionHeader>(2, _omitFieldNames ? '' : 'header', subBuilder: AccountTransactionHeader.create)
    ..aOM<AccountTransactionPayload>(3, _omitFieldNames ? '' : 'payload', subBuilder: AccountTransactionPayload.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransaction clone() => AccountTransaction()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransaction copyWith(void Function(AccountTransaction) updates) => super.copyWith((message) => updates(message as AccountTransaction)) as AccountTransaction;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransaction create() => AccountTransaction._();
  AccountTransaction createEmptyInstance() => create();
  static $pb.PbList<AccountTransaction> createRepeated() => $pb.PbList<AccountTransaction>();
  @$core.pragma('dart2js:noInline')
  static AccountTransaction getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransaction>(create);
  static AccountTransaction? _defaultInstance;

  @$pb.TagNumber(1)
  AccountTransactionSignature get signature => $_getN(0);
  @$pb.TagNumber(1)
  set signature(AccountTransactionSignature v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSignature() => $_has(0);
  @$pb.TagNumber(1)
  void clearSignature() => clearField(1);
  @$pb.TagNumber(1)
  AccountTransactionSignature ensureSignature() => $_ensure(0);

  @$pb.TagNumber(2)
  AccountTransactionHeader get header => $_getN(1);
  @$pb.TagNumber(2)
  set header(AccountTransactionHeader v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasHeader() => $_has(1);
  @$pb.TagNumber(2)
  void clearHeader() => clearField(2);
  @$pb.TagNumber(2)
  AccountTransactionHeader ensureHeader() => $_ensure(1);

  @$pb.TagNumber(3)
  AccountTransactionPayload get payload => $_getN(2);
  @$pb.TagNumber(3)
  set payload(AccountTransactionPayload v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasPayload() => $_has(2);
  @$pb.TagNumber(3)
  void clearPayload() => clearField(3);
  @$pb.TagNumber(3)
  AccountTransactionPayload ensurePayload() => $_ensure(2);
}

class UpdateInstructionHeader extends $pb.GeneratedMessage {
  factory UpdateInstructionHeader({
    UpdateSequenceNumber? sequenceNumber,
    TransactionTime? effectiveTime,
    TransactionTime? timeout,
  }) {
    final $result = create();
    if (sequenceNumber != null) {
      $result.sequenceNumber = sequenceNumber;
    }
    if (effectiveTime != null) {
      $result.effectiveTime = effectiveTime;
    }
    if (timeout != null) {
      $result.timeout = timeout;
    }
    return $result;
  }
  UpdateInstructionHeader._() : super();
  factory UpdateInstructionHeader.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateInstructionHeader.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateInstructionHeader', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<UpdateSequenceNumber>(1, _omitFieldNames ? '' : 'sequenceNumber', subBuilder: UpdateSequenceNumber.create)
    ..aOM<TransactionTime>(2, _omitFieldNames ? '' : 'effectiveTime', subBuilder: TransactionTime.create)
    ..aOM<TransactionTime>(3, _omitFieldNames ? '' : 'timeout', subBuilder: TransactionTime.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateInstructionHeader clone() => UpdateInstructionHeader()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateInstructionHeader copyWith(void Function(UpdateInstructionHeader) updates) => super.copyWith((message) => updates(message as UpdateInstructionHeader)) as UpdateInstructionHeader;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateInstructionHeader create() => UpdateInstructionHeader._();
  UpdateInstructionHeader createEmptyInstance() => create();
  static $pb.PbList<UpdateInstructionHeader> createRepeated() => $pb.PbList<UpdateInstructionHeader>();
  @$core.pragma('dart2js:noInline')
  static UpdateInstructionHeader getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateInstructionHeader>(create);
  static UpdateInstructionHeader? _defaultInstance;

  @$pb.TagNumber(1)
  UpdateSequenceNumber get sequenceNumber => $_getN(0);
  @$pb.TagNumber(1)
  set sequenceNumber(UpdateSequenceNumber v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSequenceNumber() => $_has(0);
  @$pb.TagNumber(1)
  void clearSequenceNumber() => clearField(1);
  @$pb.TagNumber(1)
  UpdateSequenceNumber ensureSequenceNumber() => $_ensure(0);

  @$pb.TagNumber(2)
  TransactionTime get effectiveTime => $_getN(1);
  @$pb.TagNumber(2)
  set effectiveTime(TransactionTime v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEffectiveTime() => $_has(1);
  @$pb.TagNumber(2)
  void clearEffectiveTime() => clearField(2);
  @$pb.TagNumber(2)
  TransactionTime ensureEffectiveTime() => $_ensure(1);

  @$pb.TagNumber(3)
  TransactionTime get timeout => $_getN(2);
  @$pb.TagNumber(3)
  set timeout(TransactionTime v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasTimeout() => $_has(2);
  @$pb.TagNumber(3)
  void clearTimeout() => clearField(3);
  @$pb.TagNumber(3)
  TransactionTime ensureTimeout() => $_ensure(2);
}

enum UpdateInstructionPayload_Payload {
  rawPayload, 
  notSet
}

/// The payload for an UpdateInstruction.
class UpdateInstructionPayload extends $pb.GeneratedMessage {
  factory UpdateInstructionPayload({
    $core.List<$core.int>? rawPayload,
  }) {
    final $result = create();
    if (rawPayload != null) {
      $result.rawPayload = rawPayload;
    }
    return $result;
  }
  UpdateInstructionPayload._() : super();
  factory UpdateInstructionPayload.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateInstructionPayload.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, UpdateInstructionPayload_Payload> _UpdateInstructionPayload_PayloadByTag = {
    3 : UpdateInstructionPayload_Payload.rawPayload,
    0 : UpdateInstructionPayload_Payload.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateInstructionPayload', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [3])
    ..a<$core.List<$core.int>>(3, _omitFieldNames ? '' : 'rawPayload', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateInstructionPayload clone() => UpdateInstructionPayload()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateInstructionPayload copyWith(void Function(UpdateInstructionPayload) updates) => super.copyWith((message) => updates(message as UpdateInstructionPayload)) as UpdateInstructionPayload;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateInstructionPayload create() => UpdateInstructionPayload._();
  UpdateInstructionPayload createEmptyInstance() => create();
  static $pb.PbList<UpdateInstructionPayload> createRepeated() => $pb.PbList<UpdateInstructionPayload>();
  @$core.pragma('dart2js:noInline')
  static UpdateInstructionPayload getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateInstructionPayload>(create);
  static UpdateInstructionPayload? _defaultInstance;

  UpdateInstructionPayload_Payload whichPayload() => _UpdateInstructionPayload_PayloadByTag[$_whichOneof(0)]!;
  void clearPayload() => clearField($_whichOneof(0));

  /// A raw payload encoded according to the format defined by the protocol.
  @$pb.TagNumber(3)
  $core.List<$core.int> get rawPayload => $_getN(0);
  @$pb.TagNumber(3)
  set rawPayload($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(3)
  $core.bool hasRawPayload() => $_has(0);
  @$pb.TagNumber(3)
  void clearRawPayload() => clearField(3);
}

class UpdateInstruction extends $pb.GeneratedMessage {
  factory UpdateInstruction({
    SignatureMap? signatures,
    UpdateInstructionHeader? header,
    UpdateInstructionPayload? payload,
  }) {
    final $result = create();
    if (signatures != null) {
      $result.signatures = signatures;
    }
    if (header != null) {
      $result.header = header;
    }
    if (payload != null) {
      $result.payload = payload;
    }
    return $result;
  }
  UpdateInstruction._() : super();
  factory UpdateInstruction.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory UpdateInstruction.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'UpdateInstruction', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<SignatureMap>(1, _omitFieldNames ? '' : 'signatures', subBuilder: SignatureMap.create)
    ..aOM<UpdateInstructionHeader>(2, _omitFieldNames ? '' : 'header', subBuilder: UpdateInstructionHeader.create)
    ..aOM<UpdateInstructionPayload>(3, _omitFieldNames ? '' : 'payload', subBuilder: UpdateInstructionPayload.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  UpdateInstruction clone() => UpdateInstruction()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  UpdateInstruction copyWith(void Function(UpdateInstruction) updates) => super.copyWith((message) => updates(message as UpdateInstruction)) as UpdateInstruction;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static UpdateInstruction create() => UpdateInstruction._();
  UpdateInstruction createEmptyInstance() => create();
  static $pb.PbList<UpdateInstruction> createRepeated() => $pb.PbList<UpdateInstruction>();
  @$core.pragma('dart2js:noInline')
  static UpdateInstruction getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<UpdateInstruction>(create);
  static UpdateInstruction? _defaultInstance;

  /// A map from `UpdateKeysIndex` to `Signature`. Keys must not exceed 2^16.
  @$pb.TagNumber(1)
  SignatureMap get signatures => $_getN(0);
  @$pb.TagNumber(1)
  set signatures(SignatureMap v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSignatures() => $_has(0);
  @$pb.TagNumber(1)
  void clearSignatures() => clearField(1);
  @$pb.TagNumber(1)
  SignatureMap ensureSignatures() => $_ensure(0);

  @$pb.TagNumber(2)
  UpdateInstructionHeader get header => $_getN(1);
  @$pb.TagNumber(2)
  set header(UpdateInstructionHeader v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasHeader() => $_has(1);
  @$pb.TagNumber(2)
  void clearHeader() => clearField(2);
  @$pb.TagNumber(2)
  UpdateInstructionHeader ensureHeader() => $_ensure(1);

  @$pb.TagNumber(3)
  UpdateInstructionPayload get payload => $_getN(2);
  @$pb.TagNumber(3)
  set payload(UpdateInstructionPayload v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasPayload() => $_has(2);
  @$pb.TagNumber(3)
  void clearPayload() => clearField(3);
  @$pb.TagNumber(3)
  UpdateInstructionPayload ensurePayload() => $_ensure(2);
}

/// Signature on an account transaction is defined to be the signature on the
/// hash of the `PreAccountTransaction`.
class AccountTransactionSignHash extends $pb.GeneratedMessage {
  factory AccountTransactionSignHash({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  AccountTransactionSignHash._() : super();
  factory AccountTransactionSignHash.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory AccountTransactionSignHash.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'AccountTransactionSignHash', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  AccountTransactionSignHash clone() => AccountTransactionSignHash()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  AccountTransactionSignHash copyWith(void Function(AccountTransactionSignHash) updates) => super.copyWith((message) => updates(message as AccountTransactionSignHash)) as AccountTransactionSignHash;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static AccountTransactionSignHash create() => AccountTransactionSignHash._();
  AccountTransactionSignHash createEmptyInstance() => create();
  static $pb.PbList<AccountTransactionSignHash> createRepeated() => $pb.PbList<AccountTransactionSignHash>();
  @$core.pragma('dart2js:noInline')
  static AccountTransactionSignHash getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<AccountTransactionSignHash>(create);
  static AccountTransactionSignHash? _defaultInstance;

  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The number of credential deployments allowed in a block. This in effect
/// determines the number of accounts that can be created in a block.
class CredentialsPerBlockLimit extends $pb.GeneratedMessage {
  factory CredentialsPerBlockLimit({
    $core.int? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  CredentialsPerBlockLimit._() : super();
  factory CredentialsPerBlockLimit.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CredentialsPerBlockLimit.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CredentialsPerBlockLimit', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CredentialsPerBlockLimit clone() => CredentialsPerBlockLimit()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CredentialsPerBlockLimit copyWith(void Function(CredentialsPerBlockLimit) updates) => super.copyWith((message) => updates(message as CredentialsPerBlockLimit)) as CredentialsPerBlockLimit;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CredentialsPerBlockLimit create() => CredentialsPerBlockLimit._();
  CredentialsPerBlockLimit createEmptyInstance() => create();
  static $pb.PbList<CredentialsPerBlockLimit> createRepeated() => $pb.PbList<CredentialsPerBlockLimit>();
  @$core.pragma('dart2js:noInline')
  static CredentialsPerBlockLimit getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CredentialsPerBlockLimit>(create);
  static CredentialsPerBlockLimit? _defaultInstance;

  @$pb.TagNumber(1)
  $core.int get value => $_getIZ(0);
  @$pb.TagNumber(1)
  set value($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Updatable chain parameters that apply to protocol versions 1-3.
class ChainParametersV0 extends $pb.GeneratedMessage {
  factory ChainParametersV0({
    ElectionDifficulty? electionDifficulty,
    ExchangeRate? euroPerEnergy,
    ExchangeRate? microCcdPerEuro,
    Epoch? bakerCooldownEpochs,
    CredentialsPerBlockLimit? accountCreationLimit,
    MintDistributionCpv0? mintDistribution,
    TransactionFeeDistribution? transactionFeeDistribution,
    GasRewards? gasRewards,
    AccountAddress? foundationAccount,
    Amount? minimumThresholdForBaking,
    HigherLevelKeys? rootKeys,
    HigherLevelKeys? level1Keys,
    AuthorizationsV0? level2Keys,
  }) {
    final $result = create();
    if (electionDifficulty != null) {
      $result.electionDifficulty = electionDifficulty;
    }
    if (euroPerEnergy != null) {
      $result.euroPerEnergy = euroPerEnergy;
    }
    if (microCcdPerEuro != null) {
      $result.microCcdPerEuro = microCcdPerEuro;
    }
    if (bakerCooldownEpochs != null) {
      $result.bakerCooldownEpochs = bakerCooldownEpochs;
    }
    if (accountCreationLimit != null) {
      $result.accountCreationLimit = accountCreationLimit;
    }
    if (mintDistribution != null) {
      $result.mintDistribution = mintDistribution;
    }
    if (transactionFeeDistribution != null) {
      $result.transactionFeeDistribution = transactionFeeDistribution;
    }
    if (gasRewards != null) {
      $result.gasRewards = gasRewards;
    }
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    if (minimumThresholdForBaking != null) {
      $result.minimumThresholdForBaking = minimumThresholdForBaking;
    }
    if (rootKeys != null) {
      $result.rootKeys = rootKeys;
    }
    if (level1Keys != null) {
      $result.level1Keys = level1Keys;
    }
    if (level2Keys != null) {
      $result.level2Keys = level2Keys;
    }
    return $result;
  }
  ChainParametersV0._() : super();
  factory ChainParametersV0.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ChainParametersV0.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ChainParametersV0', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ElectionDifficulty>(1, _omitFieldNames ? '' : 'electionDifficulty', subBuilder: ElectionDifficulty.create)
    ..aOM<ExchangeRate>(2, _omitFieldNames ? '' : 'euroPerEnergy', subBuilder: ExchangeRate.create)
    ..aOM<ExchangeRate>(3, _omitFieldNames ? '' : 'microCcdPerEuro', subBuilder: ExchangeRate.create)
    ..aOM<Epoch>(4, _omitFieldNames ? '' : 'bakerCooldownEpochs', subBuilder: Epoch.create)
    ..aOM<CredentialsPerBlockLimit>(5, _omitFieldNames ? '' : 'accountCreationLimit', subBuilder: CredentialsPerBlockLimit.create)
    ..aOM<MintDistributionCpv0>(6, _omitFieldNames ? '' : 'mintDistribution', subBuilder: MintDistributionCpv0.create)
    ..aOM<TransactionFeeDistribution>(7, _omitFieldNames ? '' : 'transactionFeeDistribution', subBuilder: TransactionFeeDistribution.create)
    ..aOM<GasRewards>(8, _omitFieldNames ? '' : 'gasRewards', subBuilder: GasRewards.create)
    ..aOM<AccountAddress>(9, _omitFieldNames ? '' : 'foundationAccount', subBuilder: AccountAddress.create)
    ..aOM<Amount>(10, _omitFieldNames ? '' : 'minimumThresholdForBaking', subBuilder: Amount.create)
    ..aOM<HigherLevelKeys>(11, _omitFieldNames ? '' : 'rootKeys', subBuilder: HigherLevelKeys.create)
    ..aOM<HigherLevelKeys>(12, _omitFieldNames ? '' : 'level1Keys', subBuilder: HigherLevelKeys.create)
    ..aOM<AuthorizationsV0>(13, _omitFieldNames ? '' : 'level2Keys', subBuilder: AuthorizationsV0.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ChainParametersV0 clone() => ChainParametersV0()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ChainParametersV0 copyWith(void Function(ChainParametersV0) updates) => super.copyWith((message) => updates(message as ChainParametersV0)) as ChainParametersV0;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ChainParametersV0 create() => ChainParametersV0._();
  ChainParametersV0 createEmptyInstance() => create();
  static $pb.PbList<ChainParametersV0> createRepeated() => $pb.PbList<ChainParametersV0>();
  @$core.pragma('dart2js:noInline')
  static ChainParametersV0 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ChainParametersV0>(create);
  static ChainParametersV0? _defaultInstance;

  /// Election difficulty for consensus lottery.
  @$pb.TagNumber(1)
  ElectionDifficulty get electionDifficulty => $_getN(0);
  @$pb.TagNumber(1)
  set electionDifficulty(ElectionDifficulty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasElectionDifficulty() => $_has(0);
  @$pb.TagNumber(1)
  void clearElectionDifficulty() => clearField(1);
  @$pb.TagNumber(1)
  ElectionDifficulty ensureElectionDifficulty() => $_ensure(0);

  /// Euro per energy exchange rate.
  @$pb.TagNumber(2)
  ExchangeRate get euroPerEnergy => $_getN(1);
  @$pb.TagNumber(2)
  set euroPerEnergy(ExchangeRate v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEuroPerEnergy() => $_has(1);
  @$pb.TagNumber(2)
  void clearEuroPerEnergy() => clearField(2);
  @$pb.TagNumber(2)
  ExchangeRate ensureEuroPerEnergy() => $_ensure(1);

  /// Micro CCD per euro exchange rate.
  @$pb.TagNumber(3)
  ExchangeRate get microCcdPerEuro => $_getN(2);
  @$pb.TagNumber(3)
  set microCcdPerEuro(ExchangeRate v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMicroCcdPerEuro() => $_has(2);
  @$pb.TagNumber(3)
  void clearMicroCcdPerEuro() => clearField(3);
  @$pb.TagNumber(3)
  ExchangeRate ensureMicroCcdPerEuro() => $_ensure(2);

  /// Extra number of epochs before reduction in stake, or baker
  /// deregistration is completed.
  @$pb.TagNumber(4)
  Epoch get bakerCooldownEpochs => $_getN(3);
  @$pb.TagNumber(4)
  set bakerCooldownEpochs(Epoch v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasBakerCooldownEpochs() => $_has(3);
  @$pb.TagNumber(4)
  void clearBakerCooldownEpochs() => clearField(4);
  @$pb.TagNumber(4)
  Epoch ensureBakerCooldownEpochs() => $_ensure(3);

  /// The limit for the number of account creations in a block.
  @$pb.TagNumber(5)
  CredentialsPerBlockLimit get accountCreationLimit => $_getN(4);
  @$pb.TagNumber(5)
  set accountCreationLimit(CredentialsPerBlockLimit v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasAccountCreationLimit() => $_has(4);
  @$pb.TagNumber(5)
  void clearAccountCreationLimit() => clearField(5);
  @$pb.TagNumber(5)
  CredentialsPerBlockLimit ensureAccountCreationLimit() => $_ensure(4);

  /// Current mint distribution
  @$pb.TagNumber(6)
  MintDistributionCpv0 get mintDistribution => $_getN(5);
  @$pb.TagNumber(6)
  set mintDistribution(MintDistributionCpv0 v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasMintDistribution() => $_has(5);
  @$pb.TagNumber(6)
  void clearMintDistribution() => clearField(6);
  @$pb.TagNumber(6)
  MintDistributionCpv0 ensureMintDistribution() => $_ensure(5);

  /// Current transaction fee distribution.
  @$pb.TagNumber(7)
  TransactionFeeDistribution get transactionFeeDistribution => $_getN(6);
  @$pb.TagNumber(7)
  set transactionFeeDistribution(TransactionFeeDistribution v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasTransactionFeeDistribution() => $_has(6);
  @$pb.TagNumber(7)
  void clearTransactionFeeDistribution() => clearField(7);
  @$pb.TagNumber(7)
  TransactionFeeDistribution ensureTransactionFeeDistribution() => $_ensure(6);

  /// Current gas reward parameters.
  @$pb.TagNumber(8)
  GasRewards get gasRewards => $_getN(7);
  @$pb.TagNumber(8)
  set gasRewards(GasRewards v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasGasRewards() => $_has(7);
  @$pb.TagNumber(8)
  void clearGasRewards() => clearField(8);
  @$pb.TagNumber(8)
  GasRewards ensureGasRewards() => $_ensure(7);

  /// The foundation account.
  @$pb.TagNumber(9)
  AccountAddress get foundationAccount => $_getN(8);
  @$pb.TagNumber(9)
  set foundationAccount(AccountAddress v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasFoundationAccount() => $_has(8);
  @$pb.TagNumber(9)
  void clearFoundationAccount() => clearField(9);
  @$pb.TagNumber(9)
  AccountAddress ensureFoundationAccount() => $_ensure(8);

  /// Minimum threshold for becoming a baker.
  @$pb.TagNumber(10)
  Amount get minimumThresholdForBaking => $_getN(9);
  @$pb.TagNumber(10)
  set minimumThresholdForBaking(Amount v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasMinimumThresholdForBaking() => $_has(9);
  @$pb.TagNumber(10)
  void clearMinimumThresholdForBaking() => clearField(10);
  @$pb.TagNumber(10)
  Amount ensureMinimumThresholdForBaking() => $_ensure(9);

  /// Keys allowed to do root updates.
  @$pb.TagNumber(11)
  HigherLevelKeys get rootKeys => $_getN(10);
  @$pb.TagNumber(11)
  set rootKeys(HigherLevelKeys v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasRootKeys() => $_has(10);
  @$pb.TagNumber(11)
  void clearRootKeys() => clearField(11);
  @$pb.TagNumber(11)
  HigherLevelKeys ensureRootKeys() => $_ensure(10);

  /// Keys allowed to do level1 updates;
  @$pb.TagNumber(12)
  HigherLevelKeys get level1Keys => $_getN(11);
  @$pb.TagNumber(12)
  set level1Keys(HigherLevelKeys v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasLevel1Keys() => $_has(11);
  @$pb.TagNumber(12)
  void clearLevel1Keys() => clearField(12);
  @$pb.TagNumber(12)
  HigherLevelKeys ensureLevel1Keys() => $_ensure(11);

  /// Keys allowed to do parameter updates.
  @$pb.TagNumber(13)
  AuthorizationsV0 get level2Keys => $_getN(12);
  @$pb.TagNumber(13)
  set level2Keys(AuthorizationsV0 v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasLevel2Keys() => $_has(12);
  @$pb.TagNumber(13)
  void clearLevel2Keys() => clearField(13);
  @$pb.TagNumber(13)
  AuthorizationsV0 ensureLevel2Keys() => $_ensure(12);
}

/// Updatable chain parameters that apply to protocol versions 4-5.
class ChainParametersV1 extends $pb.GeneratedMessage {
  factory ChainParametersV1({
    ElectionDifficulty? electionDifficulty,
    ExchangeRate? euroPerEnergy,
    ExchangeRate? microCcdPerEuro,
    CooldownParametersCpv1? cooldownParameters,
    TimeParametersCpv1? timeParameters,
    CredentialsPerBlockLimit? accountCreationLimit,
    MintDistributionCpv1? mintDistribution,
    TransactionFeeDistribution? transactionFeeDistribution,
    GasRewards? gasRewards,
    AccountAddress? foundationAccount,
    PoolParametersCpv1? poolParameters,
    HigherLevelKeys? rootKeys,
    HigherLevelKeys? level1Keys,
    AuthorizationsV1? level2Keys,
  }) {
    final $result = create();
    if (electionDifficulty != null) {
      $result.electionDifficulty = electionDifficulty;
    }
    if (euroPerEnergy != null) {
      $result.euroPerEnergy = euroPerEnergy;
    }
    if (microCcdPerEuro != null) {
      $result.microCcdPerEuro = microCcdPerEuro;
    }
    if (cooldownParameters != null) {
      $result.cooldownParameters = cooldownParameters;
    }
    if (timeParameters != null) {
      $result.timeParameters = timeParameters;
    }
    if (accountCreationLimit != null) {
      $result.accountCreationLimit = accountCreationLimit;
    }
    if (mintDistribution != null) {
      $result.mintDistribution = mintDistribution;
    }
    if (transactionFeeDistribution != null) {
      $result.transactionFeeDistribution = transactionFeeDistribution;
    }
    if (gasRewards != null) {
      $result.gasRewards = gasRewards;
    }
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    if (poolParameters != null) {
      $result.poolParameters = poolParameters;
    }
    if (rootKeys != null) {
      $result.rootKeys = rootKeys;
    }
    if (level1Keys != null) {
      $result.level1Keys = level1Keys;
    }
    if (level2Keys != null) {
      $result.level2Keys = level2Keys;
    }
    return $result;
  }
  ChainParametersV1._() : super();
  factory ChainParametersV1.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ChainParametersV1.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ChainParametersV1', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ElectionDifficulty>(1, _omitFieldNames ? '' : 'electionDifficulty', subBuilder: ElectionDifficulty.create)
    ..aOM<ExchangeRate>(2, _omitFieldNames ? '' : 'euroPerEnergy', subBuilder: ExchangeRate.create)
    ..aOM<ExchangeRate>(3, _omitFieldNames ? '' : 'microCcdPerEuro', subBuilder: ExchangeRate.create)
    ..aOM<CooldownParametersCpv1>(4, _omitFieldNames ? '' : 'cooldownParameters', subBuilder: CooldownParametersCpv1.create)
    ..aOM<TimeParametersCpv1>(5, _omitFieldNames ? '' : 'timeParameters', subBuilder: TimeParametersCpv1.create)
    ..aOM<CredentialsPerBlockLimit>(6, _omitFieldNames ? '' : 'accountCreationLimit', subBuilder: CredentialsPerBlockLimit.create)
    ..aOM<MintDistributionCpv1>(7, _omitFieldNames ? '' : 'mintDistribution', subBuilder: MintDistributionCpv1.create)
    ..aOM<TransactionFeeDistribution>(8, _omitFieldNames ? '' : 'transactionFeeDistribution', subBuilder: TransactionFeeDistribution.create)
    ..aOM<GasRewards>(9, _omitFieldNames ? '' : 'gasRewards', subBuilder: GasRewards.create)
    ..aOM<AccountAddress>(10, _omitFieldNames ? '' : 'foundationAccount', subBuilder: AccountAddress.create)
    ..aOM<PoolParametersCpv1>(11, _omitFieldNames ? '' : 'poolParameters', subBuilder: PoolParametersCpv1.create)
    ..aOM<HigherLevelKeys>(12, _omitFieldNames ? '' : 'rootKeys', subBuilder: HigherLevelKeys.create)
    ..aOM<HigherLevelKeys>(13, _omitFieldNames ? '' : 'level1Keys', subBuilder: HigherLevelKeys.create)
    ..aOM<AuthorizationsV1>(14, _omitFieldNames ? '' : 'level2Keys', subBuilder: AuthorizationsV1.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ChainParametersV1 clone() => ChainParametersV1()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ChainParametersV1 copyWith(void Function(ChainParametersV1) updates) => super.copyWith((message) => updates(message as ChainParametersV1)) as ChainParametersV1;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ChainParametersV1 create() => ChainParametersV1._();
  ChainParametersV1 createEmptyInstance() => create();
  static $pb.PbList<ChainParametersV1> createRepeated() => $pb.PbList<ChainParametersV1>();
  @$core.pragma('dart2js:noInline')
  static ChainParametersV1 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ChainParametersV1>(create);
  static ChainParametersV1? _defaultInstance;

  /// Election difficulty for consensus lottery.
  @$pb.TagNumber(1)
  ElectionDifficulty get electionDifficulty => $_getN(0);
  @$pb.TagNumber(1)
  set electionDifficulty(ElectionDifficulty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasElectionDifficulty() => $_has(0);
  @$pb.TagNumber(1)
  void clearElectionDifficulty() => clearField(1);
  @$pb.TagNumber(1)
  ElectionDifficulty ensureElectionDifficulty() => $_ensure(0);

  /// Euro per energy exchange rate.
  @$pb.TagNumber(2)
  ExchangeRate get euroPerEnergy => $_getN(1);
  @$pb.TagNumber(2)
  set euroPerEnergy(ExchangeRate v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEuroPerEnergy() => $_has(1);
  @$pb.TagNumber(2)
  void clearEuroPerEnergy() => clearField(2);
  @$pb.TagNumber(2)
  ExchangeRate ensureEuroPerEnergy() => $_ensure(1);

  /// Micro CCD per euro exchange rate.
  @$pb.TagNumber(3)
  ExchangeRate get microCcdPerEuro => $_getN(2);
  @$pb.TagNumber(3)
  set microCcdPerEuro(ExchangeRate v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMicroCcdPerEuro() => $_has(2);
  @$pb.TagNumber(3)
  void clearMicroCcdPerEuro() => clearField(3);
  @$pb.TagNumber(3)
  ExchangeRate ensureMicroCcdPerEuro() => $_ensure(2);

  /// Extra number of epochs before reduction in stake, or baker
  /// deregistration is completed.
  @$pb.TagNumber(4)
  CooldownParametersCpv1 get cooldownParameters => $_getN(3);
  @$pb.TagNumber(4)
  set cooldownParameters(CooldownParametersCpv1 v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasCooldownParameters() => $_has(3);
  @$pb.TagNumber(4)
  void clearCooldownParameters() => clearField(4);
  @$pb.TagNumber(4)
  CooldownParametersCpv1 ensureCooldownParameters() => $_ensure(3);

  /// Current time parameters.
  /// The time parameters indicates the mint rate and the
  /// reward period length, i.e. the time between paydays.
  @$pb.TagNumber(5)
  TimeParametersCpv1 get timeParameters => $_getN(4);
  @$pb.TagNumber(5)
  set timeParameters(TimeParametersCpv1 v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasTimeParameters() => $_has(4);
  @$pb.TagNumber(5)
  void clearTimeParameters() => clearField(5);
  @$pb.TagNumber(5)
  TimeParametersCpv1 ensureTimeParameters() => $_ensure(4);

  /// The limit for the number of account creations in a block.
  @$pb.TagNumber(6)
  CredentialsPerBlockLimit get accountCreationLimit => $_getN(5);
  @$pb.TagNumber(6)
  set accountCreationLimit(CredentialsPerBlockLimit v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasAccountCreationLimit() => $_has(5);
  @$pb.TagNumber(6)
  void clearAccountCreationLimit() => clearField(6);
  @$pb.TagNumber(6)
  CredentialsPerBlockLimit ensureAccountCreationLimit() => $_ensure(5);

  /// Current mint distribution
  @$pb.TagNumber(7)
  MintDistributionCpv1 get mintDistribution => $_getN(6);
  @$pb.TagNumber(7)
  set mintDistribution(MintDistributionCpv1 v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasMintDistribution() => $_has(6);
  @$pb.TagNumber(7)
  void clearMintDistribution() => clearField(7);
  @$pb.TagNumber(7)
  MintDistributionCpv1 ensureMintDistribution() => $_ensure(6);

  /// Current transaction fee distribution.
  @$pb.TagNumber(8)
  TransactionFeeDistribution get transactionFeeDistribution => $_getN(7);
  @$pb.TagNumber(8)
  set transactionFeeDistribution(TransactionFeeDistribution v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasTransactionFeeDistribution() => $_has(7);
  @$pb.TagNumber(8)
  void clearTransactionFeeDistribution() => clearField(8);
  @$pb.TagNumber(8)
  TransactionFeeDistribution ensureTransactionFeeDistribution() => $_ensure(7);

  /// Current gas reward parameters.
  @$pb.TagNumber(9)
  GasRewards get gasRewards => $_getN(8);
  @$pb.TagNumber(9)
  set gasRewards(GasRewards v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasGasRewards() => $_has(8);
  @$pb.TagNumber(9)
  void clearGasRewards() => clearField(9);
  @$pb.TagNumber(9)
  GasRewards ensureGasRewards() => $_ensure(8);

  /// The foundation account.
  @$pb.TagNumber(10)
  AccountAddress get foundationAccount => $_getN(9);
  @$pb.TagNumber(10)
  set foundationAccount(AccountAddress v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasFoundationAccount() => $_has(9);
  @$pb.TagNumber(10)
  void clearFoundationAccount() => clearField(10);
  @$pb.TagNumber(10)
  AccountAddress ensureFoundationAccount() => $_ensure(9);

  /// Parameters governing baking pools and their commissions.
  @$pb.TagNumber(11)
  PoolParametersCpv1 get poolParameters => $_getN(10);
  @$pb.TagNumber(11)
  set poolParameters(PoolParametersCpv1 v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasPoolParameters() => $_has(10);
  @$pb.TagNumber(11)
  void clearPoolParameters() => clearField(11);
  @$pb.TagNumber(11)
  PoolParametersCpv1 ensurePoolParameters() => $_ensure(10);

  /// Keys allowed to do root updates.
  @$pb.TagNumber(12)
  HigherLevelKeys get rootKeys => $_getN(11);
  @$pb.TagNumber(12)
  set rootKeys(HigherLevelKeys v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasRootKeys() => $_has(11);
  @$pb.TagNumber(12)
  void clearRootKeys() => clearField(12);
  @$pb.TagNumber(12)
  HigherLevelKeys ensureRootKeys() => $_ensure(11);

  /// Keys allowed to do level1 updates;
  @$pb.TagNumber(13)
  HigherLevelKeys get level1Keys => $_getN(12);
  @$pb.TagNumber(13)
  set level1Keys(HigherLevelKeys v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasLevel1Keys() => $_has(12);
  @$pb.TagNumber(13)
  void clearLevel1Keys() => clearField(13);
  @$pb.TagNumber(13)
  HigherLevelKeys ensureLevel1Keys() => $_ensure(12);

  /// Keys allowed to do parameter updates.
  @$pb.TagNumber(14)
  AuthorizationsV1 get level2Keys => $_getN(13);
  @$pb.TagNumber(14)
  set level2Keys(AuthorizationsV1 v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasLevel2Keys() => $_has(13);
  @$pb.TagNumber(14)
  void clearLevel2Keys() => clearField(14);
  @$pb.TagNumber(14)
  AuthorizationsV1 ensureLevel2Keys() => $_ensure(13);
}

/// Updatable chain parameters that apply to protocol versions 6.
class ChainParametersV2 extends $pb.GeneratedMessage {
  factory ChainParametersV2({
    ConsensusParametersV1? consensusParameters,
    ExchangeRate? euroPerEnergy,
    ExchangeRate? microCcdPerEuro,
    CooldownParametersCpv1? cooldownParameters,
    TimeParametersCpv1? timeParameters,
    CredentialsPerBlockLimit? accountCreationLimit,
    MintDistributionCpv1? mintDistribution,
    TransactionFeeDistribution? transactionFeeDistribution,
    GasRewardsCpv2? gasRewards,
    AccountAddress? foundationAccount,
    PoolParametersCpv1? poolParameters,
    HigherLevelKeys? rootKeys,
    HigherLevelKeys? level1Keys,
    AuthorizationsV1? level2Keys,
    FinalizationCommitteeParameters? finalizationCommitteeParameters,
  }) {
    final $result = create();
    if (consensusParameters != null) {
      $result.consensusParameters = consensusParameters;
    }
    if (euroPerEnergy != null) {
      $result.euroPerEnergy = euroPerEnergy;
    }
    if (microCcdPerEuro != null) {
      $result.microCcdPerEuro = microCcdPerEuro;
    }
    if (cooldownParameters != null) {
      $result.cooldownParameters = cooldownParameters;
    }
    if (timeParameters != null) {
      $result.timeParameters = timeParameters;
    }
    if (accountCreationLimit != null) {
      $result.accountCreationLimit = accountCreationLimit;
    }
    if (mintDistribution != null) {
      $result.mintDistribution = mintDistribution;
    }
    if (transactionFeeDistribution != null) {
      $result.transactionFeeDistribution = transactionFeeDistribution;
    }
    if (gasRewards != null) {
      $result.gasRewards = gasRewards;
    }
    if (foundationAccount != null) {
      $result.foundationAccount = foundationAccount;
    }
    if (poolParameters != null) {
      $result.poolParameters = poolParameters;
    }
    if (rootKeys != null) {
      $result.rootKeys = rootKeys;
    }
    if (level1Keys != null) {
      $result.level1Keys = level1Keys;
    }
    if (level2Keys != null) {
      $result.level2Keys = level2Keys;
    }
    if (finalizationCommitteeParameters != null) {
      $result.finalizationCommitteeParameters = finalizationCommitteeParameters;
    }
    return $result;
  }
  ChainParametersV2._() : super();
  factory ChainParametersV2.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ChainParametersV2.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ChainParametersV2', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<ConsensusParametersV1>(1, _omitFieldNames ? '' : 'consensusParameters', subBuilder: ConsensusParametersV1.create)
    ..aOM<ExchangeRate>(2, _omitFieldNames ? '' : 'euroPerEnergy', subBuilder: ExchangeRate.create)
    ..aOM<ExchangeRate>(3, _omitFieldNames ? '' : 'microCcdPerEuro', subBuilder: ExchangeRate.create)
    ..aOM<CooldownParametersCpv1>(4, _omitFieldNames ? '' : 'cooldownParameters', subBuilder: CooldownParametersCpv1.create)
    ..aOM<TimeParametersCpv1>(5, _omitFieldNames ? '' : 'timeParameters', subBuilder: TimeParametersCpv1.create)
    ..aOM<CredentialsPerBlockLimit>(6, _omitFieldNames ? '' : 'accountCreationLimit', subBuilder: CredentialsPerBlockLimit.create)
    ..aOM<MintDistributionCpv1>(7, _omitFieldNames ? '' : 'mintDistribution', subBuilder: MintDistributionCpv1.create)
    ..aOM<TransactionFeeDistribution>(8, _omitFieldNames ? '' : 'transactionFeeDistribution', subBuilder: TransactionFeeDistribution.create)
    ..aOM<GasRewardsCpv2>(9, _omitFieldNames ? '' : 'gasRewards', subBuilder: GasRewardsCpv2.create)
    ..aOM<AccountAddress>(10, _omitFieldNames ? '' : 'foundationAccount', subBuilder: AccountAddress.create)
    ..aOM<PoolParametersCpv1>(11, _omitFieldNames ? '' : 'poolParameters', subBuilder: PoolParametersCpv1.create)
    ..aOM<HigherLevelKeys>(12, _omitFieldNames ? '' : 'rootKeys', subBuilder: HigherLevelKeys.create)
    ..aOM<HigherLevelKeys>(13, _omitFieldNames ? '' : 'level1Keys', subBuilder: HigherLevelKeys.create)
    ..aOM<AuthorizationsV1>(14, _omitFieldNames ? '' : 'level2Keys', subBuilder: AuthorizationsV1.create)
    ..aOM<FinalizationCommitteeParameters>(15, _omitFieldNames ? '' : 'finalizationCommitteeParameters', subBuilder: FinalizationCommitteeParameters.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ChainParametersV2 clone() => ChainParametersV2()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ChainParametersV2 copyWith(void Function(ChainParametersV2) updates) => super.copyWith((message) => updates(message as ChainParametersV2)) as ChainParametersV2;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ChainParametersV2 create() => ChainParametersV2._();
  ChainParametersV2 createEmptyInstance() => create();
  static $pb.PbList<ChainParametersV2> createRepeated() => $pb.PbList<ChainParametersV2>();
  @$core.pragma('dart2js:noInline')
  static ChainParametersV2 getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ChainParametersV2>(create);
  static ChainParametersV2? _defaultInstance;

  /// Consensus parameters.
  @$pb.TagNumber(1)
  ConsensusParametersV1 get consensusParameters => $_getN(0);
  @$pb.TagNumber(1)
  set consensusParameters(ConsensusParametersV1 v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasConsensusParameters() => $_has(0);
  @$pb.TagNumber(1)
  void clearConsensusParameters() => clearField(1);
  @$pb.TagNumber(1)
  ConsensusParametersV1 ensureConsensusParameters() => $_ensure(0);

  /// Euro per energy exchange rate.
  @$pb.TagNumber(2)
  ExchangeRate get euroPerEnergy => $_getN(1);
  @$pb.TagNumber(2)
  set euroPerEnergy(ExchangeRate v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEuroPerEnergy() => $_has(1);
  @$pb.TagNumber(2)
  void clearEuroPerEnergy() => clearField(2);
  @$pb.TagNumber(2)
  ExchangeRate ensureEuroPerEnergy() => $_ensure(1);

  /// Micro CCD per euro exchange rate.
  @$pb.TagNumber(3)
  ExchangeRate get microCcdPerEuro => $_getN(2);
  @$pb.TagNumber(3)
  set microCcdPerEuro(ExchangeRate v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasMicroCcdPerEuro() => $_has(2);
  @$pb.TagNumber(3)
  void clearMicroCcdPerEuro() => clearField(3);
  @$pb.TagNumber(3)
  ExchangeRate ensureMicroCcdPerEuro() => $_ensure(2);

  /// Extra number of epochs before reduction in stake, or baker
  /// deregistration is completed.
  @$pb.TagNumber(4)
  CooldownParametersCpv1 get cooldownParameters => $_getN(3);
  @$pb.TagNumber(4)
  set cooldownParameters(CooldownParametersCpv1 v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasCooldownParameters() => $_has(3);
  @$pb.TagNumber(4)
  void clearCooldownParameters() => clearField(4);
  @$pb.TagNumber(4)
  CooldownParametersCpv1 ensureCooldownParameters() => $_ensure(3);

  /// Current time parameters.
  /// The time parameters indicates the mint rate and the
  /// reward period length, i.e. the time between paydays.
  @$pb.TagNumber(5)
  TimeParametersCpv1 get timeParameters => $_getN(4);
  @$pb.TagNumber(5)
  set timeParameters(TimeParametersCpv1 v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasTimeParameters() => $_has(4);
  @$pb.TagNumber(5)
  void clearTimeParameters() => clearField(5);
  @$pb.TagNumber(5)
  TimeParametersCpv1 ensureTimeParameters() => $_ensure(4);

  /// The limit for the number of account creations in a block.
  @$pb.TagNumber(6)
  CredentialsPerBlockLimit get accountCreationLimit => $_getN(5);
  @$pb.TagNumber(6)
  set accountCreationLimit(CredentialsPerBlockLimit v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasAccountCreationLimit() => $_has(5);
  @$pb.TagNumber(6)
  void clearAccountCreationLimit() => clearField(6);
  @$pb.TagNumber(6)
  CredentialsPerBlockLimit ensureAccountCreationLimit() => $_ensure(5);

  /// Current mint distribution
  @$pb.TagNumber(7)
  MintDistributionCpv1 get mintDistribution => $_getN(6);
  @$pb.TagNumber(7)
  set mintDistribution(MintDistributionCpv1 v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasMintDistribution() => $_has(6);
  @$pb.TagNumber(7)
  void clearMintDistribution() => clearField(7);
  @$pb.TagNumber(7)
  MintDistributionCpv1 ensureMintDistribution() => $_ensure(6);

  /// Current transaction fee distribution.
  @$pb.TagNumber(8)
  TransactionFeeDistribution get transactionFeeDistribution => $_getN(7);
  @$pb.TagNumber(8)
  set transactionFeeDistribution(TransactionFeeDistribution v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasTransactionFeeDistribution() => $_has(7);
  @$pb.TagNumber(8)
  void clearTransactionFeeDistribution() => clearField(8);
  @$pb.TagNumber(8)
  TransactionFeeDistribution ensureTransactionFeeDistribution() => $_ensure(7);

  /// Current gas reward parameters.
  @$pb.TagNumber(9)
  GasRewardsCpv2 get gasRewards => $_getN(8);
  @$pb.TagNumber(9)
  set gasRewards(GasRewardsCpv2 v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasGasRewards() => $_has(8);
  @$pb.TagNumber(9)
  void clearGasRewards() => clearField(9);
  @$pb.TagNumber(9)
  GasRewardsCpv2 ensureGasRewards() => $_ensure(8);

  /// The foundation account.
  @$pb.TagNumber(10)
  AccountAddress get foundationAccount => $_getN(9);
  @$pb.TagNumber(10)
  set foundationAccount(AccountAddress v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasFoundationAccount() => $_has(9);
  @$pb.TagNumber(10)
  void clearFoundationAccount() => clearField(10);
  @$pb.TagNumber(10)
  AccountAddress ensureFoundationAccount() => $_ensure(9);

  /// Parameters governing baking pools and their commissions.
  @$pb.TagNumber(11)
  PoolParametersCpv1 get poolParameters => $_getN(10);
  @$pb.TagNumber(11)
  set poolParameters(PoolParametersCpv1 v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasPoolParameters() => $_has(10);
  @$pb.TagNumber(11)
  void clearPoolParameters() => clearField(11);
  @$pb.TagNumber(11)
  PoolParametersCpv1 ensurePoolParameters() => $_ensure(10);

  /// Keys allowed to do root updates.
  @$pb.TagNumber(12)
  HigherLevelKeys get rootKeys => $_getN(11);
  @$pb.TagNumber(12)
  set rootKeys(HigherLevelKeys v) { setField(12, v); }
  @$pb.TagNumber(12)
  $core.bool hasRootKeys() => $_has(11);
  @$pb.TagNumber(12)
  void clearRootKeys() => clearField(12);
  @$pb.TagNumber(12)
  HigherLevelKeys ensureRootKeys() => $_ensure(11);

  /// Keys allowed to do level1 updates;
  @$pb.TagNumber(13)
  HigherLevelKeys get level1Keys => $_getN(12);
  @$pb.TagNumber(13)
  set level1Keys(HigherLevelKeys v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasLevel1Keys() => $_has(12);
  @$pb.TagNumber(13)
  void clearLevel1Keys() => clearField(13);
  @$pb.TagNumber(13)
  HigherLevelKeys ensureLevel1Keys() => $_ensure(12);

  /// Keys allowed to do parameter updates.
  @$pb.TagNumber(14)
  AuthorizationsV1 get level2Keys => $_getN(13);
  @$pb.TagNumber(14)
  set level2Keys(AuthorizationsV1 v) { setField(14, v); }
  @$pb.TagNumber(14)
  $core.bool hasLevel2Keys() => $_has(13);
  @$pb.TagNumber(14)
  void clearLevel2Keys() => clearField(14);
  @$pb.TagNumber(14)
  AuthorizationsV1 ensureLevel2Keys() => $_ensure(13);

  /// Finalization committee parameters
  @$pb.TagNumber(15)
  FinalizationCommitteeParameters get finalizationCommitteeParameters => $_getN(14);
  @$pb.TagNumber(15)
  set finalizationCommitteeParameters(FinalizationCommitteeParameters v) { setField(15, v); }
  @$pb.TagNumber(15)
  $core.bool hasFinalizationCommitteeParameters() => $_has(14);
  @$pb.TagNumber(15)
  void clearFinalizationCommitteeParameters() => clearField(15);
  @$pb.TagNumber(15)
  FinalizationCommitteeParameters ensureFinalizationCommitteeParameters() => $_ensure(14);
}

enum ChainParameters_Parameters {
  v0, 
  v1, 
  v2, 
  notSet
}

/// Chain parameters.
class ChainParameters extends $pb.GeneratedMessage {
  factory ChainParameters({
    ChainParametersV0? v0,
    ChainParametersV1? v1,
    ChainParametersV2? v2,
  }) {
    final $result = create();
    if (v0 != null) {
      $result.v0 = v0;
    }
    if (v1 != null) {
      $result.v1 = v1;
    }
    if (v2 != null) {
      $result.v2 = v2;
    }
    return $result;
  }
  ChainParameters._() : super();
  factory ChainParameters.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ChainParameters.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, ChainParameters_Parameters> _ChainParameters_ParametersByTag = {
    1 : ChainParameters_Parameters.v0,
    2 : ChainParameters_Parameters.v1,
    3 : ChainParameters_Parameters.v2,
    0 : ChainParameters_Parameters.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ChainParameters', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<ChainParametersV0>(1, _omitFieldNames ? '' : 'v0', subBuilder: ChainParametersV0.create)
    ..aOM<ChainParametersV1>(2, _omitFieldNames ? '' : 'v1', subBuilder: ChainParametersV1.create)
    ..aOM<ChainParametersV2>(3, _omitFieldNames ? '' : 'v2', subBuilder: ChainParametersV2.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ChainParameters clone() => ChainParameters()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ChainParameters copyWith(void Function(ChainParameters) updates) => super.copyWith((message) => updates(message as ChainParameters)) as ChainParameters;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ChainParameters create() => ChainParameters._();
  ChainParameters createEmptyInstance() => create();
  static $pb.PbList<ChainParameters> createRepeated() => $pb.PbList<ChainParameters>();
  @$core.pragma('dart2js:noInline')
  static ChainParameters getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ChainParameters>(create);
  static ChainParameters? _defaultInstance;

  ChainParameters_Parameters whichParameters() => _ChainParameters_ParametersByTag[$_whichOneof(0)]!;
  void clearParameters() => clearField($_whichOneof(0));

  /// Chain parameters that apply when the block is a protocol version 1-3 block.
  @$pb.TagNumber(1)
  ChainParametersV0 get v0 => $_getN(0);
  @$pb.TagNumber(1)
  set v0(ChainParametersV0 v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasV0() => $_has(0);
  @$pb.TagNumber(1)
  void clearV0() => clearField(1);
  @$pb.TagNumber(1)
  ChainParametersV0 ensureV0() => $_ensure(0);

  /// Chain parameters that apply when the block is a protocol version 4-5 block.
  @$pb.TagNumber(2)
  ChainParametersV1 get v1 => $_getN(1);
  @$pb.TagNumber(2)
  set v1(ChainParametersV1 v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasV1() => $_has(1);
  @$pb.TagNumber(2)
  void clearV1() => clearField(2);
  @$pb.TagNumber(2)
  ChainParametersV1 ensureV1() => $_ensure(1);

  /// Chain parameters that apply when the block is a protocol version 6- block.
  @$pb.TagNumber(3)
  ChainParametersV2 get v2 => $_getN(2);
  @$pb.TagNumber(3)
  set v2(ChainParametersV2 v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasV2() => $_has(2);
  @$pb.TagNumber(3)
  void clearV2() => clearField(3);
  @$pb.TagNumber(3)
  ChainParametersV2 ensureV2() => $_ensure(2);
}

/// Details about a finalizer for the finalization round.
class FinalizationSummaryParty extends $pb.GeneratedMessage {
  factory FinalizationSummaryParty({
    BakerId? baker,
    $fixnum.Int64? weight,
    $core.bool? signed,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (weight != null) {
      $result.weight = weight;
    }
    if (signed != null) {
      $result.signed = signed;
    }
    return $result;
  }
  FinalizationSummaryParty._() : super();
  factory FinalizationSummaryParty.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory FinalizationSummaryParty.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'FinalizationSummaryParty', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerId>(1, _omitFieldNames ? '' : 'baker', subBuilder: BakerId.create)
    ..a<$fixnum.Int64>(2, _omitFieldNames ? '' : 'weight', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..aOB(3, _omitFieldNames ? '' : 'signed')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  FinalizationSummaryParty clone() => FinalizationSummaryParty()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  FinalizationSummaryParty copyWith(void Function(FinalizationSummaryParty) updates) => super.copyWith((message) => updates(message as FinalizationSummaryParty)) as FinalizationSummaryParty;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static FinalizationSummaryParty create() => FinalizationSummaryParty._();
  FinalizationSummaryParty createEmptyInstance() => create();
  static $pb.PbList<FinalizationSummaryParty> createRepeated() => $pb.PbList<FinalizationSummaryParty>();
  @$core.pragma('dart2js:noInline')
  static FinalizationSummaryParty getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<FinalizationSummaryParty>(create);
  static FinalizationSummaryParty? _defaultInstance;

  /// Baker ID. Every finalizer is in particular a baker.
  @$pb.TagNumber(1)
  BakerId get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(BakerId v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  BakerId ensureBaker() => $_ensure(0);

  /// The weight of the finalizer in the committee. This is an "absolute" weight.
  @$pb.TagNumber(2)
  $fixnum.Int64 get weight => $_getI64(1);
  @$pb.TagNumber(2)
  set weight($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasWeight() => $_has(1);
  @$pb.TagNumber(2)
  void clearWeight() => clearField(2);

  /// Whether the finalizer's signature was present on the particular finalization record.
  @$pb.TagNumber(3)
  $core.bool get signed => $_getBF(2);
  @$pb.TagNumber(3)
  set signed($core.bool v) { $_setBool(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasSigned() => $_has(2);
  @$pb.TagNumber(3)
  void clearSigned() => clearField(3);
}

/// Index of the finalization round. This increases on each successfully
/// completed finalization.
class FinalizationIndex extends $pb.GeneratedMessage {
  factory FinalizationIndex({
    $fixnum.Int64? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  FinalizationIndex._() : super();
  factory FinalizationIndex.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory FinalizationIndex.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'FinalizationIndex', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$fixnum.Int64>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OU6, defaultOrMaker: $fixnum.Int64.ZERO)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  FinalizationIndex clone() => FinalizationIndex()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  FinalizationIndex copyWith(void Function(FinalizationIndex) updates) => super.copyWith((message) => updates(message as FinalizationIndex)) as FinalizationIndex;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static FinalizationIndex create() => FinalizationIndex._();
  FinalizationIndex createEmptyInstance() => create();
  static $pb.PbList<FinalizationIndex> createRepeated() => $pb.PbList<FinalizationIndex>();
  @$core.pragma('dart2js:noInline')
  static FinalizationIndex getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<FinalizationIndex>(create);
  static FinalizationIndex? _defaultInstance;

  @$pb.TagNumber(1)
  $fixnum.Int64 get value => $_getI64(0);
  @$pb.TagNumber(1)
  set value($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// Details about a finalization record included in a block.
class FinalizationSummary extends $pb.GeneratedMessage {
  factory FinalizationSummary({
    BlockHash? block,
    FinalizationIndex? index,
    BlockHeight? delay,
    $core.Iterable<FinalizationSummaryParty>? finalizers,
  }) {
    final $result = create();
    if (block != null) {
      $result.block = block;
    }
    if (index != null) {
      $result.index = index;
    }
    if (delay != null) {
      $result.delay = delay;
    }
    if (finalizers != null) {
      $result.finalizers.addAll(finalizers);
    }
    return $result;
  }
  FinalizationSummary._() : super();
  factory FinalizationSummary.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory FinalizationSummary.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'FinalizationSummary', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'block', subBuilder: BlockHash.create)
    ..aOM<FinalizationIndex>(2, _omitFieldNames ? '' : 'index', subBuilder: FinalizationIndex.create)
    ..aOM<BlockHeight>(3, _omitFieldNames ? '' : 'delay', subBuilder: BlockHeight.create)
    ..pc<FinalizationSummaryParty>(4, _omitFieldNames ? '' : 'finalizers', $pb.PbFieldType.PM, subBuilder: FinalizationSummaryParty.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  FinalizationSummary clone() => FinalizationSummary()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  FinalizationSummary copyWith(void Function(FinalizationSummary) updates) => super.copyWith((message) => updates(message as FinalizationSummary)) as FinalizationSummary;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static FinalizationSummary create() => FinalizationSummary._();
  FinalizationSummary createEmptyInstance() => create();
  static $pb.PbList<FinalizationSummary> createRepeated() => $pb.PbList<FinalizationSummary>();
  @$core.pragma('dart2js:noInline')
  static FinalizationSummary getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<FinalizationSummary>(create);
  static FinalizationSummary? _defaultInstance;

  /// Block that was finalized by the finalization record.
  @$pb.TagNumber(1)
  BlockHash get block => $_getN(0);
  @$pb.TagNumber(1)
  set block(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlock() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlock() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureBlock() => $_ensure(0);

  /// Index of the finalization round that finalized the block.
  @$pb.TagNumber(2)
  FinalizationIndex get index => $_getN(1);
  @$pb.TagNumber(2)
  set index(FinalizationIndex v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasIndex() => $_has(1);
  @$pb.TagNumber(2)
  void clearIndex() => clearField(2);
  @$pb.TagNumber(2)
  FinalizationIndex ensureIndex() => $_ensure(1);

  /// Finalization delay used for the finalization round.
  @$pb.TagNumber(3)
  BlockHeight get delay => $_getN(2);
  @$pb.TagNumber(3)
  set delay(BlockHeight v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasDelay() => $_has(2);
  @$pb.TagNumber(3)
  void clearDelay() => clearField(3);
  @$pb.TagNumber(3)
  BlockHeight ensureDelay() => $_ensure(2);

  /// List of all finalizers with information about whether they signed the
  /// finalization record or not.
  @$pb.TagNumber(4)
  $core.List<FinalizationSummaryParty> get finalizers => $_getList(3);
}

enum BlockFinalizationSummary_Summary {
  none, 
  record, 
  notSet
}

/// Finalization summary that may or may not be part of the block.
class BlockFinalizationSummary extends $pb.GeneratedMessage {
  factory BlockFinalizationSummary({
    Empty? none,
    FinalizationSummary? record,
  }) {
    final $result = create();
    if (none != null) {
      $result.none = none;
    }
    if (record != null) {
      $result.record = record;
    }
    return $result;
  }
  BlockFinalizationSummary._() : super();
  factory BlockFinalizationSummary.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockFinalizationSummary.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BlockFinalizationSummary_Summary> _BlockFinalizationSummary_SummaryByTag = {
    1 : BlockFinalizationSummary_Summary.none,
    2 : BlockFinalizationSummary_Summary.record,
    0 : BlockFinalizationSummary_Summary.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockFinalizationSummary', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<Empty>(1, _omitFieldNames ? '' : 'none', subBuilder: Empty.create)
    ..aOM<FinalizationSummary>(2, _omitFieldNames ? '' : 'record', subBuilder: FinalizationSummary.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockFinalizationSummary clone() => BlockFinalizationSummary()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockFinalizationSummary copyWith(void Function(BlockFinalizationSummary) updates) => super.copyWith((message) => updates(message as BlockFinalizationSummary)) as BlockFinalizationSummary;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockFinalizationSummary create() => BlockFinalizationSummary._();
  BlockFinalizationSummary createEmptyInstance() => create();
  static $pb.PbList<BlockFinalizationSummary> createRepeated() => $pb.PbList<BlockFinalizationSummary>();
  @$core.pragma('dart2js:noInline')
  static BlockFinalizationSummary getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockFinalizationSummary>(create);
  static BlockFinalizationSummary? _defaultInstance;

  BlockFinalizationSummary_Summary whichSummary() => _BlockFinalizationSummary_SummaryByTag[$_whichOneof(0)]!;
  void clearSummary() => clearField($_whichOneof(0));

  /// There is no finalization data in the block.
  @$pb.TagNumber(1)
  Empty get none => $_getN(0);
  @$pb.TagNumber(1)
  set none(Empty v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasNone() => $_has(0);
  @$pb.TagNumber(1)
  void clearNone() => clearField(1);
  @$pb.TagNumber(1)
  Empty ensureNone() => $_ensure(0);

  /// There is a single finalization record with the block.
  @$pb.TagNumber(2)
  FinalizationSummary get record => $_getN(1);
  @$pb.TagNumber(2)
  set record(FinalizationSummary v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRecord() => $_has(1);
  @$pb.TagNumber(2)
  void clearRecord() => clearField(2);
  @$pb.TagNumber(2)
  FinalizationSummary ensureRecord() => $_ensure(1);
}

enum BlockItem_BlockItem {
  accountTransaction, 
  credentialDeployment, 
  updateInstruction, 
  notSet
}

class BlockItem extends $pb.GeneratedMessage {
  factory BlockItem({
    TransactionHash? hash,
    AccountTransaction? accountTransaction,
    CredentialDeployment? credentialDeployment,
    UpdateInstruction? updateInstruction,
  }) {
    final $result = create();
    if (hash != null) {
      $result.hash = hash;
    }
    if (accountTransaction != null) {
      $result.accountTransaction = accountTransaction;
    }
    if (credentialDeployment != null) {
      $result.credentialDeployment = credentialDeployment;
    }
    if (updateInstruction != null) {
      $result.updateInstruction = updateInstruction;
    }
    return $result;
  }
  BlockItem._() : super();
  factory BlockItem.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockItem.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, BlockItem_BlockItem> _BlockItem_BlockItemByTag = {
    2 : BlockItem_BlockItem.accountTransaction,
    3 : BlockItem_BlockItem.credentialDeployment,
    4 : BlockItem_BlockItem.updateInstruction,
    0 : BlockItem_BlockItem.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockItem', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [2, 3, 4])
    ..aOM<TransactionHash>(1, _omitFieldNames ? '' : 'hash', subBuilder: TransactionHash.create)
    ..aOM<AccountTransaction>(2, _omitFieldNames ? '' : 'accountTransaction', subBuilder: AccountTransaction.create)
    ..aOM<CredentialDeployment>(3, _omitFieldNames ? '' : 'credentialDeployment', subBuilder: CredentialDeployment.create)
    ..aOM<UpdateInstruction>(4, _omitFieldNames ? '' : 'updateInstruction', subBuilder: UpdateInstruction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockItem clone() => BlockItem()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockItem copyWith(void Function(BlockItem) updates) => super.copyWith((message) => updates(message as BlockItem)) as BlockItem;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockItem create() => BlockItem._();
  BlockItem createEmptyInstance() => create();
  static $pb.PbList<BlockItem> createRepeated() => $pb.PbList<BlockItem>();
  @$core.pragma('dart2js:noInline')
  static BlockItem getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockItem>(create);
  static BlockItem? _defaultInstance;

  BlockItem_BlockItem whichBlockItem() => _BlockItem_BlockItemByTag[$_whichOneof(0)]!;
  void clearBlockItem() => clearField($_whichOneof(0));

  /// The hash of the block item that identifies it to the chain.
  @$pb.TagNumber(1)
  TransactionHash get hash => $_getN(0);
  @$pb.TagNumber(1)
  set hash(TransactionHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearHash() => clearField(1);
  @$pb.TagNumber(1)
  TransactionHash ensureHash() => $_ensure(0);

  /// Account transactions are messages which are signed and paid for by an account.
  @$pb.TagNumber(2)
  AccountTransaction get accountTransaction => $_getN(1);
  @$pb.TagNumber(2)
  set accountTransaction(AccountTransaction v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAccountTransaction() => $_has(1);
  @$pb.TagNumber(2)
  void clearAccountTransaction() => clearField(2);
  @$pb.TagNumber(2)
  AccountTransaction ensureAccountTransaction() => $_ensure(1);

  /// Credential deployments create new accounts. They are not paid for
  /// directly by the sender. Instead, bakers are rewarded by the protocol for
  /// including them.
  @$pb.TagNumber(3)
  CredentialDeployment get credentialDeployment => $_getN(2);
  @$pb.TagNumber(3)
  set credentialDeployment(CredentialDeployment v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasCredentialDeployment() => $_has(2);
  @$pb.TagNumber(3)
  void clearCredentialDeployment() => clearField(3);
  @$pb.TagNumber(3)
  CredentialDeployment ensureCredentialDeployment() => $_ensure(2);

  /// Update instructions are messages which can update the chain parameters. Including which keys are allowed
  /// to make future update instructions.
  @$pb.TagNumber(4)
  UpdateInstruction get updateInstruction => $_getN(3);
  @$pb.TagNumber(4)
  set updateInstruction(UpdateInstruction v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasUpdateInstruction() => $_has(3);
  @$pb.TagNumber(4)
  void clearUpdateInstruction() => clearField(4);
  @$pb.TagNumber(4)
  UpdateInstruction ensureUpdateInstruction() => $_ensure(3);
}

/// Information about a particular baker with respect to
/// the current reward period.
class BakerRewardPeriodInfo extends $pb.GeneratedMessage {
  factory BakerRewardPeriodInfo({
    BakerInfo? baker,
    Amount? effectiveStake,
    CommissionRates? commissionRates,
    Amount? equityCapital,
    Amount? delegatedCapital,
    $core.bool? isFinalizer,
  }) {
    final $result = create();
    if (baker != null) {
      $result.baker = baker;
    }
    if (effectiveStake != null) {
      $result.effectiveStake = effectiveStake;
    }
    if (commissionRates != null) {
      $result.commissionRates = commissionRates;
    }
    if (equityCapital != null) {
      $result.equityCapital = equityCapital;
    }
    if (delegatedCapital != null) {
      $result.delegatedCapital = delegatedCapital;
    }
    if (isFinalizer != null) {
      $result.isFinalizer = isFinalizer;
    }
    return $result;
  }
  BakerRewardPeriodInfo._() : super();
  factory BakerRewardPeriodInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BakerRewardPeriodInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BakerRewardPeriodInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BakerInfo>(1, _omitFieldNames ? '' : 'baker', subBuilder: BakerInfo.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'effectiveStake', subBuilder: Amount.create)
    ..aOM<CommissionRates>(3, _omitFieldNames ? '' : 'commissionRates', subBuilder: CommissionRates.create)
    ..aOM<Amount>(4, _omitFieldNames ? '' : 'equityCapital', subBuilder: Amount.create)
    ..aOM<Amount>(5, _omitFieldNames ? '' : 'delegatedCapital', subBuilder: Amount.create)
    ..aOB(6, _omitFieldNames ? '' : 'isFinalizer')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BakerRewardPeriodInfo clone() => BakerRewardPeriodInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BakerRewardPeriodInfo copyWith(void Function(BakerRewardPeriodInfo) updates) => super.copyWith((message) => updates(message as BakerRewardPeriodInfo)) as BakerRewardPeriodInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BakerRewardPeriodInfo create() => BakerRewardPeriodInfo._();
  BakerRewardPeriodInfo createEmptyInstance() => create();
  static $pb.PbList<BakerRewardPeriodInfo> createRepeated() => $pb.PbList<BakerRewardPeriodInfo>();
  @$core.pragma('dart2js:noInline')
  static BakerRewardPeriodInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BakerRewardPeriodInfo>(create);
  static BakerRewardPeriodInfo? _defaultInstance;

  /// The baker id and public keys for the baker.
  @$pb.TagNumber(1)
  BakerInfo get baker => $_getN(0);
  @$pb.TagNumber(1)
  set baker(BakerInfo v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBaker() => $_has(0);
  @$pb.TagNumber(1)
  void clearBaker() => clearField(1);
  @$pb.TagNumber(1)
  BakerInfo ensureBaker() => $_ensure(0);

  /// The effective stake of the baker for the consensus protocol.
  /// The returned amount accounts for delegation, capital bounds and leverage bounds.
  @$pb.TagNumber(2)
  Amount get effectiveStake => $_getN(1);
  @$pb.TagNumber(2)
  set effectiveStake(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEffectiveStake() => $_has(1);
  @$pb.TagNumber(2)
  void clearEffectiveStake() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureEffectiveStake() => $_ensure(1);

  /// The effective commission rate for the baker that applies for the reward period.
  @$pb.TagNumber(3)
  CommissionRates get commissionRates => $_getN(2);
  @$pb.TagNumber(3)
  set commissionRates(CommissionRates v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasCommissionRates() => $_has(2);
  @$pb.TagNumber(3)
  void clearCommissionRates() => clearField(3);
  @$pb.TagNumber(3)
  CommissionRates ensureCommissionRates() => $_ensure(2);

  /// The amount staked by the baker itself.
  @$pb.TagNumber(4)
  Amount get equityCapital => $_getN(3);
  @$pb.TagNumber(4)
  set equityCapital(Amount v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasEquityCapital() => $_has(3);
  @$pb.TagNumber(4)
  void clearEquityCapital() => clearField(4);
  @$pb.TagNumber(4)
  Amount ensureEquityCapital() => $_ensure(3);

  /// The total amount of capital delegated to this baker pool.
  @$pb.TagNumber(5)
  Amount get delegatedCapital => $_getN(4);
  @$pb.TagNumber(5)
  set delegatedCapital(Amount v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasDelegatedCapital() => $_has(4);
  @$pb.TagNumber(5)
  void clearDelegatedCapital() => clearField(5);
  @$pb.TagNumber(5)
  Amount ensureDelegatedCapital() => $_ensure(4);

  /// Whether the baker is a finalizer or not.
  @$pb.TagNumber(6)
  $core.bool get isFinalizer => $_getBF(5);
  @$pb.TagNumber(6)
  set isFinalizer($core.bool v) { $_setBool(5, v); }
  @$pb.TagNumber(6)
  $core.bool hasIsFinalizer() => $_has(5);
  @$pb.TagNumber(6)
  void clearIsFinalizer() => clearField(6);
}

/// The signature of a 'QuorumCertificate'.
class QuorumSignature extends $pb.GeneratedMessage {
  factory QuorumSignature({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  QuorumSignature._() : super();
  factory QuorumSignature.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory QuorumSignature.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'QuorumSignature', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  QuorumSignature clone() => QuorumSignature()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  QuorumSignature copyWith(void Function(QuorumSignature) updates) => super.copyWith((message) => updates(message as QuorumSignature)) as QuorumSignature;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static QuorumSignature create() => QuorumSignature._();
  QuorumSignature createEmptyInstance() => create();
  static $pb.PbList<QuorumSignature> createRepeated() => $pb.PbList<QuorumSignature>();
  @$core.pragma('dart2js:noInline')
  static QuorumSignature getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<QuorumSignature>(create);
  static QuorumSignature? _defaultInstance;

  /// The bytes representing the raw aggregate signature.
  /// The bytes have a fixed length of 48 bytes.
  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A quorum certificate is the certificate that the
/// finalization comittee issues in order to certify a block.
/// A block must be certified before it will be part of the
/// authorative part of the chain.
class QuorumCertificate extends $pb.GeneratedMessage {
  factory QuorumCertificate({
    BlockHash? blockHash,
    Round? round,
    Epoch? epoch,
    QuorumSignature? aggregateSignature,
    $core.Iterable<BakerId>? signatories,
  }) {
    final $result = create();
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (round != null) {
      $result.round = round;
    }
    if (epoch != null) {
      $result.epoch = epoch;
    }
    if (aggregateSignature != null) {
      $result.aggregateSignature = aggregateSignature;
    }
    if (signatories != null) {
      $result.signatories.addAll(signatories);
    }
    return $result;
  }
  QuorumCertificate._() : super();
  factory QuorumCertificate.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory QuorumCertificate.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'QuorumCertificate', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<BlockHash>(1, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHash.create)
    ..aOM<Round>(2, _omitFieldNames ? '' : 'round', subBuilder: Round.create)
    ..aOM<Epoch>(3, _omitFieldNames ? '' : 'epoch', subBuilder: Epoch.create)
    ..aOM<QuorumSignature>(4, _omitFieldNames ? '' : 'aggregateSignature', subBuilder: QuorumSignature.create)
    ..pc<BakerId>(5, _omitFieldNames ? '' : 'signatories', $pb.PbFieldType.PM, subBuilder: BakerId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  QuorumCertificate clone() => QuorumCertificate()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  QuorumCertificate copyWith(void Function(QuorumCertificate) updates) => super.copyWith((message) => updates(message as QuorumCertificate)) as QuorumCertificate;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static QuorumCertificate create() => QuorumCertificate._();
  QuorumCertificate createEmptyInstance() => create();
  static $pb.PbList<QuorumCertificate> createRepeated() => $pb.PbList<QuorumCertificate>();
  @$core.pragma('dart2js:noInline')
  static QuorumCertificate getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<QuorumCertificate>(create);
  static QuorumCertificate? _defaultInstance;

  /// The hash of the block that the quorum certificate refers to.
  @$pb.TagNumber(1)
  BlockHash get blockHash => $_getN(0);
  @$pb.TagNumber(1)
  set blockHash(BlockHash v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockHash() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockHash() => clearField(1);
  @$pb.TagNumber(1)
  BlockHash ensureBlockHash() => $_ensure(0);

  /// The round of the block.
  @$pb.TagNumber(2)
  Round get round => $_getN(1);
  @$pb.TagNumber(2)
  set round(Round v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasRound() => $_has(1);
  @$pb.TagNumber(2)
  void clearRound() => clearField(2);
  @$pb.TagNumber(2)
  Round ensureRound() => $_ensure(1);

  /// The epoch of the block.
  @$pb.TagNumber(3)
  Epoch get epoch => $_getN(2);
  @$pb.TagNumber(3)
  set epoch(Epoch v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEpoch() => $_has(2);
  @$pb.TagNumber(3)
  void clearEpoch() => clearField(3);
  @$pb.TagNumber(3)
  Epoch ensureEpoch() => $_ensure(2);

  /// The aggregated signature by the finalization committee on the block.
  @$pb.TagNumber(4)
  QuorumSignature get aggregateSignature => $_getN(3);
  @$pb.TagNumber(4)
  set aggregateSignature(QuorumSignature v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasAggregateSignature() => $_has(3);
  @$pb.TagNumber(4)
  void clearAggregateSignature() => clearField(4);
  @$pb.TagNumber(4)
  QuorumSignature ensureAggregateSignature() => $_ensure(3);

  /// A list of the finalizers that formed the quorum certificate
  /// i.e., the ones who have contributed to the 'aggregate_siganture'.
  /// The finalizers are identified by their baker id as this is stable
  /// across protocols and epochs.
  @$pb.TagNumber(5)
  $core.List<BakerId> get signatories => $_getList(4);
}

/// The finalizer round is a map from a 'Round'
/// to the list of finalizers (identified by their 'BakerId') that signed
/// off the round.
class FinalizerRound extends $pb.GeneratedMessage {
  factory FinalizerRound({
    Round? round,
    $core.Iterable<BakerId>? finalizers,
  }) {
    final $result = create();
    if (round != null) {
      $result.round = round;
    }
    if (finalizers != null) {
      $result.finalizers.addAll(finalizers);
    }
    return $result;
  }
  FinalizerRound._() : super();
  factory FinalizerRound.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory FinalizerRound.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'FinalizerRound', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Round>(1, _omitFieldNames ? '' : 'round', subBuilder: Round.create)
    ..pc<BakerId>(2, _omitFieldNames ? '' : 'finalizers', $pb.PbFieldType.PM, subBuilder: BakerId.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  FinalizerRound clone() => FinalizerRound()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  FinalizerRound copyWith(void Function(FinalizerRound) updates) => super.copyWith((message) => updates(message as FinalizerRound)) as FinalizerRound;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static FinalizerRound create() => FinalizerRound._();
  FinalizerRound createEmptyInstance() => create();
  static $pb.PbList<FinalizerRound> createRepeated() => $pb.PbList<FinalizerRound>();
  @$core.pragma('dart2js:noInline')
  static FinalizerRound getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<FinalizerRound>(create);
  static FinalizerRound? _defaultInstance;

  /// The round that was signed off.
  @$pb.TagNumber(1)
  Round get round => $_getN(0);
  @$pb.TagNumber(1)
  set round(Round v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRound() => $_has(0);
  @$pb.TagNumber(1)
  void clearRound() => clearField(1);
  @$pb.TagNumber(1)
  Round ensureRound() => $_ensure(0);

  /// The finalizers (identified by their 'BakerId' that
  /// signed off the in 'round'.
  @$pb.TagNumber(2)
  $core.List<BakerId> get finalizers => $_getList(1);
}

/// The signature of a 'TimeoutCertificate'.
class TimeoutSignature extends $pb.GeneratedMessage {
  factory TimeoutSignature({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  TimeoutSignature._() : super();
  factory TimeoutSignature.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TimeoutSignature.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TimeoutSignature', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TimeoutSignature clone() => TimeoutSignature()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TimeoutSignature copyWith(void Function(TimeoutSignature) updates) => super.copyWith((message) => updates(message as TimeoutSignature)) as TimeoutSignature;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TimeoutSignature create() => TimeoutSignature._();
  TimeoutSignature createEmptyInstance() => create();
  static $pb.PbList<TimeoutSignature> createRepeated() => $pb.PbList<TimeoutSignature>();
  @$core.pragma('dart2js:noInline')
  static TimeoutSignature getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TimeoutSignature>(create);
  static TimeoutSignature? _defaultInstance;

  /// The bytes representing the raw aggregate signature.
  /// The bytes have a fixed length of 48 bytes.
  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// A timeout certificate is the certificate that the
/// finalization committee issues when a round times out,
/// thus making it possible for the protocol to proceed to the
/// next round.
class TimeoutCertificate extends $pb.GeneratedMessage {
  factory TimeoutCertificate({
    Round? round,
    Epoch? minEpoch,
    $core.Iterable<FinalizerRound>? qcRoundsFirstEpoch,
    $core.Iterable<FinalizerRound>? qcRoundsSecondEpoch,
    TimeoutSignature? aggregateSignature,
  }) {
    final $result = create();
    if (round != null) {
      $result.round = round;
    }
    if (minEpoch != null) {
      $result.minEpoch = minEpoch;
    }
    if (qcRoundsFirstEpoch != null) {
      $result.qcRoundsFirstEpoch.addAll(qcRoundsFirstEpoch);
    }
    if (qcRoundsSecondEpoch != null) {
      $result.qcRoundsSecondEpoch.addAll(qcRoundsSecondEpoch);
    }
    if (aggregateSignature != null) {
      $result.aggregateSignature = aggregateSignature;
    }
    return $result;
  }
  TimeoutCertificate._() : super();
  factory TimeoutCertificate.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory TimeoutCertificate.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'TimeoutCertificate', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Round>(1, _omitFieldNames ? '' : 'round', subBuilder: Round.create)
    ..aOM<Epoch>(2, _omitFieldNames ? '' : 'minEpoch', subBuilder: Epoch.create)
    ..pc<FinalizerRound>(3, _omitFieldNames ? '' : 'qcRoundsFirstEpoch', $pb.PbFieldType.PM, subBuilder: FinalizerRound.create)
    ..pc<FinalizerRound>(4, _omitFieldNames ? '' : 'qcRoundsSecondEpoch', $pb.PbFieldType.PM, subBuilder: FinalizerRound.create)
    ..aOM<TimeoutSignature>(5, _omitFieldNames ? '' : 'aggregateSignature', subBuilder: TimeoutSignature.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  TimeoutCertificate clone() => TimeoutCertificate()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  TimeoutCertificate copyWith(void Function(TimeoutCertificate) updates) => super.copyWith((message) => updates(message as TimeoutCertificate)) as TimeoutCertificate;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static TimeoutCertificate create() => TimeoutCertificate._();
  TimeoutCertificate createEmptyInstance() => create();
  static $pb.PbList<TimeoutCertificate> createRepeated() => $pb.PbList<TimeoutCertificate>();
  @$core.pragma('dart2js:noInline')
  static TimeoutCertificate getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<TimeoutCertificate>(create);
  static TimeoutCertificate? _defaultInstance;

  /// The round that timed out.
  @$pb.TagNumber(1)
  Round get round => $_getN(0);
  @$pb.TagNumber(1)
  set round(Round v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRound() => $_has(0);
  @$pb.TagNumber(1)
  void clearRound() => clearField(1);
  @$pb.TagNumber(1)
  Round ensureRound() => $_ensure(0);

  /// The minimum epoch of which signatures are included
  /// in the 'aggregate_signature'.
  @$pb.TagNumber(2)
  Epoch get minEpoch => $_getN(1);
  @$pb.TagNumber(2)
  set minEpoch(Epoch v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasMinEpoch() => $_has(1);
  @$pb.TagNumber(2)
  void clearMinEpoch() => clearField(2);
  @$pb.TagNumber(2)
  Epoch ensureMinEpoch() => $_ensure(1);

  /// The rounds of which finalizers have their best
  /// QCs in the 'min_epoch'.
  @$pb.TagNumber(3)
  $core.List<FinalizerRound> get qcRoundsFirstEpoch => $_getList(2);

  /// The rounds of which finalizers have their best
  /// QCs in the epoch 'min_epoch' + 1.
  @$pb.TagNumber(4)
  $core.List<FinalizerRound> get qcRoundsSecondEpoch => $_getList(3);

  /// The aggregated signature by the finalization committee that witnessed
  /// the 'round' timed out.
  @$pb.TagNumber(5)
  TimeoutSignature get aggregateSignature => $_getN(4);
  @$pb.TagNumber(5)
  set aggregateSignature(TimeoutSignature v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasAggregateSignature() => $_has(4);
  @$pb.TagNumber(5)
  void clearAggregateSignature() => clearField(5);
  @$pb.TagNumber(5)
  TimeoutSignature ensureAggregateSignature() => $_ensure(4);
}

/// A proof that establishes that the successor block of
/// a 'EpochFinalizationEntry' is the immediate successor of
/// the finalized block.
class SuccessorProof extends $pb.GeneratedMessage {
  factory SuccessorProof({
    $core.List<$core.int>? value,
  }) {
    final $result = create();
    if (value != null) {
      $result.value = value;
    }
    return $result;
  }
  SuccessorProof._() : super();
  factory SuccessorProof.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory SuccessorProof.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'SuccessorProof', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'value', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  SuccessorProof clone() => SuccessorProof()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  SuccessorProof copyWith(void Function(SuccessorProof) updates) => super.copyWith((message) => updates(message as SuccessorProof)) as SuccessorProof;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static SuccessorProof create() => SuccessorProof._();
  SuccessorProof createEmptyInstance() => create();
  static $pb.PbList<SuccessorProof> createRepeated() => $pb.PbList<SuccessorProof>();
  @$core.pragma('dart2js:noInline')
  static SuccessorProof getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<SuccessorProof>(create);
  static SuccessorProof? _defaultInstance;

  /// The proof represented as raw bytes.
  /// The bytes have a fixed length of 32 bytes.
  @$pb.TagNumber(1)
  $core.List<$core.int> get value => $_getN(0);
  @$pb.TagNumber(1)
  set value($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearValue() => clearField(1);
}

/// The epoch finalization entry is the proof that
/// makes the protocol able to advance to a new epoch.
/// I.e. the 'EpochFinalizationEntry' is present if and only if
/// the block is the first block of a new 'Epoch'.
class EpochFinalizationEntry extends $pb.GeneratedMessage {
  factory EpochFinalizationEntry({
    QuorumCertificate? finalizedQc,
    QuorumCertificate? successorQc,
    SuccessorProof? successorProof,
  }) {
    final $result = create();
    if (finalizedQc != null) {
      $result.finalizedQc = finalizedQc;
    }
    if (successorQc != null) {
      $result.successorQc = successorQc;
    }
    if (successorProof != null) {
      $result.successorProof = successorProof;
    }
    return $result;
  }
  EpochFinalizationEntry._() : super();
  factory EpochFinalizationEntry.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory EpochFinalizationEntry.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'EpochFinalizationEntry', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<QuorumCertificate>(1, _omitFieldNames ? '' : 'finalizedQc', subBuilder: QuorumCertificate.create)
    ..aOM<QuorumCertificate>(2, _omitFieldNames ? '' : 'successorQc', subBuilder: QuorumCertificate.create)
    ..aOM<SuccessorProof>(3, _omitFieldNames ? '' : 'successorProof', subBuilder: SuccessorProof.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  EpochFinalizationEntry clone() => EpochFinalizationEntry()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  EpochFinalizationEntry copyWith(void Function(EpochFinalizationEntry) updates) => super.copyWith((message) => updates(message as EpochFinalizationEntry)) as EpochFinalizationEntry;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static EpochFinalizationEntry create() => EpochFinalizationEntry._();
  EpochFinalizationEntry createEmptyInstance() => create();
  static $pb.PbList<EpochFinalizationEntry> createRepeated() => $pb.PbList<EpochFinalizationEntry>();
  @$core.pragma('dart2js:noInline')
  static EpochFinalizationEntry getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<EpochFinalizationEntry>(create);
  static EpochFinalizationEntry? _defaultInstance;

  /// The quorum certificate for the finalized block.
  @$pb.TagNumber(1)
  QuorumCertificate get finalizedQc => $_getN(0);
  @$pb.TagNumber(1)
  set finalizedQc(QuorumCertificate v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasFinalizedQc() => $_has(0);
  @$pb.TagNumber(1)
  void clearFinalizedQc() => clearField(1);
  @$pb.TagNumber(1)
  QuorumCertificate ensureFinalizedQc() => $_ensure(0);

  /// The quorum certificate for the block that finalizes
  /// the block that 'finalized_qc' points to.
  @$pb.TagNumber(2)
  QuorumCertificate get successorQc => $_getN(1);
  @$pb.TagNumber(2)
  set successorQc(QuorumCertificate v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasSuccessorQc() => $_has(1);
  @$pb.TagNumber(2)
  void clearSuccessorQc() => clearField(2);
  @$pb.TagNumber(2)
  QuorumCertificate ensureSuccessorQc() => $_ensure(1);

  /// A proof that the successor block is an immediate
  /// successor of the finalized block.
  @$pb.TagNumber(3)
  SuccessorProof get successorProof => $_getN(2);
  @$pb.TagNumber(3)
  set successorProof(SuccessorProof v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasSuccessorProof() => $_has(2);
  @$pb.TagNumber(3)
  void clearSuccessorProof() => clearField(3);
  @$pb.TagNumber(3)
  SuccessorProof ensureSuccessorProof() => $_ensure(2);
}

/// Certificates for a block for protocols supporting
/// ConcordiumBFT.
class BlockCertificates extends $pb.GeneratedMessage {
  factory BlockCertificates({
    QuorumCertificate? quorumCertificate,
    TimeoutCertificate? timeoutCertificate,
    EpochFinalizationEntry? epochFinalizationEntry,
  }) {
    final $result = create();
    if (quorumCertificate != null) {
      $result.quorumCertificate = quorumCertificate;
    }
    if (timeoutCertificate != null) {
      $result.timeoutCertificate = timeoutCertificate;
    }
    if (epochFinalizationEntry != null) {
      $result.epochFinalizationEntry = epochFinalizationEntry;
    }
    return $result;
  }
  BlockCertificates._() : super();
  factory BlockCertificates.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BlockCertificates.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BlockCertificates', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<QuorumCertificate>(1, _omitFieldNames ? '' : 'quorumCertificate', subBuilder: QuorumCertificate.create)
    ..aOM<TimeoutCertificate>(2, _omitFieldNames ? '' : 'timeoutCertificate', subBuilder: TimeoutCertificate.create)
    ..aOM<EpochFinalizationEntry>(3, _omitFieldNames ? '' : 'epochFinalizationEntry', subBuilder: EpochFinalizationEntry.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BlockCertificates clone() => BlockCertificates()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BlockCertificates copyWith(void Function(BlockCertificates) updates) => super.copyWith((message) => updates(message as BlockCertificates)) as BlockCertificates;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BlockCertificates create() => BlockCertificates._();
  BlockCertificates createEmptyInstance() => create();
  static $pb.PbList<BlockCertificates> createRepeated() => $pb.PbList<BlockCertificates>();
  @$core.pragma('dart2js:noInline')
  static BlockCertificates getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BlockCertificates>(create);
  static BlockCertificates? _defaultInstance;

  /// The quorum certificate. Is present if and only if the block is
  /// not a genesis block.
  @$pb.TagNumber(1)
  QuorumCertificate get quorumCertificate => $_getN(0);
  @$pb.TagNumber(1)
  set quorumCertificate(QuorumCertificate v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasQuorumCertificate() => $_has(0);
  @$pb.TagNumber(1)
  void clearQuorumCertificate() => clearField(1);
  @$pb.TagNumber(1)
  QuorumCertificate ensureQuorumCertificate() => $_ensure(0);

  /// The timeout certificate. Is present only if the round prior to the
  /// round of the block timed out.
  @$pb.TagNumber(2)
  TimeoutCertificate get timeoutCertificate => $_getN(1);
  @$pb.TagNumber(2)
  set timeoutCertificate(TimeoutCertificate v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasTimeoutCertificate() => $_has(1);
  @$pb.TagNumber(2)
  void clearTimeoutCertificate() => clearField(2);
  @$pb.TagNumber(2)
  TimeoutCertificate ensureTimeoutCertificate() => $_ensure(1);

  /// The epoch finalization entry. Is present only if the block initiates
  /// a new epoch.
  @$pb.TagNumber(3)
  EpochFinalizationEntry get epochFinalizationEntry => $_getN(2);
  @$pb.TagNumber(3)
  set epochFinalizationEntry(EpochFinalizationEntry v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEpochFinalizationEntry() => $_has(2);
  @$pb.TagNumber(3)
  void clearEpochFinalizationEntry() => clearField(3);
  @$pb.TagNumber(3)
  EpochFinalizationEntry ensureEpochFinalizationEntry() => $_ensure(2);
}

/// Details of which baker won the lottery in a given round in consensus version 1.
class WinningBaker extends $pb.GeneratedMessage {
  factory WinningBaker({
    Round? round,
    BakerId? winner,
    $core.bool? present,
  }) {
    final $result = create();
    if (round != null) {
      $result.round = round;
    }
    if (winner != null) {
      $result.winner = winner;
    }
    if (present != null) {
      $result.present = present;
    }
    return $result;
  }
  WinningBaker._() : super();
  factory WinningBaker.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory WinningBaker.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'WinningBaker', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Round>(1, _omitFieldNames ? '' : 'round', subBuilder: Round.create)
    ..aOM<BakerId>(2, _omitFieldNames ? '' : 'winner', subBuilder: BakerId.create)
    ..aOB(3, _omitFieldNames ? '' : 'present')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  WinningBaker clone() => WinningBaker()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  WinningBaker copyWith(void Function(WinningBaker) updates) => super.copyWith((message) => updates(message as WinningBaker)) as WinningBaker;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static WinningBaker create() => WinningBaker._();
  WinningBaker createEmptyInstance() => create();
  static $pb.PbList<WinningBaker> createRepeated() => $pb.PbList<WinningBaker>();
  @$core.pragma('dart2js:noInline')
  static WinningBaker getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<WinningBaker>(create);
  static WinningBaker? _defaultInstance;

  /// The round number.
  @$pb.TagNumber(1)
  Round get round => $_getN(0);
  @$pb.TagNumber(1)
  set round(Round v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRound() => $_has(0);
  @$pb.TagNumber(1)
  void clearRound() => clearField(1);
  @$pb.TagNumber(1)
  Round ensureRound() => $_ensure(0);

  /// The baker that won the round.
  @$pb.TagNumber(2)
  BakerId get winner => $_getN(1);
  @$pb.TagNumber(2)
  set winner(BakerId v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasWinner() => $_has(1);
  @$pb.TagNumber(2)
  void clearWinner() => clearField(2);
  @$pb.TagNumber(2)
  BakerId ensureWinner() => $_ensure(1);

  /// True if the baker produced a block in this round on the finalized chain, and False otherwise.
  @$pb.TagNumber(3)
  $core.bool get present => $_getBF(2);
  @$pb.TagNumber(3)
  set present($core.bool v) { $_setBool(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasPresent() => $_has(2);
  @$pb.TagNumber(3)
  void clearPresent() => clearField(3);
}

enum DryRunRequest_Request {
  loadBlockState, 
  stateQuery, 
  stateOperation, 
  notSet
}

/// An operation to dry run.  The first operation in a dry-run sequence should be
/// `load_block_state`: any other operation will be met with `NoState` until a
/// state is successfully loaded.
class DryRunRequest extends $pb.GeneratedMessage {
  factory DryRunRequest({
    BlockHashInput? loadBlockState,
    DryRunStateQuery? stateQuery,
    DryRunStateOperation? stateOperation,
  }) {
    final $result = create();
    if (loadBlockState != null) {
      $result.loadBlockState = loadBlockState;
    }
    if (stateQuery != null) {
      $result.stateQuery = stateQuery;
    }
    if (stateOperation != null) {
      $result.stateOperation = stateOperation;
    }
    return $result;
  }
  DryRunRequest._() : super();
  factory DryRunRequest.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunRequest.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DryRunRequest_Request> _DryRunRequest_RequestByTag = {
    1 : DryRunRequest_Request.loadBlockState,
    2 : DryRunRequest_Request.stateQuery,
    3 : DryRunRequest_Request.stateOperation,
    0 : DryRunRequest_Request.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunRequest', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<BlockHashInput>(1, _omitFieldNames ? '' : 'loadBlockState', subBuilder: BlockHashInput.create)
    ..aOM<DryRunStateQuery>(2, _omitFieldNames ? '' : 'stateQuery', subBuilder: DryRunStateQuery.create)
    ..aOM<DryRunStateOperation>(3, _omitFieldNames ? '' : 'stateOperation', subBuilder: DryRunStateOperation.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunRequest clone() => DryRunRequest()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunRequest copyWith(void Function(DryRunRequest) updates) => super.copyWith((message) => updates(message as DryRunRequest)) as DryRunRequest;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunRequest create() => DryRunRequest._();
  DryRunRequest createEmptyInstance() => create();
  static $pb.PbList<DryRunRequest> createRepeated() => $pb.PbList<DryRunRequest>();
  @$core.pragma('dart2js:noInline')
  static DryRunRequest getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunRequest>(create);
  static DryRunRequest? _defaultInstance;

  DryRunRequest_Request whichRequest() => _DryRunRequest_RequestByTag[$_whichOneof(0)]!;
  void clearRequest() => clearField($_whichOneof(0));

  ///  Load the state of the specified block to use for subsequent requests.
  ///  The state is taken at the end of execution of the block, and the block’s
  ///  timestamp is used as the current timestamp.
  ///
  ///  The energy cost for this operation is 2000.
  @$pb.TagNumber(1)
  BlockHashInput get loadBlockState => $_getN(0);
  @$pb.TagNumber(1)
  set loadBlockState(BlockHashInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasLoadBlockState() => $_has(0);
  @$pb.TagNumber(1)
  void clearLoadBlockState() => clearField(1);
  @$pb.TagNumber(1)
  BlockHashInput ensureLoadBlockState() => $_ensure(0);

  /// Run a query on the state.
  @$pb.TagNumber(2)
  DryRunStateQuery get stateQuery => $_getN(1);
  @$pb.TagNumber(2)
  set stateQuery(DryRunStateQuery v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasStateQuery() => $_has(1);
  @$pb.TagNumber(2)
  void clearStateQuery() => clearField(2);
  @$pb.TagNumber(2)
  DryRunStateQuery ensureStateQuery() => $_ensure(1);

  /// Run a (non-transaction) operation to modify the state.
  @$pb.TagNumber(3)
  DryRunStateOperation get stateOperation => $_getN(2);
  @$pb.TagNumber(3)
  set stateOperation(DryRunStateOperation v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasStateOperation() => $_has(2);
  @$pb.TagNumber(3)
  void clearStateOperation() => clearField(3);
  @$pb.TagNumber(3)
  DryRunStateOperation ensureStateOperation() => $_ensure(2);
}

enum DryRunStateQuery_Query {
  getAccountInfo, 
  getInstanceInfo, 
  invokeInstance, 
  notSet
}

/// Run a query as part of a dry run. Queries do not update the block state.
class DryRunStateQuery extends $pb.GeneratedMessage {
  factory DryRunStateQuery({
    AccountIdentifierInput? getAccountInfo,
    ContractAddress? getInstanceInfo,
    DryRunInvokeInstance? invokeInstance,
  }) {
    final $result = create();
    if (getAccountInfo != null) {
      $result.getAccountInfo = getAccountInfo;
    }
    if (getInstanceInfo != null) {
      $result.getInstanceInfo = getInstanceInfo;
    }
    if (invokeInstance != null) {
      $result.invokeInstance = invokeInstance;
    }
    return $result;
  }
  DryRunStateQuery._() : super();
  factory DryRunStateQuery.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunStateQuery.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DryRunStateQuery_Query> _DryRunStateQuery_QueryByTag = {
    1 : DryRunStateQuery_Query.getAccountInfo,
    2 : DryRunStateQuery_Query.getInstanceInfo,
    3 : DryRunStateQuery_Query.invokeInstance,
    0 : DryRunStateQuery_Query.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunStateQuery', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<AccountIdentifierInput>(1, _omitFieldNames ? '' : 'getAccountInfo', subBuilder: AccountIdentifierInput.create)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'getInstanceInfo', subBuilder: ContractAddress.create)
    ..aOM<DryRunInvokeInstance>(3, _omitFieldNames ? '' : 'invokeInstance', subBuilder: DryRunInvokeInstance.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunStateQuery clone() => DryRunStateQuery()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunStateQuery copyWith(void Function(DryRunStateQuery) updates) => super.copyWith((message) => updates(message as DryRunStateQuery)) as DryRunStateQuery;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunStateQuery create() => DryRunStateQuery._();
  DryRunStateQuery createEmptyInstance() => create();
  static $pb.PbList<DryRunStateQuery> createRepeated() => $pb.PbList<DryRunStateQuery>();
  @$core.pragma('dart2js:noInline')
  static DryRunStateQuery getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunStateQuery>(create);
  static DryRunStateQuery? _defaultInstance;

  DryRunStateQuery_Query whichQuery() => _DryRunStateQuery_QueryByTag[$_whichOneof(0)]!;
  void clearQuery() => clearField($_whichOneof(0));

  ///  Look up information on a particular account.
  ///
  ///  The energy cost for this query is 200.
  @$pb.TagNumber(1)
  AccountIdentifierInput get getAccountInfo => $_getN(0);
  @$pb.TagNumber(1)
  set getAccountInfo(AccountIdentifierInput v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasGetAccountInfo() => $_has(0);
  @$pb.TagNumber(1)
  void clearGetAccountInfo() => clearField(1);
  @$pb.TagNumber(1)
  AccountIdentifierInput ensureGetAccountInfo() => $_ensure(0);

  ///  Look up information about a particular smart contract.
  ///
  ///  The energy cost for this query is 200.
  @$pb.TagNumber(2)
  ContractAddress get getInstanceInfo => $_getN(1);
  @$pb.TagNumber(2)
  set getInstanceInfo(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasGetInstanceInfo() => $_has(1);
  @$pb.TagNumber(2)
  void clearGetInstanceInfo() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureGetInstanceInfo() => $_ensure(1);

  ///  Invoke an entrypoint on a smart contract instance.
  ///  No changes made to the state are retained at the completion of the operation.
  ///
  ///  The energy cost for this query is 200 plus the energy used by the smart contract
  ///  execution.
  @$pb.TagNumber(3)
  DryRunInvokeInstance get invokeInstance => $_getN(2);
  @$pb.TagNumber(3)
  set invokeInstance(DryRunInvokeInstance v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInvokeInstance() => $_has(2);
  @$pb.TagNumber(3)
  void clearInvokeInstance() => clearField(3);
  @$pb.TagNumber(3)
  DryRunInvokeInstance ensureInvokeInstance() => $_ensure(2);
}

/// Invoke an entrypoint on a smart contract instance.
class DryRunInvokeInstance extends $pb.GeneratedMessage {
  factory DryRunInvokeInstance({
    Address? invoker,
    ContractAddress? instance,
    Amount? amount,
    ReceiveName? entrypoint,
    Parameter? parameter,
    Energy? energy,
  }) {
    final $result = create();
    if (invoker != null) {
      $result.invoker = invoker;
    }
    if (instance != null) {
      $result.instance = instance;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    if (entrypoint != null) {
      $result.entrypoint = entrypoint;
    }
    if (parameter != null) {
      $result.parameter = parameter;
    }
    if (energy != null) {
      $result.energy = energy;
    }
    return $result;
  }
  DryRunInvokeInstance._() : super();
  factory DryRunInvokeInstance.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunInvokeInstance.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunInvokeInstance', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Address>(1, _omitFieldNames ? '' : 'invoker', subBuilder: Address.create)
    ..aOM<ContractAddress>(2, _omitFieldNames ? '' : 'instance', subBuilder: ContractAddress.create)
    ..aOM<Amount>(3, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..aOM<ReceiveName>(4, _omitFieldNames ? '' : 'entrypoint', subBuilder: ReceiveName.create)
    ..aOM<Parameter>(5, _omitFieldNames ? '' : 'parameter', subBuilder: Parameter.create)
    ..aOM<Energy>(6, _omitFieldNames ? '' : 'energy', subBuilder: Energy.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunInvokeInstance clone() => DryRunInvokeInstance()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunInvokeInstance copyWith(void Function(DryRunInvokeInstance) updates) => super.copyWith((message) => updates(message as DryRunInvokeInstance)) as DryRunInvokeInstance;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunInvokeInstance create() => DryRunInvokeInstance._();
  DryRunInvokeInstance createEmptyInstance() => create();
  static $pb.PbList<DryRunInvokeInstance> createRepeated() => $pb.PbList<DryRunInvokeInstance>();
  @$core.pragma('dart2js:noInline')
  static DryRunInvokeInstance getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunInvokeInstance>(create);
  static DryRunInvokeInstance? _defaultInstance;

  /// Invoker of the contract. If this is not supplied then the contract will be
  /// invoked by an account with address 0, no credentials and sufficient amount
  /// of CCD to cover the transfer amount. If given, the relevant address (either
  /// account or contract) must exist in the blockstate.
  @$pb.TagNumber(1)
  Address get invoker => $_getN(0);
  @$pb.TagNumber(1)
  set invoker(Address v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasInvoker() => $_has(0);
  @$pb.TagNumber(1)
  void clearInvoker() => clearField(1);
  @$pb.TagNumber(1)
  Address ensureInvoker() => $_ensure(0);

  /// Address of the contract instance to invoke.
  @$pb.TagNumber(2)
  ContractAddress get instance => $_getN(1);
  @$pb.TagNumber(2)
  set instance(ContractAddress v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasInstance() => $_has(1);
  @$pb.TagNumber(2)
  void clearInstance() => clearField(2);
  @$pb.TagNumber(2)
  ContractAddress ensureInstance() => $_ensure(1);

  /// Amount to invoke the smart contract instance with.
  @$pb.TagNumber(3)
  Amount get amount => $_getN(2);
  @$pb.TagNumber(3)
  set amount(Amount v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAmount() => $_has(2);
  @$pb.TagNumber(3)
  void clearAmount() => clearField(3);
  @$pb.TagNumber(3)
  Amount ensureAmount() => $_ensure(2);

  /// The entrypoint of the smart contract instance to invoke.
  @$pb.TagNumber(4)
  ReceiveName get entrypoint => $_getN(3);
  @$pb.TagNumber(4)
  set entrypoint(ReceiveName v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasEntrypoint() => $_has(3);
  @$pb.TagNumber(4)
  void clearEntrypoint() => clearField(4);
  @$pb.TagNumber(4)
  ReceiveName ensureEntrypoint() => $_ensure(3);

  /// The parameter bytes to include in the invocation of the entrypoint.
  @$pb.TagNumber(5)
  Parameter get parameter => $_getN(4);
  @$pb.TagNumber(5)
  set parameter(Parameter v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasParameter() => $_has(4);
  @$pb.TagNumber(5)
  void clearParameter() => clearField(5);
  @$pb.TagNumber(5)
  Parameter ensureParameter() => $_ensure(4);

  /// The maximum energy to allow for the invocation. Note that the node imposes an energy
  /// quota that is enforced in addition to this limit.
  @$pb.TagNumber(6)
  Energy get energy => $_getN(5);
  @$pb.TagNumber(6)
  set energy(Energy v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasEnergy() => $_has(5);
  @$pb.TagNumber(6)
  void clearEnergy() => clearField(6);
  @$pb.TagNumber(6)
  Energy ensureEnergy() => $_ensure(5);
}

enum DryRunStateOperation_Operation {
  setTimestamp, 
  mintToAccount, 
  runTransaction, 
  notSet
}

/// An operation that can update the state as part of a dry run.
class DryRunStateOperation extends $pb.GeneratedMessage {
  factory DryRunStateOperation({
    Timestamp? setTimestamp,
    DryRunMintToAccount? mintToAccount,
    DryRunTransaction? runTransaction,
  }) {
    final $result = create();
    if (setTimestamp != null) {
      $result.setTimestamp = setTimestamp;
    }
    if (mintToAccount != null) {
      $result.mintToAccount = mintToAccount;
    }
    if (runTransaction != null) {
      $result.runTransaction = runTransaction;
    }
    return $result;
  }
  DryRunStateOperation._() : super();
  factory DryRunStateOperation.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunStateOperation.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DryRunStateOperation_Operation> _DryRunStateOperation_OperationByTag = {
    1 : DryRunStateOperation_Operation.setTimestamp,
    2 : DryRunStateOperation_Operation.mintToAccount,
    3 : DryRunStateOperation_Operation.runTransaction,
    0 : DryRunStateOperation_Operation.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunStateOperation', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3])
    ..aOM<Timestamp>(1, _omitFieldNames ? '' : 'setTimestamp', subBuilder: Timestamp.create)
    ..aOM<DryRunMintToAccount>(2, _omitFieldNames ? '' : 'mintToAccount', subBuilder: DryRunMintToAccount.create)
    ..aOM<DryRunTransaction>(3, _omitFieldNames ? '' : 'runTransaction', subBuilder: DryRunTransaction.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunStateOperation clone() => DryRunStateOperation()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunStateOperation copyWith(void Function(DryRunStateOperation) updates) => super.copyWith((message) => updates(message as DryRunStateOperation)) as DryRunStateOperation;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunStateOperation create() => DryRunStateOperation._();
  DryRunStateOperation createEmptyInstance() => create();
  static $pb.PbList<DryRunStateOperation> createRepeated() => $pb.PbList<DryRunStateOperation>();
  @$core.pragma('dart2js:noInline')
  static DryRunStateOperation getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunStateOperation>(create);
  static DryRunStateOperation? _defaultInstance;

  DryRunStateOperation_Operation whichOperation() => _DryRunStateOperation_OperationByTag[$_whichOneof(0)]!;
  void clearOperation() => clearField($_whichOneof(0));

  ///  Sets the current block time to the given timestamp for the purposes of future
  ///  transactions.
  ///
  ///  The energy cost of this operation is 50.
  @$pb.TagNumber(1)
  Timestamp get setTimestamp => $_getN(0);
  @$pb.TagNumber(1)
  set setTimestamp(Timestamp v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSetTimestamp() => $_has(0);
  @$pb.TagNumber(1)
  void clearSetTimestamp() => clearField(1);
  @$pb.TagNumber(1)
  Timestamp ensureSetTimestamp() => $_ensure(0);

  ///  Add a specified amount of newly-minted CCDs to a specified account.
  ///  The amount cannot cause the total circulating supply to overflow.
  ///
  ///  The energy cost of this operation is 400.
  @$pb.TagNumber(2)
  DryRunMintToAccount get mintToAccount => $_getN(1);
  @$pb.TagNumber(2)
  set mintToAccount(DryRunMintToAccount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasMintToAccount() => $_has(1);
  @$pb.TagNumber(2)
  void clearMintToAccount() => clearField(2);
  @$pb.TagNumber(2)
  DryRunMintToAccount ensureMintToAccount() => $_ensure(1);

  ///  Dry run a transaction, updating the state if it succeeds.
  ///
  ///  The energy cost of this operation is 400 plus the energy used by executing the
  ///  transaction.
  @$pb.TagNumber(3)
  DryRunTransaction get runTransaction => $_getN(2);
  @$pb.TagNumber(3)
  set runTransaction(DryRunTransaction v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasRunTransaction() => $_has(2);
  @$pb.TagNumber(3)
  void clearRunTransaction() => clearField(3);
  @$pb.TagNumber(3)
  DryRunTransaction ensureRunTransaction() => $_ensure(2);
}

/// Mint a specified amount and credit it to the specified account as part of a dry run.
class DryRunMintToAccount extends $pb.GeneratedMessage {
  factory DryRunMintToAccount({
    AccountAddress? account,
    Amount? amount,
  }) {
    final $result = create();
    if (account != null) {
      $result.account = account;
    }
    if (amount != null) {
      $result.amount = amount;
    }
    return $result;
  }
  DryRunMintToAccount._() : super();
  factory DryRunMintToAccount.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunMintToAccount.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunMintToAccount', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'account', subBuilder: AccountAddress.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'amount', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunMintToAccount clone() => DryRunMintToAccount()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunMintToAccount copyWith(void Function(DryRunMintToAccount) updates) => super.copyWith((message) => updates(message as DryRunMintToAccount)) as DryRunMintToAccount;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunMintToAccount create() => DryRunMintToAccount._();
  DryRunMintToAccount createEmptyInstance() => create();
  static $pb.PbList<DryRunMintToAccount> createRepeated() => $pb.PbList<DryRunMintToAccount>();
  @$core.pragma('dart2js:noInline')
  static DryRunMintToAccount getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunMintToAccount>(create);
  static DryRunMintToAccount? _defaultInstance;

  /// The account to mint to.
  @$pb.TagNumber(1)
  AccountAddress get account => $_getN(0);
  @$pb.TagNumber(1)
  set account(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAccount() => $_has(0);
  @$pb.TagNumber(1)
  void clearAccount() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureAccount() => $_ensure(0);

  /// The amount to mint and credit to the account.
  @$pb.TagNumber(2)
  Amount get amount => $_getN(1);
  @$pb.TagNumber(2)
  set amount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAmount() => $_ensure(1);
}

/// Dry run an account transaction
class DryRunTransaction extends $pb.GeneratedMessage {
  factory DryRunTransaction({
    AccountAddress? sender,
    Energy? energyAmount,
    AccountTransactionPayload? payload,
    $core.Iterable<DryRunSignature>? signatures,
  }) {
    final $result = create();
    if (sender != null) {
      $result.sender = sender;
    }
    if (energyAmount != null) {
      $result.energyAmount = energyAmount;
    }
    if (payload != null) {
      $result.payload = payload;
    }
    if (signatures != null) {
      $result.signatures.addAll(signatures);
    }
    return $result;
  }
  DryRunTransaction._() : super();
  factory DryRunTransaction.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunTransaction.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunTransaction', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<AccountAddress>(1, _omitFieldNames ? '' : 'sender', subBuilder: AccountAddress.create)
    ..aOM<Energy>(2, _omitFieldNames ? '' : 'energyAmount', subBuilder: Energy.create)
    ..aOM<AccountTransactionPayload>(3, _omitFieldNames ? '' : 'payload', subBuilder: AccountTransactionPayload.create)
    ..pc<DryRunSignature>(4, _omitFieldNames ? '' : 'signatures', $pb.PbFieldType.PM, subBuilder: DryRunSignature.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunTransaction clone() => DryRunTransaction()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunTransaction copyWith(void Function(DryRunTransaction) updates) => super.copyWith((message) => updates(message as DryRunTransaction)) as DryRunTransaction;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunTransaction create() => DryRunTransaction._();
  DryRunTransaction createEmptyInstance() => create();
  static $pb.PbList<DryRunTransaction> createRepeated() => $pb.PbList<DryRunTransaction>();
  @$core.pragma('dart2js:noInline')
  static DryRunTransaction getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunTransaction>(create);
  static DryRunTransaction? _defaultInstance;

  /// The account to use as the sender of the transaction.
  @$pb.TagNumber(1)
  AccountAddress get sender => $_getN(0);
  @$pb.TagNumber(1)
  set sender(AccountAddress v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasSender() => $_has(0);
  @$pb.TagNumber(1)
  void clearSender() => clearField(1);
  @$pb.TagNumber(1)
  AccountAddress ensureSender() => $_ensure(0);

  /// The energy limit set for executing the transaction.
  @$pb.TagNumber(2)
  Energy get energyAmount => $_getN(1);
  @$pb.TagNumber(2)
  set energyAmount(Energy v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasEnergyAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearEnergyAmount() => clearField(2);
  @$pb.TagNumber(2)
  Energy ensureEnergyAmount() => $_ensure(1);

  /// The payload of the transaction.
  @$pb.TagNumber(3)
  AccountTransactionPayload get payload => $_getN(2);
  @$pb.TagNumber(3)
  set payload(AccountTransactionPayload v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasPayload() => $_has(2);
  @$pb.TagNumber(3)
  void clearPayload() => clearField(3);
  @$pb.TagNumber(3)
  AccountTransactionPayload ensurePayload() => $_ensure(2);

  ///  Which credentials and keys should be treated as having signed the transaction.
  ///  If none is given, then the transaction is treated as having one signature for credential 0,
  ///  key 0. Therefore, this is only required when the transaction is from a multi-signature
  ///  account. There are two reasons why you might want to specify signatures:
  ///    * The cost of the transaction depends on the number of signatures, so if you want to
  ///      get the correct cost for a multi-signature transaction, then specifying the signatures
  ///      supports this.
  ///    * When changing account keys on a multi-credential account, the transaction must be signed
  ///      by the credential whose keys are being changed.
  ///
  ///  Note that the signature thresholds are not checked as part of the dry run. Duplicated
  ///  signatures are only counted once.
  @$pb.TagNumber(4)
  $core.List<DryRunSignature> get signatures => $_getList(3);
}

/// A dry run signature is a pair of a credential index and key index, identifying the credential
/// and key that is presumed to have signed the transaction. No actual cryptographic signature is
/// included.
class DryRunSignature extends $pb.GeneratedMessage {
  factory DryRunSignature({
    $core.int? credential,
    $core.int? key,
  }) {
    final $result = create();
    if (credential != null) {
      $result.credential = credential;
    }
    if (key != null) {
      $result.key = key;
    }
    return $result;
  }
  DryRunSignature._() : super();
  factory DryRunSignature.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunSignature.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunSignature', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'credential', $pb.PbFieldType.OU3)
    ..a<$core.int>(2, _omitFieldNames ? '' : 'key', $pb.PbFieldType.OU3)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunSignature clone() => DryRunSignature()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunSignature copyWith(void Function(DryRunSignature) updates) => super.copyWith((message) => updates(message as DryRunSignature)) as DryRunSignature;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunSignature create() => DryRunSignature._();
  DryRunSignature createEmptyInstance() => create();
  static $pb.PbList<DryRunSignature> createRepeated() => $pb.PbList<DryRunSignature>();
  @$core.pragma('dart2js:noInline')
  static DryRunSignature getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunSignature>(create);
  static DryRunSignature? _defaultInstance;

  /// Credential index. Must not exceed 255.
  @$pb.TagNumber(1)
  $core.int get credential => $_getIZ(0);
  @$pb.TagNumber(1)
  set credential($core.int v) { $_setUnsignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasCredential() => $_has(0);
  @$pb.TagNumber(1)
  void clearCredential() => clearField(1);

  /// Key index. Must not exceed 255.
  @$pb.TagNumber(2)
  $core.int get key => $_getIZ(1);
  @$pb.TagNumber(2)
  set key($core.int v) { $_setUnsignedInt32(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasKey() => $_has(1);
  @$pb.TagNumber(2)
  void clearKey() => clearField(2);
}

enum DryRunResponse_Response {
  error, 
  success, 
  notSet
}

/// A response to a `DryRunRequest`.
class DryRunResponse extends $pb.GeneratedMessage {
  factory DryRunResponse({
    DryRunErrorResponse? error,
    DryRunSuccessResponse? success,
    Energy? quotaRemaining,
  }) {
    final $result = create();
    if (error != null) {
      $result.error = error;
    }
    if (success != null) {
      $result.success = success;
    }
    if (quotaRemaining != null) {
      $result.quotaRemaining = quotaRemaining;
    }
    return $result;
  }
  DryRunResponse._() : super();
  factory DryRunResponse.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunResponse.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DryRunResponse_Response> _DryRunResponse_ResponseByTag = {
    1 : DryRunResponse_Response.error,
    2 : DryRunResponse_Response.success,
    0 : DryRunResponse_Response.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunResponse', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2])
    ..aOM<DryRunErrorResponse>(1, _omitFieldNames ? '' : 'error', subBuilder: DryRunErrorResponse.create)
    ..aOM<DryRunSuccessResponse>(2, _omitFieldNames ? '' : 'success', subBuilder: DryRunSuccessResponse.create)
    ..aOM<Energy>(3, _omitFieldNames ? '' : 'quotaRemaining', subBuilder: Energy.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunResponse clone() => DryRunResponse()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunResponse copyWith(void Function(DryRunResponse) updates) => super.copyWith((message) => updates(message as DryRunResponse)) as DryRunResponse;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunResponse create() => DryRunResponse._();
  DryRunResponse createEmptyInstance() => create();
  static $pb.PbList<DryRunResponse> createRepeated() => $pb.PbList<DryRunResponse>();
  @$core.pragma('dart2js:noInline')
  static DryRunResponse getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunResponse>(create);
  static DryRunResponse? _defaultInstance;

  DryRunResponse_Response whichResponse() => _DryRunResponse_ResponseByTag[$_whichOneof(0)]!;
  void clearResponse() => clearField($_whichOneof(0));

  /// The request produced an error. The request otherwise has no effect on the state.
  @$pb.TagNumber(1)
  DryRunErrorResponse get error => $_getN(0);
  @$pb.TagNumber(1)
  set error(DryRunErrorResponse v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasError() => $_has(0);
  @$pb.TagNumber(1)
  void clearError() => clearField(1);
  @$pb.TagNumber(1)
  DryRunErrorResponse ensureError() => $_ensure(0);

  /// The request was successful.
  @$pb.TagNumber(2)
  DryRunSuccessResponse get success => $_getN(1);
  @$pb.TagNumber(2)
  set success(DryRunSuccessResponse v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasSuccess() => $_has(1);
  @$pb.TagNumber(2)
  void clearSuccess() => clearField(2);
  @$pb.TagNumber(2)
  DryRunSuccessResponse ensureSuccess() => $_ensure(1);

  /// The remaining available energy quota after the dry run operation.
  @$pb.TagNumber(3)
  Energy get quotaRemaining => $_getN(2);
  @$pb.TagNumber(3)
  set quotaRemaining(Energy v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasQuotaRemaining() => $_has(2);
  @$pb.TagNumber(3)
  void clearQuotaRemaining() => clearField(3);
  @$pb.TagNumber(3)
  Energy ensureQuotaRemaining() => $_ensure(2);
}

/// The current block state is undefined. It should be initialized with
/// a 'load_block_state' request before any other operations.
class DryRunErrorResponse_NoState extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_NoState() => create();
  DryRunErrorResponse_NoState._() : super();
  factory DryRunErrorResponse_NoState.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_NoState.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.NoState', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_NoState clone() => DryRunErrorResponse_NoState()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_NoState copyWith(void Function(DryRunErrorResponse_NoState) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_NoState)) as DryRunErrorResponse_NoState;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_NoState create() => DryRunErrorResponse_NoState._();
  DryRunErrorResponse_NoState createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_NoState> createRepeated() => $pb.PbList<DryRunErrorResponse_NoState>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_NoState getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_NoState>(create);
  static DryRunErrorResponse_NoState? _defaultInstance;
}

/// The requested block was not found, so its state could not be loaded.
class DryRunErrorResponse_BlockNotFound extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_BlockNotFound() => create();
  DryRunErrorResponse_BlockNotFound._() : super();
  factory DryRunErrorResponse_BlockNotFound.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_BlockNotFound.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.BlockNotFound', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_BlockNotFound clone() => DryRunErrorResponse_BlockNotFound()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_BlockNotFound copyWith(void Function(DryRunErrorResponse_BlockNotFound) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_BlockNotFound)) as DryRunErrorResponse_BlockNotFound;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_BlockNotFound create() => DryRunErrorResponse_BlockNotFound._();
  DryRunErrorResponse_BlockNotFound createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_BlockNotFound> createRepeated() => $pb.PbList<DryRunErrorResponse_BlockNotFound>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_BlockNotFound getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_BlockNotFound>(create);
  static DryRunErrorResponse_BlockNotFound? _defaultInstance;
}

/// The specified account was not found.
class DryRunErrorResponse_AccountNotFound extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_AccountNotFound() => create();
  DryRunErrorResponse_AccountNotFound._() : super();
  factory DryRunErrorResponse_AccountNotFound.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_AccountNotFound.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.AccountNotFound', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_AccountNotFound clone() => DryRunErrorResponse_AccountNotFound()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_AccountNotFound copyWith(void Function(DryRunErrorResponse_AccountNotFound) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_AccountNotFound)) as DryRunErrorResponse_AccountNotFound;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_AccountNotFound create() => DryRunErrorResponse_AccountNotFound._();
  DryRunErrorResponse_AccountNotFound createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_AccountNotFound> createRepeated() => $pb.PbList<DryRunErrorResponse_AccountNotFound>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_AccountNotFound getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_AccountNotFound>(create);
  static DryRunErrorResponse_AccountNotFound? _defaultInstance;
}

/// The specified instance was not found.
class DryRunErrorResponse_InstanceNotFound extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_InstanceNotFound() => create();
  DryRunErrorResponse_InstanceNotFound._() : super();
  factory DryRunErrorResponse_InstanceNotFound.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_InstanceNotFound.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.InstanceNotFound', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_InstanceNotFound clone() => DryRunErrorResponse_InstanceNotFound()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_InstanceNotFound copyWith(void Function(DryRunErrorResponse_InstanceNotFound) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_InstanceNotFound)) as DryRunErrorResponse_InstanceNotFound;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_InstanceNotFound create() => DryRunErrorResponse_InstanceNotFound._();
  DryRunErrorResponse_InstanceNotFound createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_InstanceNotFound> createRepeated() => $pb.PbList<DryRunErrorResponse_InstanceNotFound>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_InstanceNotFound getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_InstanceNotFound>(create);
  static DryRunErrorResponse_InstanceNotFound? _defaultInstance;
}

/// The amount that was requested to be minted would overflow the total supply.
class DryRunErrorResponse_AmountOverLimit extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_AmountOverLimit({
    Amount? amountLimit,
  }) {
    final $result = create();
    if (amountLimit != null) {
      $result.amountLimit = amountLimit;
    }
    return $result;
  }
  DryRunErrorResponse_AmountOverLimit._() : super();
  factory DryRunErrorResponse_AmountOverLimit.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_AmountOverLimit.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.AmountOverLimit', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'amountLimit', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_AmountOverLimit clone() => DryRunErrorResponse_AmountOverLimit()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_AmountOverLimit copyWith(void Function(DryRunErrorResponse_AmountOverLimit) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_AmountOverLimit)) as DryRunErrorResponse_AmountOverLimit;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_AmountOverLimit create() => DryRunErrorResponse_AmountOverLimit._();
  DryRunErrorResponse_AmountOverLimit createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_AmountOverLimit> createRepeated() => $pb.PbList<DryRunErrorResponse_AmountOverLimit>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_AmountOverLimit getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_AmountOverLimit>(create);
  static DryRunErrorResponse_AmountOverLimit? _defaultInstance;

  /// The maximum amount that can be minted without overflowing the supply.
  @$pb.TagNumber(1)
  Amount get amountLimit => $_getN(0);
  @$pb.TagNumber(1)
  set amountLimit(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasAmountLimit() => $_has(0);
  @$pb.TagNumber(1)
  void clearAmountLimit() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureAmountLimit() => $_ensure(0);
}

/// The sender account for the transaction has insufficient balance to pay the preliminary fees
/// for the transaction to be included in a block.
class DryRunErrorResponse_BalanceInsufficient extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_BalanceInsufficient({
    Amount? requiredAmount,
    Amount? availableAmount,
  }) {
    final $result = create();
    if (requiredAmount != null) {
      $result.requiredAmount = requiredAmount;
    }
    if (availableAmount != null) {
      $result.availableAmount = availableAmount;
    }
    return $result;
  }
  DryRunErrorResponse_BalanceInsufficient._() : super();
  factory DryRunErrorResponse_BalanceInsufficient.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_BalanceInsufficient.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.BalanceInsufficient', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Amount>(1, _omitFieldNames ? '' : 'requiredAmount', subBuilder: Amount.create)
    ..aOM<Amount>(2, _omitFieldNames ? '' : 'availableAmount', subBuilder: Amount.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_BalanceInsufficient clone() => DryRunErrorResponse_BalanceInsufficient()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_BalanceInsufficient copyWith(void Function(DryRunErrorResponse_BalanceInsufficient) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_BalanceInsufficient)) as DryRunErrorResponse_BalanceInsufficient;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_BalanceInsufficient create() => DryRunErrorResponse_BalanceInsufficient._();
  DryRunErrorResponse_BalanceInsufficient createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_BalanceInsufficient> createRepeated() => $pb.PbList<DryRunErrorResponse_BalanceInsufficient>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_BalanceInsufficient getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_BalanceInsufficient>(create);
  static DryRunErrorResponse_BalanceInsufficient? _defaultInstance;

  /// The minimum balance required to perform the operation.
  @$pb.TagNumber(1)
  Amount get requiredAmount => $_getN(0);
  @$pb.TagNumber(1)
  set requiredAmount(Amount v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasRequiredAmount() => $_has(0);
  @$pb.TagNumber(1)
  void clearRequiredAmount() => clearField(1);
  @$pb.TagNumber(1)
  Amount ensureRequiredAmount() => $_ensure(0);

  /// The currently-available balance on the account to pay for the operation.
  @$pb.TagNumber(2)
  Amount get availableAmount => $_getN(1);
  @$pb.TagNumber(2)
  set availableAmount(Amount v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAvailableAmount() => $_has(1);
  @$pb.TagNumber(2)
  void clearAvailableAmount() => clearField(2);
  @$pb.TagNumber(2)
  Amount ensureAvailableAmount() => $_ensure(1);
}

/// The energy made available for the transaction is insufficient to cover the basic processing
/// required to include a transaction in a block.
class DryRunErrorResponse_EnergyInsufficient extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_EnergyInsufficient({
    Energy? energyRequired,
  }) {
    final $result = create();
    if (energyRequired != null) {
      $result.energyRequired = energyRequired;
    }
    return $result;
  }
  DryRunErrorResponse_EnergyInsufficient._() : super();
  factory DryRunErrorResponse_EnergyInsufficient.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_EnergyInsufficient.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.EnergyInsufficient', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Energy>(1, _omitFieldNames ? '' : 'energyRequired', subBuilder: Energy.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_EnergyInsufficient clone() => DryRunErrorResponse_EnergyInsufficient()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_EnergyInsufficient copyWith(void Function(DryRunErrorResponse_EnergyInsufficient) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_EnergyInsufficient)) as DryRunErrorResponse_EnergyInsufficient;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_EnergyInsufficient create() => DryRunErrorResponse_EnergyInsufficient._();
  DryRunErrorResponse_EnergyInsufficient createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_EnergyInsufficient> createRepeated() => $pb.PbList<DryRunErrorResponse_EnergyInsufficient>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_EnergyInsufficient getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_EnergyInsufficient>(create);
  static DryRunErrorResponse_EnergyInsufficient? _defaultInstance;

  /// The minimum energy required for the transaction to be included in the chain.
  /// Note that, even if the energy supplied for the transaction is enough to prevent a
  /// `EnergyInsufficient`, the transaction can still be rejected for having
  /// insufficient energy. In that case, a `TransactionExecuted` response will be
  /// produced, but indicate the transaction was rejected.
  @$pb.TagNumber(1)
  Energy get energyRequired => $_getN(0);
  @$pb.TagNumber(1)
  set energyRequired(Energy v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasEnergyRequired() => $_has(0);
  @$pb.TagNumber(1)
  void clearEnergyRequired() => clearField(1);
  @$pb.TagNumber(1)
  Energy ensureEnergyRequired() => $_ensure(0);
}

/// Invoking the smart contract instance failed.
class DryRunErrorResponse_InvokeFailure extends $pb.GeneratedMessage {
  factory DryRunErrorResponse_InvokeFailure({
    $core.List<$core.int>? returnValue,
    Energy? usedEnergy,
    RejectReason? reason,
  }) {
    final $result = create();
    if (returnValue != null) {
      $result.returnValue = returnValue;
    }
    if (usedEnergy != null) {
      $result.usedEnergy = usedEnergy;
    }
    if (reason != null) {
      $result.reason = reason;
    }
    return $result;
  }
  DryRunErrorResponse_InvokeFailure._() : super();
  factory DryRunErrorResponse_InvokeFailure.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse_InvokeFailure.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse.InvokeFailure', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'returnValue', $pb.PbFieldType.OY)
    ..aOM<Energy>(2, _omitFieldNames ? '' : 'usedEnergy', subBuilder: Energy.create)
    ..aOM<RejectReason>(3, _omitFieldNames ? '' : 'reason', subBuilder: RejectReason.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_InvokeFailure clone() => DryRunErrorResponse_InvokeFailure()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse_InvokeFailure copyWith(void Function(DryRunErrorResponse_InvokeFailure) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse_InvokeFailure)) as DryRunErrorResponse_InvokeFailure;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_InvokeFailure create() => DryRunErrorResponse_InvokeFailure._();
  DryRunErrorResponse_InvokeFailure createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse_InvokeFailure> createRepeated() => $pb.PbList<DryRunErrorResponse_InvokeFailure>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse_InvokeFailure getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse_InvokeFailure>(create);
  static DryRunErrorResponse_InvokeFailure? _defaultInstance;

  /// If invoking a V0 contract this is not provided, otherwise it is
  /// potentially return value produced by the call unless the call failed with
  /// out of energy or runtime error. If the V1 contract terminated with a
  /// logic error then the return value is present.
  @$pb.TagNumber(1)
  $core.List<$core.int> get returnValue => $_getN(0);
  @$pb.TagNumber(1)
  set returnValue($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasReturnValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearReturnValue() => clearField(1);

  /// Energy used by the execution.
  @$pb.TagNumber(2)
  Energy get usedEnergy => $_getN(1);
  @$pb.TagNumber(2)
  set usedEnergy(Energy v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasUsedEnergy() => $_has(1);
  @$pb.TagNumber(2)
  void clearUsedEnergy() => clearField(2);
  @$pb.TagNumber(2)
  Energy ensureUsedEnergy() => $_ensure(1);

  /// Contract execution failed for the given reason.
  @$pb.TagNumber(3)
  RejectReason get reason => $_getN(2);
  @$pb.TagNumber(3)
  set reason(RejectReason v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasReason() => $_has(2);
  @$pb.TagNumber(3)
  void clearReason() => clearField(3);
  @$pb.TagNumber(3)
  RejectReason ensureReason() => $_ensure(2);
}

enum DryRunErrorResponse_Error {
  noState, 
  blockNotFound, 
  accountNotFound, 
  instanceNotFound, 
  amountOverLimit, 
  balanceInsufficient, 
  energyInsufficient, 
  invokeFailed, 
  notSet
}

class DryRunErrorResponse extends $pb.GeneratedMessage {
  factory DryRunErrorResponse({
    DryRunErrorResponse_NoState? noState,
    DryRunErrorResponse_BlockNotFound? blockNotFound,
    DryRunErrorResponse_AccountNotFound? accountNotFound,
    DryRunErrorResponse_InstanceNotFound? instanceNotFound,
    DryRunErrorResponse_AmountOverLimit? amountOverLimit,
    DryRunErrorResponse_BalanceInsufficient? balanceInsufficient,
    DryRunErrorResponse_EnergyInsufficient? energyInsufficient,
    DryRunErrorResponse_InvokeFailure? invokeFailed,
  }) {
    final $result = create();
    if (noState != null) {
      $result.noState = noState;
    }
    if (blockNotFound != null) {
      $result.blockNotFound = blockNotFound;
    }
    if (accountNotFound != null) {
      $result.accountNotFound = accountNotFound;
    }
    if (instanceNotFound != null) {
      $result.instanceNotFound = instanceNotFound;
    }
    if (amountOverLimit != null) {
      $result.amountOverLimit = amountOverLimit;
    }
    if (balanceInsufficient != null) {
      $result.balanceInsufficient = balanceInsufficient;
    }
    if (energyInsufficient != null) {
      $result.energyInsufficient = energyInsufficient;
    }
    if (invokeFailed != null) {
      $result.invokeFailed = invokeFailed;
    }
    return $result;
  }
  DryRunErrorResponse._() : super();
  factory DryRunErrorResponse.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunErrorResponse.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DryRunErrorResponse_Error> _DryRunErrorResponse_ErrorByTag = {
    1 : DryRunErrorResponse_Error.noState,
    2 : DryRunErrorResponse_Error.blockNotFound,
    3 : DryRunErrorResponse_Error.accountNotFound,
    4 : DryRunErrorResponse_Error.instanceNotFound,
    5 : DryRunErrorResponse_Error.amountOverLimit,
    6 : DryRunErrorResponse_Error.balanceInsufficient,
    8 : DryRunErrorResponse_Error.energyInsufficient,
    9 : DryRunErrorResponse_Error.invokeFailed,
    0 : DryRunErrorResponse_Error.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunErrorResponse', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 8, 9])
    ..aOM<DryRunErrorResponse_NoState>(1, _omitFieldNames ? '' : 'noState', subBuilder: DryRunErrorResponse_NoState.create)
    ..aOM<DryRunErrorResponse_BlockNotFound>(2, _omitFieldNames ? '' : 'blockNotFound', subBuilder: DryRunErrorResponse_BlockNotFound.create)
    ..aOM<DryRunErrorResponse_AccountNotFound>(3, _omitFieldNames ? '' : 'accountNotFound', subBuilder: DryRunErrorResponse_AccountNotFound.create)
    ..aOM<DryRunErrorResponse_InstanceNotFound>(4, _omitFieldNames ? '' : 'instanceNotFound', subBuilder: DryRunErrorResponse_InstanceNotFound.create)
    ..aOM<DryRunErrorResponse_AmountOverLimit>(5, _omitFieldNames ? '' : 'amountOverLimit', subBuilder: DryRunErrorResponse_AmountOverLimit.create)
    ..aOM<DryRunErrorResponse_BalanceInsufficient>(6, _omitFieldNames ? '' : 'balanceInsufficient', subBuilder: DryRunErrorResponse_BalanceInsufficient.create)
    ..aOM<DryRunErrorResponse_EnergyInsufficient>(8, _omitFieldNames ? '' : 'energyInsufficient', subBuilder: DryRunErrorResponse_EnergyInsufficient.create)
    ..aOM<DryRunErrorResponse_InvokeFailure>(9, _omitFieldNames ? '' : 'invokeFailed', subBuilder: DryRunErrorResponse_InvokeFailure.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse clone() => DryRunErrorResponse()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunErrorResponse copyWith(void Function(DryRunErrorResponse) updates) => super.copyWith((message) => updates(message as DryRunErrorResponse)) as DryRunErrorResponse;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse create() => DryRunErrorResponse._();
  DryRunErrorResponse createEmptyInstance() => create();
  static $pb.PbList<DryRunErrorResponse> createRepeated() => $pb.PbList<DryRunErrorResponse>();
  @$core.pragma('dart2js:noInline')
  static DryRunErrorResponse getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunErrorResponse>(create);
  static DryRunErrorResponse? _defaultInstance;

  DryRunErrorResponse_Error whichError() => _DryRunErrorResponse_ErrorByTag[$_whichOneof(0)]!;
  void clearError() => clearField($_whichOneof(0));

  /// The current block state is undefined. It should be initialized with
  /// a 'load_block_state' request before any other operations.
  @$pb.TagNumber(1)
  DryRunErrorResponse_NoState get noState => $_getN(0);
  @$pb.TagNumber(1)
  set noState(DryRunErrorResponse_NoState v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasNoState() => $_has(0);
  @$pb.TagNumber(1)
  void clearNoState() => clearField(1);
  @$pb.TagNumber(1)
  DryRunErrorResponse_NoState ensureNoState() => $_ensure(0);

  /// The requested block was not found, so its state could not be loaded.
  /// Response to 'load_block_state'.
  @$pb.TagNumber(2)
  DryRunErrorResponse_BlockNotFound get blockNotFound => $_getN(1);
  @$pb.TagNumber(2)
  set blockNotFound(DryRunErrorResponse_BlockNotFound v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBlockNotFound() => $_has(1);
  @$pb.TagNumber(2)
  void clearBlockNotFound() => clearField(2);
  @$pb.TagNumber(2)
  DryRunErrorResponse_BlockNotFound ensureBlockNotFound() => $_ensure(1);

  /// The specified account was not found.
  /// Response to 'get_account_info', 'mint_to_account' and 'run_transaction'.
  @$pb.TagNumber(3)
  DryRunErrorResponse_AccountNotFound get accountNotFound => $_getN(2);
  @$pb.TagNumber(3)
  set accountNotFound(DryRunErrorResponse_AccountNotFound v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAccountNotFound() => $_has(2);
  @$pb.TagNumber(3)
  void clearAccountNotFound() => clearField(3);
  @$pb.TagNumber(3)
  DryRunErrorResponse_AccountNotFound ensureAccountNotFound() => $_ensure(2);

  /// The specified instance was not found.
  /// Response to 'get_instance_info'.
  @$pb.TagNumber(4)
  DryRunErrorResponse_InstanceNotFound get instanceNotFound => $_getN(3);
  @$pb.TagNumber(4)
  set instanceNotFound(DryRunErrorResponse_InstanceNotFound v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasInstanceNotFound() => $_has(3);
  @$pb.TagNumber(4)
  void clearInstanceNotFound() => clearField(4);
  @$pb.TagNumber(4)
  DryRunErrorResponse_InstanceNotFound ensureInstanceNotFound() => $_ensure(3);

  /// The amount to mint would overflow the total CCD supply.
  /// Response to 'mint_to_account'.
  @$pb.TagNumber(5)
  DryRunErrorResponse_AmountOverLimit get amountOverLimit => $_getN(4);
  @$pb.TagNumber(5)
  set amountOverLimit(DryRunErrorResponse_AmountOverLimit v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasAmountOverLimit() => $_has(4);
  @$pb.TagNumber(5)
  void clearAmountOverLimit() => clearField(5);
  @$pb.TagNumber(5)
  DryRunErrorResponse_AmountOverLimit ensureAmountOverLimit() => $_ensure(4);

  /// The balance of the sender account is not sufficient to pay for the operation.
  /// Response to 'run_transaction'.
  @$pb.TagNumber(6)
  DryRunErrorResponse_BalanceInsufficient get balanceInsufficient => $_getN(5);
  @$pb.TagNumber(6)
  set balanceInsufficient(DryRunErrorResponse_BalanceInsufficient v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasBalanceInsufficient() => $_has(5);
  @$pb.TagNumber(6)
  void clearBalanceInsufficient() => clearField(6);
  @$pb.TagNumber(6)
  DryRunErrorResponse_BalanceInsufficient ensureBalanceInsufficient() => $_ensure(5);

  /// The energy supplied for the transaction was not sufficient to perform the basic checks.
  /// Response to 'run_transaction'.
  @$pb.TagNumber(8)
  DryRunErrorResponse_EnergyInsufficient get energyInsufficient => $_getN(6);
  @$pb.TagNumber(8)
  set energyInsufficient(DryRunErrorResponse_EnergyInsufficient v) { setField(8, v); }
  @$pb.TagNumber(8)
  $core.bool hasEnergyInsufficient() => $_has(6);
  @$pb.TagNumber(8)
  void clearEnergyInsufficient() => clearField(8);
  @$pb.TagNumber(8)
  DryRunErrorResponse_EnergyInsufficient ensureEnergyInsufficient() => $_ensure(6);

  /// The contract invocation failed.
  /// Response to 'invoke_instance'.
  @$pb.TagNumber(9)
  DryRunErrorResponse_InvokeFailure get invokeFailed => $_getN(7);
  @$pb.TagNumber(9)
  set invokeFailed(DryRunErrorResponse_InvokeFailure v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasInvokeFailed() => $_has(7);
  @$pb.TagNumber(9)
  void clearInvokeFailed() => clearField(9);
  @$pb.TagNumber(9)
  DryRunErrorResponse_InvokeFailure ensureInvokeFailed() => $_ensure(7);
}

/// The block state at the specified block was successfully loaded.
class DryRunSuccessResponse_BlockStateLoaded extends $pb.GeneratedMessage {
  factory DryRunSuccessResponse_BlockStateLoaded({
    Timestamp? currentTimestamp,
    BlockHash? blockHash,
    ProtocolVersion? protocolVersion,
  }) {
    final $result = create();
    if (currentTimestamp != null) {
      $result.currentTimestamp = currentTimestamp;
    }
    if (blockHash != null) {
      $result.blockHash = blockHash;
    }
    if (protocolVersion != null) {
      $result.protocolVersion = protocolVersion;
    }
    return $result;
  }
  DryRunSuccessResponse_BlockStateLoaded._() : super();
  factory DryRunSuccessResponse_BlockStateLoaded.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunSuccessResponse_BlockStateLoaded.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunSuccessResponse.BlockStateLoaded', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Timestamp>(1, _omitFieldNames ? '' : 'currentTimestamp', subBuilder: Timestamp.create)
    ..aOM<BlockHash>(2, _omitFieldNames ? '' : 'blockHash', subBuilder: BlockHash.create)
    ..e<ProtocolVersion>(3, _omitFieldNames ? '' : 'protocolVersion', $pb.PbFieldType.OE, defaultOrMaker: ProtocolVersion.PROTOCOL_VERSION_1, valueOf: ProtocolVersion.valueOf, enumValues: ProtocolVersion.values)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_BlockStateLoaded clone() => DryRunSuccessResponse_BlockStateLoaded()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_BlockStateLoaded copyWith(void Function(DryRunSuccessResponse_BlockStateLoaded) updates) => super.copyWith((message) => updates(message as DryRunSuccessResponse_BlockStateLoaded)) as DryRunSuccessResponse_BlockStateLoaded;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_BlockStateLoaded create() => DryRunSuccessResponse_BlockStateLoaded._();
  DryRunSuccessResponse_BlockStateLoaded createEmptyInstance() => create();
  static $pb.PbList<DryRunSuccessResponse_BlockStateLoaded> createRepeated() => $pb.PbList<DryRunSuccessResponse_BlockStateLoaded>();
  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_BlockStateLoaded getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunSuccessResponse_BlockStateLoaded>(create);
  static DryRunSuccessResponse_BlockStateLoaded? _defaultInstance;

  /// The timestamp of the block, taken to be the current timestamp.
  @$pb.TagNumber(1)
  Timestamp get currentTimestamp => $_getN(0);
  @$pb.TagNumber(1)
  set currentTimestamp(Timestamp v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasCurrentTimestamp() => $_has(0);
  @$pb.TagNumber(1)
  void clearCurrentTimestamp() => clearField(1);
  @$pb.TagNumber(1)
  Timestamp ensureCurrentTimestamp() => $_ensure(0);

  /// The hash of the block that was loaded.
  @$pb.TagNumber(2)
  BlockHash get blockHash => $_getN(1);
  @$pb.TagNumber(2)
  set blockHash(BlockHash v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBlockHash() => $_has(1);
  @$pb.TagNumber(2)
  void clearBlockHash() => clearField(2);
  @$pb.TagNumber(2)
  BlockHash ensureBlockHash() => $_ensure(1);

  /// The protocol version at the specified block. The behavior of operations can vary across
  /// protocol versions.
  @$pb.TagNumber(3)
  ProtocolVersion get protocolVersion => $_getN(2);
  @$pb.TagNumber(3)
  set protocolVersion(ProtocolVersion v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasProtocolVersion() => $_has(2);
  @$pb.TagNumber(3)
  void clearProtocolVersion() => clearField(3);
}

/// The current apparent timestamp was updated to the specified value.
class DryRunSuccessResponse_TimestampSet extends $pb.GeneratedMessage {
  factory DryRunSuccessResponse_TimestampSet() => create();
  DryRunSuccessResponse_TimestampSet._() : super();
  factory DryRunSuccessResponse_TimestampSet.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunSuccessResponse_TimestampSet.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunSuccessResponse.TimestampSet', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_TimestampSet clone() => DryRunSuccessResponse_TimestampSet()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_TimestampSet copyWith(void Function(DryRunSuccessResponse_TimestampSet) updates) => super.copyWith((message) => updates(message as DryRunSuccessResponse_TimestampSet)) as DryRunSuccessResponse_TimestampSet;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_TimestampSet create() => DryRunSuccessResponse_TimestampSet._();
  DryRunSuccessResponse_TimestampSet createEmptyInstance() => create();
  static $pb.PbList<DryRunSuccessResponse_TimestampSet> createRepeated() => $pb.PbList<DryRunSuccessResponse_TimestampSet>();
  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_TimestampSet getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunSuccessResponse_TimestampSet>(create);
  static DryRunSuccessResponse_TimestampSet? _defaultInstance;
}

/// The specified amount was minted to the specified account.
class DryRunSuccessResponse_MintedToAccount extends $pb.GeneratedMessage {
  factory DryRunSuccessResponse_MintedToAccount() => create();
  DryRunSuccessResponse_MintedToAccount._() : super();
  factory DryRunSuccessResponse_MintedToAccount.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunSuccessResponse_MintedToAccount.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunSuccessResponse.MintedToAccount', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_MintedToAccount clone() => DryRunSuccessResponse_MintedToAccount()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_MintedToAccount copyWith(void Function(DryRunSuccessResponse_MintedToAccount) updates) => super.copyWith((message) => updates(message as DryRunSuccessResponse_MintedToAccount)) as DryRunSuccessResponse_MintedToAccount;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_MintedToAccount create() => DryRunSuccessResponse_MintedToAccount._();
  DryRunSuccessResponse_MintedToAccount createEmptyInstance() => create();
  static $pb.PbList<DryRunSuccessResponse_MintedToAccount> createRepeated() => $pb.PbList<DryRunSuccessResponse_MintedToAccount>();
  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_MintedToAccount getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunSuccessResponse_MintedToAccount>(create);
  static DryRunSuccessResponse_MintedToAccount? _defaultInstance;
}

/// The transaction was executed.
class DryRunSuccessResponse_TransactionExecuted extends $pb.GeneratedMessage {
  factory DryRunSuccessResponse_TransactionExecuted({
    Energy? energyCost,
    AccountTransactionDetails? details,
    $core.List<$core.int>? returnValue,
  }) {
    final $result = create();
    if (energyCost != null) {
      $result.energyCost = energyCost;
    }
    if (details != null) {
      $result.details = details;
    }
    if (returnValue != null) {
      $result.returnValue = returnValue;
    }
    return $result;
  }
  DryRunSuccessResponse_TransactionExecuted._() : super();
  factory DryRunSuccessResponse_TransactionExecuted.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunSuccessResponse_TransactionExecuted.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunSuccessResponse.TransactionExecuted', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..aOM<Energy>(1, _omitFieldNames ? '' : 'energyCost', subBuilder: Energy.create)
    ..aOM<AccountTransactionDetails>(2, _omitFieldNames ? '' : 'details', subBuilder: AccountTransactionDetails.create)
    ..a<$core.List<$core.int>>(3, _omitFieldNames ? '' : 'returnValue', $pb.PbFieldType.OY)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_TransactionExecuted clone() => DryRunSuccessResponse_TransactionExecuted()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_TransactionExecuted copyWith(void Function(DryRunSuccessResponse_TransactionExecuted) updates) => super.copyWith((message) => updates(message as DryRunSuccessResponse_TransactionExecuted)) as DryRunSuccessResponse_TransactionExecuted;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_TransactionExecuted create() => DryRunSuccessResponse_TransactionExecuted._();
  DryRunSuccessResponse_TransactionExecuted createEmptyInstance() => create();
  static $pb.PbList<DryRunSuccessResponse_TransactionExecuted> createRepeated() => $pb.PbList<DryRunSuccessResponse_TransactionExecuted>();
  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_TransactionExecuted getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunSuccessResponse_TransactionExecuted>(create);
  static DryRunSuccessResponse_TransactionExecuted? _defaultInstance;

  /// The amount of energy actually expended in executing the transaction.
  @$pb.TagNumber(1)
  Energy get energyCost => $_getN(0);
  @$pb.TagNumber(1)
  set energyCost(Energy v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasEnergyCost() => $_has(0);
  @$pb.TagNumber(1)
  void clearEnergyCost() => clearField(1);
  @$pb.TagNumber(1)
  Energy ensureEnergyCost() => $_ensure(0);

  /// The details of the outcome of the transaction.
  @$pb.TagNumber(2)
  AccountTransactionDetails get details => $_getN(1);
  @$pb.TagNumber(2)
  set details(AccountTransactionDetails v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasDetails() => $_has(1);
  @$pb.TagNumber(2)
  void clearDetails() => clearField(2);
  @$pb.TagNumber(2)
  AccountTransactionDetails ensureDetails() => $_ensure(1);

  /// If this is an invocation of a V1 contract that produced a return value, this is that
  /// value. Otherwise it is absent.
  @$pb.TagNumber(3)
  $core.List<$core.int> get returnValue => $_getN(2);
  @$pb.TagNumber(3)
  set returnValue($core.List<$core.int> v) { $_setBytes(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasReturnValue() => $_has(2);
  @$pb.TagNumber(3)
  void clearReturnValue() => clearField(3);
}

/// The smart contract instance was invoked successfully.
class DryRunSuccessResponse_InvokeSuccess extends $pb.GeneratedMessage {
  factory DryRunSuccessResponse_InvokeSuccess({
    $core.List<$core.int>? returnValue,
    Energy? usedEnergy,
    $core.Iterable<ContractTraceElement>? effects,
  }) {
    final $result = create();
    if (returnValue != null) {
      $result.returnValue = returnValue;
    }
    if (usedEnergy != null) {
      $result.usedEnergy = usedEnergy;
    }
    if (effects != null) {
      $result.effects.addAll(effects);
    }
    return $result;
  }
  DryRunSuccessResponse_InvokeSuccess._() : super();
  factory DryRunSuccessResponse_InvokeSuccess.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunSuccessResponse_InvokeSuccess.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunSuccessResponse.InvokeSuccess', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..a<$core.List<$core.int>>(1, _omitFieldNames ? '' : 'returnValue', $pb.PbFieldType.OY)
    ..aOM<Energy>(2, _omitFieldNames ? '' : 'usedEnergy', subBuilder: Energy.create)
    ..pc<ContractTraceElement>(3, _omitFieldNames ? '' : 'effects', $pb.PbFieldType.PM, subBuilder: ContractTraceElement.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_InvokeSuccess clone() => DryRunSuccessResponse_InvokeSuccess()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse_InvokeSuccess copyWith(void Function(DryRunSuccessResponse_InvokeSuccess) updates) => super.copyWith((message) => updates(message as DryRunSuccessResponse_InvokeSuccess)) as DryRunSuccessResponse_InvokeSuccess;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_InvokeSuccess create() => DryRunSuccessResponse_InvokeSuccess._();
  DryRunSuccessResponse_InvokeSuccess createEmptyInstance() => create();
  static $pb.PbList<DryRunSuccessResponse_InvokeSuccess> createRepeated() => $pb.PbList<DryRunSuccessResponse_InvokeSuccess>();
  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse_InvokeSuccess getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunSuccessResponse_InvokeSuccess>(create);
  static DryRunSuccessResponse_InvokeSuccess? _defaultInstance;

  /// If invoking a V0 contract this is absent. Otherwise it is the return
  /// value produced by the contract.
  @$pb.TagNumber(1)
  $core.List<$core.int> get returnValue => $_getN(0);
  @$pb.TagNumber(1)
  set returnValue($core.List<$core.int> v) { $_setBytes(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasReturnValue() => $_has(0);
  @$pb.TagNumber(1)
  void clearReturnValue() => clearField(1);

  /// Energy used by the execution.
  @$pb.TagNumber(2)
  Energy get usedEnergy => $_getN(1);
  @$pb.TagNumber(2)
  set usedEnergy(Energy v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasUsedEnergy() => $_has(1);
  @$pb.TagNumber(2)
  void clearUsedEnergy() => clearField(2);
  @$pb.TagNumber(2)
  Energy ensureUsedEnergy() => $_ensure(1);

  /// Effects produced by contract execution.
  @$pb.TagNumber(3)
  $core.List<ContractTraceElement> get effects => $_getList(2);
}

enum DryRunSuccessResponse_Response {
  blockStateLoaded, 
  accountInfo, 
  instanceInfo, 
  invokeSucceeded, 
  timestampSet, 
  mintedToAccount, 
  transactionExecuted, 
  notSet
}

/// The dry run operation completed successfully.
class DryRunSuccessResponse extends $pb.GeneratedMessage {
  factory DryRunSuccessResponse({
    DryRunSuccessResponse_BlockStateLoaded? blockStateLoaded,
    AccountInfo? accountInfo,
    InstanceInfo? instanceInfo,
    DryRunSuccessResponse_InvokeSuccess? invokeSucceeded,
    DryRunSuccessResponse_TimestampSet? timestampSet,
    DryRunSuccessResponse_MintedToAccount? mintedToAccount,
    DryRunSuccessResponse_TransactionExecuted? transactionExecuted,
  }) {
    final $result = create();
    if (blockStateLoaded != null) {
      $result.blockStateLoaded = blockStateLoaded;
    }
    if (accountInfo != null) {
      $result.accountInfo = accountInfo;
    }
    if (instanceInfo != null) {
      $result.instanceInfo = instanceInfo;
    }
    if (invokeSucceeded != null) {
      $result.invokeSucceeded = invokeSucceeded;
    }
    if (timestampSet != null) {
      $result.timestampSet = timestampSet;
    }
    if (mintedToAccount != null) {
      $result.mintedToAccount = mintedToAccount;
    }
    if (transactionExecuted != null) {
      $result.transactionExecuted = transactionExecuted;
    }
    return $result;
  }
  DryRunSuccessResponse._() : super();
  factory DryRunSuccessResponse.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DryRunSuccessResponse.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static const $core.Map<$core.int, DryRunSuccessResponse_Response> _DryRunSuccessResponse_ResponseByTag = {
    1 : DryRunSuccessResponse_Response.blockStateLoaded,
    2 : DryRunSuccessResponse_Response.accountInfo,
    3 : DryRunSuccessResponse_Response.instanceInfo,
    4 : DryRunSuccessResponse_Response.invokeSucceeded,
    5 : DryRunSuccessResponse_Response.timestampSet,
    6 : DryRunSuccessResponse_Response.mintedToAccount,
    7 : DryRunSuccessResponse_Response.transactionExecuted,
    0 : DryRunSuccessResponse_Response.notSet
  };
  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DryRunSuccessResponse', package: const $pb.PackageName(_omitMessageNames ? '' : 'concordium.v2'), createEmptyInstance: create)
    ..oo(0, [1, 2, 3, 4, 5, 6, 7])
    ..aOM<DryRunSuccessResponse_BlockStateLoaded>(1, _omitFieldNames ? '' : 'blockStateLoaded', subBuilder: DryRunSuccessResponse_BlockStateLoaded.create)
    ..aOM<AccountInfo>(2, _omitFieldNames ? '' : 'accountInfo', subBuilder: AccountInfo.create)
    ..aOM<InstanceInfo>(3, _omitFieldNames ? '' : 'instanceInfo', subBuilder: InstanceInfo.create)
    ..aOM<DryRunSuccessResponse_InvokeSuccess>(4, _omitFieldNames ? '' : 'invokeSucceeded', subBuilder: DryRunSuccessResponse_InvokeSuccess.create)
    ..aOM<DryRunSuccessResponse_TimestampSet>(5, _omitFieldNames ? '' : 'timestampSet', subBuilder: DryRunSuccessResponse_TimestampSet.create)
    ..aOM<DryRunSuccessResponse_MintedToAccount>(6, _omitFieldNames ? '' : 'mintedToAccount', subBuilder: DryRunSuccessResponse_MintedToAccount.create)
    ..aOM<DryRunSuccessResponse_TransactionExecuted>(7, _omitFieldNames ? '' : 'transactionExecuted', subBuilder: DryRunSuccessResponse_TransactionExecuted.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse clone() => DryRunSuccessResponse()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DryRunSuccessResponse copyWith(void Function(DryRunSuccessResponse) updates) => super.copyWith((message) => updates(message as DryRunSuccessResponse)) as DryRunSuccessResponse;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse create() => DryRunSuccessResponse._();
  DryRunSuccessResponse createEmptyInstance() => create();
  static $pb.PbList<DryRunSuccessResponse> createRepeated() => $pb.PbList<DryRunSuccessResponse>();
  @$core.pragma('dart2js:noInline')
  static DryRunSuccessResponse getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DryRunSuccessResponse>(create);
  static DryRunSuccessResponse? _defaultInstance;

  DryRunSuccessResponse_Response whichResponse() => _DryRunSuccessResponse_ResponseByTag[$_whichOneof(0)]!;
  void clearResponse() => clearField($_whichOneof(0));

  /// The state from the specified block was successfully loaded.
  /// Response to 'load_block_state'.
  @$pb.TagNumber(1)
  DryRunSuccessResponse_BlockStateLoaded get blockStateLoaded => $_getN(0);
  @$pb.TagNumber(1)
  set blockStateLoaded(DryRunSuccessResponse_BlockStateLoaded v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasBlockStateLoaded() => $_has(0);
  @$pb.TagNumber(1)
  void clearBlockStateLoaded() => clearField(1);
  @$pb.TagNumber(1)
  DryRunSuccessResponse_BlockStateLoaded ensureBlockStateLoaded() => $_ensure(0);

  /// Details of the requested account.
  /// Response to 'get_account_info'.
  @$pb.TagNumber(2)
  AccountInfo get accountInfo => $_getN(1);
  @$pb.TagNumber(2)
  set accountInfo(AccountInfo v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasAccountInfo() => $_has(1);
  @$pb.TagNumber(2)
  void clearAccountInfo() => clearField(2);
  @$pb.TagNumber(2)
  AccountInfo ensureAccountInfo() => $_ensure(1);

  /// Details of the requested smart contract instance.
  /// Response to 'get_instance_info'.
  @$pb.TagNumber(3)
  InstanceInfo get instanceInfo => $_getN(2);
  @$pb.TagNumber(3)
  set instanceInfo(InstanceInfo v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasInstanceInfo() => $_has(2);
  @$pb.TagNumber(3)
  void clearInstanceInfo() => clearField(3);
  @$pb.TagNumber(3)
  InstanceInfo ensureInstanceInfo() => $_ensure(2);

  /// The smart contract instance was invoked successfully.
  @$pb.TagNumber(4)
  DryRunSuccessResponse_InvokeSuccess get invokeSucceeded => $_getN(3);
  @$pb.TagNumber(4)
  set invokeSucceeded(DryRunSuccessResponse_InvokeSuccess v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasInvokeSucceeded() => $_has(3);
  @$pb.TagNumber(4)
  void clearInvokeSucceeded() => clearField(4);
  @$pb.TagNumber(4)
  DryRunSuccessResponse_InvokeSuccess ensureInvokeSucceeded() => $_ensure(3);

  /// The current timestamp was set successfully.
  /// Response to 'set_timestamp'.
  @$pb.TagNumber(5)
  DryRunSuccessResponse_TimestampSet get timestampSet => $_getN(4);
  @$pb.TagNumber(5)
  set timestampSet(DryRunSuccessResponse_TimestampSet v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasTimestampSet() => $_has(4);
  @$pb.TagNumber(5)
  void clearTimestampSet() => clearField(5);
  @$pb.TagNumber(5)
  DryRunSuccessResponse_TimestampSet ensureTimestampSet() => $_ensure(4);

  /// The specified amount was minted and credited to the account.
  /// Response to 'mint_to_account'.
  @$pb.TagNumber(6)
  DryRunSuccessResponse_MintedToAccount get mintedToAccount => $_getN(5);
  @$pb.TagNumber(6)
  set mintedToAccount(DryRunSuccessResponse_MintedToAccount v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasMintedToAccount() => $_has(5);
  @$pb.TagNumber(6)
  void clearMintedToAccount() => clearField(6);
  @$pb.TagNumber(6)
  DryRunSuccessResponse_MintedToAccount ensureMintedToAccount() => $_ensure(5);

  /// The specified transaction was executed. Note that the transaction could still have
  /// been rejected.
  /// Response to 'run_transaction'.
  @$pb.TagNumber(7)
  DryRunSuccessResponse_TransactionExecuted get transactionExecuted => $_getN(6);
  @$pb.TagNumber(7)
  set transactionExecuted(DryRunSuccessResponse_TransactionExecuted v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasTransactionExecuted() => $_has(6);
  @$pb.TagNumber(7)
  void clearTransactionExecuted() => clearField(7);
  @$pb.TagNumber(7)
  DryRunSuccessResponse_TransactionExecuted ensureTransactionExecuted() => $_ensure(6);
}


const _omitFieldNames = $core.bool.fromEnvironment('protobuf.omit_field_names');
const _omitMessageNames = $core.bool.fromEnvironment('protobuf.omit_message_names');
